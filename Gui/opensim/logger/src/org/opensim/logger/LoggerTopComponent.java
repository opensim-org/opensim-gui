/* -------------------------------------------------------------------------- *
 * OpenSim: LoggerTopComponent.java                                           *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */
package org.opensim.logger;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import javax.swing.Action;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class LoggerTopComponent extends TopComponent {
   
   private static LoggerTopComponent instance;
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   
   private static final String PREFERRED_ID = "LoggerTopComponent";
      
   private LoggerTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(LoggerTopComponent.class, "CTL_LoggerTopComponent"));
      setToolTipText(NbBundle.getMessage(LoggerTopComponent.class, "HINT_LoggerTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
      jPopupMenu1.removeAll();
      addPopupCommands();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setComponentPopupMenu(jPopupMenu1);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setTabSize(4);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized LoggerTopComponent getDefault() {
       if (instance == null) {
          instance = new LoggerTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the LoggerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized LoggerTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Logger component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof LoggerTopComponent) {
          return (LoggerTopComponent)win;
       }
       ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
       // TODO add custom code on component opening
    }
    
    public void componentClosed() {
       // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
    protected String preferredID() {
       return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return LoggerTopComponent.getDefault();
       }
    }
    
    public void log(String str)
    {
      // While the user has the vertical scrollbar at the bottom, automatically scroll down as additional text is added
      // NOTE: not quite working yet...
      //JScrollBar vbar = jScrollPane1.getVerticalScrollBar();
      //boolean autoScroll = ((vbar.getValue() + vbar.getVisibleAmount()) == vbar.getMaximum());
      //System.out.println("val="+vbar.getValue()+" vis="+vbar.getVisibleAmount()+" max="+vbar.getMaximum()+" res="+autoScroll);
      jTextArea1.append(str+"\n");
      //if(autoScroll) jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    }

    private void addPopupCommands() {
        JMenuItem clearItem = jPopupMenu1.add("Clear");
        clearItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                jTextArea1.setText("");
            }});
    }
}
