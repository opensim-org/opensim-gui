/* -------------------------------------------------------------------------- *
 * OpenSim: EditOneForceJPanel.java                                           *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */
/*
 * EditOneForceJPanel.java
 *
 * Created on January 30, 2010, 1:37 PM
 */

package org.opensim.tracking;

import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JComboBox;
import org.openide.DialogDescriptor;
import org.opensim.modeling.ArrayInt;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.ExternalLoads;
import org.opensim.modeling.Model;
import org.opensim.modeling.ExternalForce;
import org.opensim.modeling.FrameIterator;
import org.opensim.modeling.FrameList;
import org.opensim.modeling.PhysicalFrame;
import org.opensim.modeling.Storage;

/**
 *
 * @author  ayman
 */
public class EditOneForceJPanel extends javax.swing.JPanel {
    ExternalForce externalForce=null;
    Storage forceStorage=null;
    //Model model;
    ExternalLoads loads;
    boolean initializing=true;
    ArrayStr lbls;
    private DialogDescriptor dDialog;
    boolean changeToUniqueNames=false;  // If true we should be using column numbers exclusively
    
    /** Creates new form EditOneForceJPanel */
    public EditOneForceJPanel(ExternalForce force, Storage storage, ExternalLoads aLoads) {
        externalForce = force;
        loads = aLoads;
        forceStorage = new Storage(storage);
        changeToUniqueNames = forceStorage.makeStorageLabelsUnique();
        if (changeToUniqueNames){ 
            // Prompt user to save to a new file, describe changes
        }
        lbls=forceStorage.getColumnLabels();
        //model = aModel;
        initComponents();
        ForceNameTextField.setText(force.getName());
        initComboBoxes();
        
        jCheckBoxForce.setSelected(externalForce.appliesForce());
        jRadioButtonApplyPointForce.setSelected(externalForce.specifiesPoint());
        jCheckBoxTorque.setSelected(externalForce.appliesTorque());
           
        updateAvailabilityFromCheckboxSelections();
        initializing=false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelExternalLoadsApplicationDescription = new javax.swing.JLabel();
        buttonGroupForceType = new javax.swing.ButtonGroup();
        EditOneForcePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        BodiesComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ForceNameTextField = new javax.swing.JTextField();
        jRadioButtonApplyPointForce = new javax.swing.JRadioButton();
        jRadioButtonApplyBodyForce = new javax.swing.JRadioButton();
        jComboBoxPY = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxPZ = new javax.swing.JComboBox();
        jComboBoxPX = new javax.swing.JComboBox();
        jCheckBoxForce = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFX = new javax.swing.JComboBox();
        jComboBoxFY = new javax.swing.JComboBox();
        jComboBoxFZ = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxTZ = new javax.swing.JComboBox();
        jComboBoxTY = new javax.swing.JComboBox();
        jComboBoxTX = new javax.swing.JComboBox();
        jCheckBoxTorque = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ForceExpressedBodiesComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        PointExpressedBodiesComboBox = new javax.swing.JComboBox();

        jLabelExternalLoadsApplicationDescription.setText("jLabel1");

        jLabel5.setText("Applied to");

        BodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BodiesComboBoxActionPerformed(evt);
            }
        });
        BodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                BodiesComboBoxFocusLost(evt);
            }
        });

        jLabel3.setText("Force Name");

        ForceNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceNameTextFieldActionPerformed(evt);
            }
        });
        ForceNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ForceNameTextFieldFocusLost(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyPointForce);
        jRadioButtonApplyPointForce.setSelected(true);
        jRadioButtonApplyPointForce.setText("Point Force");
        jRadioButtonApplyPointForce.setActionCommand("PointForce");
        jRadioButtonApplyPointForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyPointForce.setEnabled(false);
        jRadioButtonApplyPointForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyPointForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyPointForceActionPerformed(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyBodyForce);
        jRadioButtonApplyBodyForce.setText("Body Force");
        jRadioButtonApplyBodyForce.setActionCommand("BodyForce");
        jRadioButtonApplyBodyForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.setEnabled(false);
        jRadioButtonApplyBodyForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyBodyForceActionPerformed(evt);
            }
        });

        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPY.setEnabled(false);
        jComboBoxPY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel6.setText("Point Columns");

        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPZ.setEnabled(false);
        jComboBoxPZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPXActionPerformed(evt);
            }
        });

        jCheckBoxForce.setText("Applies Force");
        jCheckBoxForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxForceActionPerformed(evt);
            }
        });

        jLabel4.setText("Force Columns");

        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_px", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFXActionPerformed(evt);
            }
        });

        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_py", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFY.setEnabled(false);
        jComboBoxFY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_pz", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFZ.setEnabled(false);
        jComboBoxFZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel7.setText("Torque Columns");

        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTZ.setEnabled(false);
        jComboBoxTZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTY.setEnabled(false);
        jComboBoxTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTXActionPerformed(evt);
            }
        });

        jCheckBoxTorque.setText("Applies Torque");
        jCheckBoxTorque.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxTorque.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxTorque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTorqueActionPerformed(evt);
            }
        });

        jLabel1.setText("Force Expressed in");

        ForceExpressedBodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ForceExpressedBodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceExpressedBodiesComboBoxActionPerformed(evt);
            }
        });
        ForceExpressedBodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ForceExpressedBodiesComboBoxFocusLost(evt);
            }
        });

        jLabel2.setText("Point Expressed in");

        PointExpressedBodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PointExpressedBodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointExpressedBodiesComboBoxActionPerformed(evt);
            }
        });
        PointExpressedBodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PointExpressedBodiesComboBoxFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout EditOneForcePanelLayout = new org.jdesktop.layout.GroupLayout(EditOneForcePanel);
        EditOneForcePanel.setLayout(EditOneForcePanelLayout);
        EditOneForcePanelLayout.setHorizontalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jLabel7)
                                .add(35, 35, 35)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxTX, 0, 133, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxPX, 0, 133, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxFX, 0, 133, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxPY, 0, 115, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxFY, 0, 115, Short.MAX_VALUE))
                                        .add(8, 8, 8))
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(jComboBoxTY, 0, 117, Short.MAX_VALUE)
                                        .add(6, 6, 6))
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(10, 10, 10)
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))))
                            .add(jCheckBoxTorque)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel4)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jCheckBoxForce))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel5))
                        .add(13, 13, 13)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, BodiesComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(39, 39, 39)
                                .add(jRadioButtonApplyPointForce))
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel1)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButtonApplyBodyForce)
                            .add(ForceExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(161, 161, 161)))
                .add(0, 0, 0)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jComboBoxPZ, 0, 126, Short.MAX_VALUE)
                    .add(jComboBoxTZ, 0, 126, Short.MAX_VALUE)
                    .add(jComboBoxFZ, 0, 126, Short.MAX_VALUE)
                    .add(PointExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        EditOneForcePanelLayout.setVerticalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxForce)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButtonApplyPointForce)
                    .add(jRadioButtonApplyBodyForce))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jComboBoxFX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jComboBoxFY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jComboBoxFZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jComboBoxPZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(jCheckBoxTorque)
                .add(2, 2, 2)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jComboBoxTZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(ForceExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(PointExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PointExpressedBodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PointExpressedBodiesComboBoxFocusLost
// TODO add your handling code here:
          updateForceFromPanel();
    }//GEN-LAST:event_PointExpressedBodiesComboBoxFocusLost

    private void PointExpressedBodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointExpressedBodiesComboBoxActionPerformed
// TODO add your handling code here:
          updateForceFromPanel();        
    }//GEN-LAST:event_PointExpressedBodiesComboBoxActionPerformed

    private void ForceExpressedBodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ForceExpressedBodiesComboBoxFocusLost
// TODO add your handling code here:
          updateForceFromPanel();
    }//GEN-LAST:event_ForceExpressedBodiesComboBoxFocusLost

    private void ForceExpressedBodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceExpressedBodiesComboBoxActionPerformed
// TODO add your handling code here:
        updateForceFromPanel();
    }//GEN-LAST:event_ForceExpressedBodiesComboBoxActionPerformed
    
    private void jComboBoxTXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxTY.setSelectedIndex(idx+1);
            jComboBoxTZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTXActionPerformed
    
    private void jComboBoxPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxPY.setSelectedIndex(idx+1);
            jComboBoxPZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPXActionPerformed
    
    private void jComboBoxFXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFXActionPerformed
// TODO add your handling code here:
        // Populate next two dropdown from the following 2 columns
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxFY.setSelectedIndex(idx+1);
            jComboBoxFZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jComboBoxFXActionPerformed
            
    private void updateForceFromPanel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateForceFromPanel
// TODO add your handling code here:
        //updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_updateForceFromPanel
    
    private void jCheckBoxForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxForceActionPerformed
// TODO add your handling code here:
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jCheckBoxForceActionPerformed
    
    private void jCheckBoxTorqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTorqueActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxTorqueActionPerformed
    
    private void jRadioButtonApplyPointForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyPointForceActionPerformed
// TODO add your handling code here:
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jRadioButtonApplyPointForceActionPerformed
    
    private void jRadioButtonApplyBodyForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyBodyForceActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonApplyBodyForceActionPerformed
    
    private void BodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BodiesComboBoxFocusLost
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxFocusLost
    
    private void BodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BodiesComboBoxActionPerformed
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxActionPerformed
    
    private void ForceNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ForceNameTextFieldFocusLost
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_ForceNameTextFieldFocusLost
    
    private void ForceNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceNameTextFieldActionPerformed
        if (checkValid()) updateForceFromPanel();
    }//GEN-LAST:event_ForceNameTextFieldActionPerformed
    // Initialize GUI Panel from a externalForce
    private void initComboBoxes() {
        // Body name combobox
        
        Model model=loads.getModel(); 
        FrameList frameList = model.getFrameList();
        populateBodyList(frameList, BodiesComboBox);
         BodiesComboBox.setSelectedItem(externalForce.getAppliedToBodyName());
        // All other drop downs, populate with column names except time.
        Vector<String> colmnLabels = lbls.toVector();
        colmnLabels.set(0,""); // no default column & time shouldn't be permitted anyway'
        String[] colNames = new String[colmnLabels.size()];
        colmnLabels.toArray(colNames);
        // Force dropdowns
        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jCheckBoxForce.setSelected(false);
        String forceId = externalForce.getForceIdentifier();
        //externalForce.getForceFunctionNames(forceFunctionNames);
        if (externalForce.appliesForce()){
            setComboBoxSelection(jComboBoxFX, forceId, 0);
            setComboBoxSelection(jComboBoxFY, forceId, 1);
            setComboBoxSelection(jComboBoxFZ, forceId, 2);
        }
        // Point dropdowns
        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        String pointId = externalForce.getPointIdentifier();
        //externalForce.getPointFunctionNames(pointFunctionNames);
        if (externalForce.specifiesPoint()){
            setComboBoxSelection(jComboBoxPX, pointId, 0);
            setComboBoxSelection(jComboBoxPY, pointId, 1);
            setComboBoxSelection(jComboBoxPZ, pointId, 2);
            jRadioButtonApplyPointForce.setSelected(true);
        } else
            jRadioButtonApplyBodyForce.setSelected(true);
        //Torques
        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        
        jCheckBoxTorque.setSelected(false);
        //externalForce.getTorqueFunctionNames(torqueFunctionNames);
        if (externalForce.appliesTorque()){
            String torqueId = externalForce.getTorqueIdentifier();
            setComboBoxSelection(jComboBoxTX, torqueId, 0);
            setComboBoxSelection(jComboBoxTY, torqueId, 1);
            setComboBoxSelection(jComboBoxTZ, torqueId, 2);
            jCheckBoxTorque.setSelected(true);
        }
        populateBodyList(frameList, ForceExpressedBodiesComboBox);
        populateBodyList(frameList, PointExpressedBodiesComboBox);
        String dbg1 = externalForce.getForceExpressedInBodyName();
        ForceExpressedBodiesComboBox.setSelectedItem(externalForce.getForceExpressedInBodyName());
        String dbg2 = externalForce.getPointExpressedInBodyName();
        PointExpressedBodiesComboBox.setSelectedItem(externalForce.getPointExpressedInBodyName());

    }

    private void populateBodyList(final FrameList frameList, JComboBox comboBox) {
        comboBox.removeAllItems();
        FrameIterator bi = frameList.begin();
        ArrayList<String> frameNames = new ArrayList<String>();
        while(!bi.equals(frameList.end())){
              if (PhysicalFrame.safeDownCast(bi.__deref__())!= null){
                  frameNames.add(bi.getName());
              }
             bi.next();
        }
        String[] bNames = new String[frameNames.size()];
        for(int i=0; i<frameNames.size(); i++){
            bNames[i] = frameNames.get(i);
            comboBox.addItem(bNames[i]);
        }
        comboBox.setModel(new javax.swing.DefaultComboBoxModel(bNames));
    }
    
    private void setComboBoxSelection(final JComboBox jcombox, final String objIdentifier, final int j) throws NumberFormatException {
        ArrayInt indices = forceStorage.getColumnIndicesForIdentifier(objIdentifier);
        if (indices.getSize()!=3) return;
        if (indices.getitem(j)== -1) return;
        //String[] suffixes = new String[]{"x", "y", "z"};
        jcombox.setSelectedItem(lbls.getitem(indices.getitem(j)));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox BodiesComboBox;
    private javax.swing.JPanel EditOneForcePanel;
    private javax.swing.JComboBox ForceExpressedBodiesComboBox;
    private javax.swing.JTextField ForceNameTextField;
    private javax.swing.JComboBox PointExpressedBodiesComboBox;
    private javax.swing.ButtonGroup buttonGroupForceType;
    private javax.swing.JCheckBox jCheckBoxForce;
    private javax.swing.JCheckBox jCheckBoxTorque;
    private javax.swing.JComboBox jComboBoxFX;
    private javax.swing.JComboBox jComboBoxFY;
    private javax.swing.JComboBox jComboBoxFZ;
    private javax.swing.JComboBox jComboBoxPX;
    private javax.swing.JComboBox jComboBoxPY;
    private javax.swing.JComboBox jComboBoxPZ;
    private javax.swing.JComboBox jComboBoxTX;
    private javax.swing.JComboBox jComboBoxTY;
    private javax.swing.JComboBox jComboBoxTZ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelExternalLoadsApplicationDescription;
    private javax.swing.JRadioButton jRadioButtonApplyBodyForce;
    private javax.swing.JRadioButton jRadioButtonApplyPointForce;
    // End of variables declaration//GEN-END:variables
    
    // Update ExternalForce based on selection in the GUI Panel
    private void updateForceFromPanel() {
        if (initializing) return;
        String forceName=ForceNameTextField.getText();
        if (forceName != null && forceName.length()!=0)
           externalForce.setName(forceName);
        
        String forceBodyame = (String) BodiesComboBox.getSelectedItem();
        if (forceBodyame != null && forceBodyame.length()!=0)
           externalForce.setAppliedToBodyName(forceBodyame);
        
        // Set either forcefunctions or force and pointFunctions if ForceCheckBox is on
        if (jCheckBoxForce.isSelected()){
            // get first selected item and make sure it has a common prefix with other 2 use the prefix as forceIdentifier
            externalForce.setForceIdentifier(makeIdentifier(
                    (String)jComboBoxFX.getSelectedItem(),
                    (String)jComboBoxFY.getSelectedItem(), 
                    (String)jComboBoxFZ.getSelectedItem()));
            // if point force also allow for setPointFunctionNames
            String cmd=buttonGroupForceType.getSelection().getActionCommand();
            if (cmd.equals("PointForce")){
                externalForce.setPointIdentifier(makeIdentifier(
                    (String)jComboBoxPX.getSelectedItem(),
                    (String)jComboBoxPY.getSelectedItem(), 
                    (String)jComboBoxPZ.getSelectedItem()));
            } 
        } else {
            // Clear all
            externalForce.setForceIdentifier("");
            jComboBoxFX.setSelectedItem("");
            jComboBoxFY.setSelectedItem("");
            jComboBoxFZ.setSelectedItem("");
            externalForce.setPointIdentifier("");
            jComboBoxPX.setSelectedItem("");
            jComboBoxPY.setSelectedItem("");
            jComboBoxPZ.setSelectedItem("");
        }
        // Set torquefunctions if TorqueCheckBox is on
        if (jCheckBoxTorque.isSelected()){
           externalForce.setTorqueIdentifier(makeIdentifier(
                    (String)jComboBoxTX.getSelectedItem(),
                    (String)jComboBoxTY.getSelectedItem(), 
                    (String)jComboBoxTZ.getSelectedItem()));
        } else {
            externalForce.setTorqueIdentifier("");
            jComboBoxTX.setSelectedItem("");
            jComboBoxTY.setSelectedItem("");
            jComboBoxTZ.setSelectedItem("");
        }
        String selected = (String) ForceExpressedBodiesComboBox.getSelectedItem();
        if (selected !=null)
            externalForce.setForceExpressedInBodyName(selected);
        selected = (String) PointExpressedBodiesComboBox.getSelectedItem();
        if (selected !=null)
            externalForce.setPointExpressedInBodyName(selected);
    }
    // Convenience method to enable/disable buttons and dropdowns based on user selections
    // for check-boxes, radio-buttons
    private void updateAvailabilityFromCheckboxSelections() {
        boolean applyForce=jCheckBoxForce.isSelected();
        String cmd = buttonGroupForceType.getSelection().getActionCommand();
        jRadioButtonApplyPointForce.setEnabled(applyForce);
        jRadioButtonApplyBodyForce.setEnabled(applyForce);
        jLabelExternalLoadsApplicationDescription.setText("");
        if (cmd.equals("BodyForce")){
            jComboBoxFX.setEnabled(applyForce);
            jComboBoxFY.setEnabled(applyForce);
            jComboBoxFZ.setEnabled(applyForce);
            jComboBoxPX.setEnabled(false);
            jComboBoxPY.setEnabled(false);
            jComboBoxPZ.setEnabled(false);
            //PointIsGlobalCheckBox.setEnabled(false);
        } else {  // Point Force: need to specify everything
            jComboBoxFX.setEnabled(applyForce);
            jComboBoxFY.setEnabled(applyForce);
            jComboBoxFZ.setEnabled(applyForce);
            jComboBoxPX.setEnabled(applyForce);
            jComboBoxPY.setEnabled(applyForce);
            jComboBoxPZ.setEnabled(applyForce);
            //PointIsGlobalCheckBox.setEnabled(true);
            jLabelExternalLoadsApplicationDescription.setText("Point is converted to local frame using external loads kinematics.");
        }
        
        // Now torque
        boolean applyTorque =jCheckBoxTorque.isSelected();
        jComboBoxTX.setEnabled(applyTorque);
        jComboBoxTY.setEnabled(applyTorque);
        jComboBoxTZ.setEnabled(applyTorque);
        if (dDialog!= null) dDialog.setValid(checkValid());
    }
    
    public void setDDialog(DialogDescriptor dDialog) {
        this.dDialog = dDialog;
    }
    
    private boolean checkValid() {
        // If checkbox is picked
        if (!jCheckBoxTorque.isSelected() && !jCheckBoxForce.isSelected()) return false;
        if (ForceNameTextField.getText().length()==0) return false;
        if (jCheckBoxForce.isSelected()){
            if (jComboBoxFX.getSelectedItem().equals("") ||
                    jComboBoxFY.getSelectedItem().equals("") ||
                    jComboBoxFZ.getSelectedItem().equals("")){
                return false;
            }
            String cmd=buttonGroupForceType.getSelection().getActionCommand();
            if (cmd.equals("PointForce")){
                if (jComboBoxPX.getSelectedItem().equals("") ||
                        jComboBoxPY.getSelectedItem().equals("") ||
                        jComboBoxPZ.getSelectedItem().equals("")){
                    return false;
                }
                
            }
        }
        if (jCheckBoxTorque.isSelected()){
            if (jComboBoxTX.getSelectedItem().equals("") ||
                    jComboBoxTY.getSelectedItem().equals("") ||
                    jComboBoxTZ.getSelectedItem().equals(""))
                return false;
        }
        return true;
    }
    public boolean  makeStorageLabelsUnique(Storage aStore) {
        ArrayStr lbls = aStore.getColumnLabels();
        String offending="";
        boolean changedLabels=false;
        for(int i=0; i< lbls.getSize(); i++){
            boolean isUnique= (lbls.findIndex(lbls.getitem(i))==i);
            if (!isUnique){ // Make new names
                offending =lbls.getitem(i);
                boolean exist=true;
                String newName =offending;
                changedLabels = true;
                int c=1;
                while(exist){
                    newName = offending+"("+String.valueOf(c)+")";
                    exist= (lbls.findIndex(newName)!=-1);
                    c++;
                }
                lbls.setitem(i, newName);
            }
        }
        return (!changedLabels);
    }
    /**
     * We should expect these strings to have common prefix except for last letter
     * we should handle error conditions gracefully
     */
    public static String makeIdentifier(String stringX, String stringY, String stringZ) {
        if (stringX.length()<2) return "";
        String candidate= stringX.substring(0, stringX.length()-1);
        if (stringY.startsWith(candidate) && stringZ.startsWith(candidate))
            return candidate;
        else
            return "";
    }
}
