/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A convenience class for managing ExternaForce(s) to be applied to a model.<br>
 * This includes creating instances and manipulating the data source<br>
 * of individual ExternalForces so that they satisfy conditions imposed<br>
 * by particular Tools. For example, ForwardTool, CMC/RRA, achieve better<br>
 * tracking (slower divergence) if the ground reaction forces are applied<br>
 * to a point that is expressed in the foot frame according to "ideal"<br>
 * kinematics. ExternalLoads provides convenience methods to perform this<br>
 * "mapping" which is beyond the scope of an individual ExternalForce, but is<br>
 * too much detail to have each Tool implement.<br>
 * <br>
 * An individual ExternalForce has a property for its data source name, but <br>
 * under the management of ExternalLoads, the data source identified by<br>
 * ExternalLoads is used to set the data source on each ExternalForce. <br>
 * If multiple data sources are required for different groups of external forces<br>
 * then use multiple ExternalLoads.<br>
 * <br>
 * @author Ajay Seth, Ayman Habib 
 */
public class ExternalLoads extends ModelComponentSetExternalForces {
  private transient long swigCPtr;

  public ExternalLoads(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ExternalLoads_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ExternalLoads obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ExternalLoads(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ExternalLoads safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ExternalLoads_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ExternalLoads(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ExternalLoads_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ExternalLoads_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ExternalLoads_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ExternalLoads(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ExternalLoads_getConcreteClassName(swigCPtr, this);
  }

  public ExternalLoads() {
    this(opensimSimulationJNI.new_ExternalLoads__SWIG_0(), true);
  }

  /**
   *   Construct an actuator set from file.<br>
   * @param fileName Name of the file.<br>
   * @param aUpdateFromXMLNode Should the ExternalLoads be updated from the<br>
   * file? 
   */
  public ExternalLoads(String fileName, boolean aUpdateFromXMLNode) {
    this(opensimSimulationJNI.new_ExternalLoads__SWIG_1(fileName, aUpdateFromXMLNode), true);
  }

  public ExternalLoads(ExternalLoads aExternalLoads) {
    this(opensimSimulationJNI.new_ExternalLoads__SWIG_2(ExternalLoads.getCPtr(aExternalLoads), aExternalLoads), true);
  }

  public void copyData(ExternalLoads otherExternalLoads) {
    opensimSimulationJNI.ExternalLoads_copyData(swigCPtr, this, ExternalLoads.getCPtr(otherExternalLoads), otherExternalLoads);
  }

  /**
   *  Override of the default implementation to account for versioning. 
   */
  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode, int versionNumber) {
    opensimSimulationJNI.ExternalLoads_updateFromXMLNode__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode), versionNumber);
  }

  /**
   *  Override of the default implementation to account for versioning. 
   */
  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode) {
    opensimSimulationJNI.ExternalLoads_updateFromXMLNode__SWIG_1(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode));
  }

  public void extendConnectToModel(Model aModel) {
    opensimSimulationJNI.ExternalLoads_extendConnectToModel(swigCPtr, this, Model.getCPtr(aModel), aModel);
  }

  public String getDataFileName() {
    return opensimSimulationJNI.ExternalLoads_getDataFileName(swigCPtr, this);
  }

  public void setDataFileName(String aNewFile) {
    opensimSimulationJNI.ExternalLoads_setDataFileName(swigCPtr, this, aNewFile);
  }

  public void transformPointsExpressedInGroundToAppliedBodies(Storage kinematics, double startTime, double endTime) {
    opensimSimulationJNI.ExternalLoads_transformPointsExpressedInGroundToAppliedBodies__SWIG_0(swigCPtr, this, Storage.getCPtr(kinematics), kinematics, startTime, endTime);
  }

  public void transformPointsExpressedInGroundToAppliedBodies(Storage kinematics, double startTime) {
    opensimSimulationJNI.ExternalLoads_transformPointsExpressedInGroundToAppliedBodies__SWIG_1(swigCPtr, this, Storage.getCPtr(kinematics), kinematics, startTime);
  }

  public void transformPointsExpressedInGroundToAppliedBodies(Storage kinematics) {
    opensimSimulationJNI.ExternalLoads_transformPointsExpressedInGroundToAppliedBodies__SWIG_2(swigCPtr, this, Storage.getCPtr(kinematics), kinematics);
  }

  public ExternalForce transformPointExpressedInGroundToAppliedBody(ExternalForce exForce, Storage kinematics, double startTime, double endTime) {
    long cPtr = opensimSimulationJNI.ExternalLoads_transformPointExpressedInGroundToAppliedBody(swigCPtr, this, ExternalForce.getCPtr(exForce), exForce, Storage.getCPtr(kinematics), kinematics, startTime, endTime);
    return (cPtr == 0) ? null : new ExternalForce(cPtr, false);
  }

  /**
   *  ExternalLoads remembers the file it was loaded from, even after being<br>
   *  copied. This file path is used to find the datafile relative to the<br>
   *  location of the ExternalLoads file itself. This function can clear<br>
   *  the memory of the file that the original ExternalLoads came from.<br>
   *  In general, users should not need to use this function.
   */
  public void clearLoadedFromFile() {
    opensimSimulationJNI.ExternalLoads_clearLoadedFromFile(swigCPtr, this);
  }

}
