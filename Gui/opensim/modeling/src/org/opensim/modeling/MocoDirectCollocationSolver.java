/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This is a base class for solvers that use direct collocation to convert<br>
 * an optimal control problem into a generic nonlinear programming problem.<br>
 * The best resource for learning about direct collocation is the Betts<br>
 * textbook:<br>
 * <br>
 * Betts, John T. Practical methods for optimal control and estimation using<br>
 * nonlinear programming. Vol. 19. Siam, 2010.<br>
 * <br>
 * MocoDirectCollocationSolver<br>
 * ===========================<br>
 * Transcription scheme<br>
 * --------------------<br>
 * The `transcription_scheme` setting allows you to choose between<br>
 * 'trapezoidal' and 'hermite-simpson' transcription schemes. The 'trapezoidal'<br>
 * option replaces the dynamics differential constraints with finite<br>
 * differences based on trapezoidal rule integration. The 'hermite-simpson'<br>
 * option uses a Hermite interpolant and Simpson integration to construct the<br>
 * finite differences. The 'hermite-simpson' option uses the separated<br>
 * Hermite-Simpson transcription approach, which allows control values at mesh<br>
 * interval midpoints to be free variables (see Betts textbook for more<br>
 * details). The setting `interpolate_control_midpoints` constrains control<br>
 * midpoint variables to be linearly interpolated from the mesh interval<br>
 * endpoint values (default and recommended setting). If solving problems<br>
 * including model kinematic constraints, the 'hermite-simpson' option is<br>
 * required (see Kinematic constraints section below).<br>
 * <br>
 * Path constraints on controls with Hermite-Simpson transcription<br>
 * ---------------------------------------------------------------<br>
 * For Hermite-Simpson transcription, the direct collocation solvers enforce<br>
 * the path constraints (e.g., MocoPathConstraint) at only the mesh interval<br>
 * endpoints (not midpoints), but control signal variables exist at both mesh<br>
 * interval endpoints and midpoints. Keep this in mind when using path<br>
 * constraints on controls (e.g., MocoControlBoundConstraint). If<br>
 * `interpolate_control_midpoints` is false, the values of a control at<br>
 * midpoints may differ greatly from the values at mesh interval endpoints.<br>
 * <br>
 * Multibody dynamics mode<br>
 * -----------------------<br>
 * The `multibody_dynamics_mode` setting allows you to choose between<br>
 * expressing multibody dynamics as explicit differential equations (e.g.,  
\dot{y} = f(y) ) or implicit differential equations (e.g.,   0 = f(y,
\dot{y}) , or inverse dynamics). Whether auxiliary dynamics (e.g.,<br>
 * muscle fiber and activation dynamics) are implicit or explicit depends on<br>
 * the model component implementing those dynamics.<br>
 * <br>
 * Kinematic constraints<br>
 * ---------------------<br>
 * All holonomic kinematic constraints included as OpenSim model constraints are<br>
 * supported. Both the 'trapezoidal' and 'hermite-simpson' transcription schemes<br>
 * support kinematic constraints, but the 'hermite-transcription' scheme handles<br>
 * kinematic constraints much more robustly; in practice, the 'trapezoidal' scheme<br>
 * is not used for models with kinematic constraints. Kinematic constraints are<br>
 * automatically detected if present in the model and are converted to path<br>
 * constraints in the optimal control problem based on the method presented in Posa<br>
 * et al. 2016, 'Optimization and stabilization of trajectories for constrained<br>
 * dynamical systems'; see <a href="#implkincon">implkincon</a>. The `minimize_lagrange_multipliers` and<br>
 * `lagrange_multiplier_weight` settings allow you to enable and set the weight for<br>
 * the minimization of all Lagrange multipliers associated with kinematic<br>
 * constraints in the problem. The `velocity_correction_bounds` setting allows you<br>
 * to set the bounds on the velocity correction variables that project state<br>
 * variables onto the constraint manifold when necessary to properly enforce defect<br>
 * constraints (see Posa et al. 2016 for details). 
 */
public class MocoDirectCollocationSolver extends MocoSolver {
  private transient long swigCPtr;

  public MocoDirectCollocationSolver(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoDirectCollocationSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoDirectCollocationSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoDirectCollocationSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoDirectCollocationSolver safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoDirectCollocationSolver_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoDirectCollocationSolver(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoDirectCollocationSolver_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoDirectCollocationSolver_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoDirectCollocationSolver_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoDirectCollocationSolver(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoDirectCollocationSolver_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_num_mesh_intervals(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_num_mesh_intervals(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public int get_num_mesh_intervals(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_num_mesh_intervals__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_num_mesh_intervals(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_num_mesh_intervals__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_num_mesh_intervals(int i, int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_num_mesh_intervals__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_num_mesh_intervals(int value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_num_mesh_intervals(swigCPtr, this, value);
  }

  public void constructProperty_num_mesh_intervals(int initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_num_mesh_intervals(swigCPtr, this, initValue);
  }

  public int get_num_mesh_intervals() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_num_mesh_intervals__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_num_mesh_intervals() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_num_mesh_intervals__SWIG_1(swigCPtr, this), false);
  }

  public void set_num_mesh_intervals(int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_num_mesh_intervals__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_verbosity(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_verbosity(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public int get_verbosity(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_verbosity__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_verbosity(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_verbosity__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_verbosity(int i, int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_verbosity__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_verbosity(int value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_verbosity(swigCPtr, this, value);
  }

  public void constructProperty_verbosity(int initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_verbosity(swigCPtr, this, initValue);
  }

  public int get_verbosity() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_verbosity__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_verbosity() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_verbosity__SWIG_1(swigCPtr, this), false);
  }

  public void set_verbosity(int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_verbosity__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_transcription_scheme(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_transcription_scheme(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public String get_transcription_scheme(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_transcription_scheme__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_transcription_scheme(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_transcription_scheme__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_transcription_scheme(int i, String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_transcription_scheme__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_transcription_scheme(String value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_transcription_scheme(swigCPtr, this, value);
  }

  public void constructProperty_transcription_scheme(String initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_transcription_scheme(swigCPtr, this, initValue);
  }

  public String get_transcription_scheme() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_transcription_scheme__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_transcription_scheme() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_transcription_scheme__SWIG_1(swigCPtr, this), false);
  }

  public void set_transcription_scheme(String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_transcription_scheme__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_interpolate_control_midpoints(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_interpolate_control_midpoints(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public boolean get_interpolate_control_midpoints(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_interpolate_control_midpoints__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_interpolate_control_midpoints(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_interpolate_control_midpoints__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_interpolate_control_midpoints(int i, boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_interpolate_control_midpoints__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_interpolate_control_midpoints(boolean value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_interpolate_control_midpoints(swigCPtr, this, value);
  }

  public void constructProperty_interpolate_control_midpoints(boolean initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_interpolate_control_midpoints(swigCPtr, this, initValue);
  }

  public boolean get_interpolate_control_midpoints() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_interpolate_control_midpoints__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_interpolate_control_midpoints() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_interpolate_control_midpoints__SWIG_1(swigCPtr, this), false);
  }

  public void set_interpolate_control_midpoints(boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_interpolate_control_midpoints__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_multibody_dynamics_mode(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_multibody_dynamics_mode(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public String get_multibody_dynamics_mode(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_multibody_dynamics_mode__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_multibody_dynamics_mode(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_multibody_dynamics_mode__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_multibody_dynamics_mode(int i, String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_multibody_dynamics_mode__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_multibody_dynamics_mode(String value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_multibody_dynamics_mode(swigCPtr, this, value);
  }

  public void constructProperty_multibody_dynamics_mode(String initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_multibody_dynamics_mode(swigCPtr, this, initValue);
  }

  public String get_multibody_dynamics_mode() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_multibody_dynamics_mode__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_multibody_dynamics_mode() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_multibody_dynamics_mode__SWIG_1(swigCPtr, this), false);
  }

  public void set_multibody_dynamics_mode(String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_multibody_dynamics_mode__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_solver(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_solver(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public String get_optim_solver(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_solver__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_optim_solver(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_solver__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_solver(int i, String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_solver__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_solver(String value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_solver(swigCPtr, this, value);
  }

  public void constructProperty_optim_solver(String initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_solver(swigCPtr, this, initValue);
  }

  public String get_optim_solver() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_solver__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_optim_solver() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_solver__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_solver(String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_solver__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_max_iterations(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_max_iterations(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public int get_optim_max_iterations(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_max_iterations__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_optim_max_iterations(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_max_iterations__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_max_iterations(int i, int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_max_iterations__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_max_iterations(int value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_max_iterations(swigCPtr, this, value);
  }

  public void constructProperty_optim_max_iterations(int initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_max_iterations(swigCPtr, this, initValue);
  }

  public int get_optim_max_iterations() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_max_iterations__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_optim_max_iterations() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_max_iterations__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_max_iterations(int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_max_iterations__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_convergence_tolerance(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_convergence_tolerance(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public double get_optim_convergence_tolerance(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_convergence_tolerance__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_optim_convergence_tolerance(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_convergence_tolerance__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_convergence_tolerance(int i, double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_convergence_tolerance__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_convergence_tolerance(double value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_convergence_tolerance(swigCPtr, this, value);
  }

  public void constructProperty_optim_convergence_tolerance(double initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_convergence_tolerance(swigCPtr, this, initValue);
  }

  public double get_optim_convergence_tolerance() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_convergence_tolerance__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_optim_convergence_tolerance() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_convergence_tolerance__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_convergence_tolerance(double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_convergence_tolerance__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_constraint_tolerance(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_constraint_tolerance(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public double get_optim_constraint_tolerance(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_constraint_tolerance__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_optim_constraint_tolerance(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_constraint_tolerance__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_constraint_tolerance(int i, double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_constraint_tolerance__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_constraint_tolerance(double value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_constraint_tolerance(swigCPtr, this, value);
  }

  public void constructProperty_optim_constraint_tolerance(double initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_constraint_tolerance(swigCPtr, this, initValue);
  }

  public double get_optim_constraint_tolerance() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_constraint_tolerance__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_optim_constraint_tolerance() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_constraint_tolerance__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_constraint_tolerance(double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_constraint_tolerance__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_hessian_approximation(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_hessian_approximation(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public String get_optim_hessian_approximation(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_hessian_approximation__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_optim_hessian_approximation(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_hessian_approximation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_hessian_approximation(int i, String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_hessian_approximation__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_hessian_approximation(String value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_hessian_approximation(swigCPtr, this, value);
  }

  public void constructProperty_optim_hessian_approximation(String initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_hessian_approximation(swigCPtr, this, initValue);
  }

  public String get_optim_hessian_approximation() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_hessian_approximation__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_optim_hessian_approximation() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_hessian_approximation__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_hessian_approximation(String value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_hessian_approximation__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_ipopt_print_level(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_optim_ipopt_print_level(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public int get_optim_ipopt_print_level(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_ipopt_print_level__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_optim_ipopt_print_level(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_ipopt_print_level__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_ipopt_print_level(int i, int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_ipopt_print_level__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_ipopt_print_level(int value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_optim_ipopt_print_level(swigCPtr, this, value);
  }

  public void constructProperty_optim_ipopt_print_level(int initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_optim_ipopt_print_level(swigCPtr, this, initValue);
  }

  public int get_optim_ipopt_print_level() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_optim_ipopt_print_level__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_optim_ipopt_print_level() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoDirectCollocationSolver_upd_optim_ipopt_print_level__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_ipopt_print_level(int value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_optim_ipopt_print_level__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_enforce_constraint_derivatives(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_enforce_constraint_derivatives(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public boolean get_enforce_constraint_derivatives(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_enforce_constraint_derivatives__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_enforce_constraint_derivatives(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_enforce_constraint_derivatives__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_enforce_constraint_derivatives(int i, boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_enforce_constraint_derivatives__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_enforce_constraint_derivatives(boolean value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_enforce_constraint_derivatives(swigCPtr, this, value);
  }

  public void constructProperty_enforce_constraint_derivatives() {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_enforce_constraint_derivatives__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_enforce_constraint_derivatives(boolean initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_enforce_constraint_derivatives__SWIG_1(swigCPtr, this, initValue);
  }

  public boolean get_enforce_constraint_derivatives() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_enforce_constraint_derivatives__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_enforce_constraint_derivatives() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_enforce_constraint_derivatives__SWIG_1(swigCPtr, this), false);
  }

  public void set_enforce_constraint_derivatives(boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_enforce_constraint_derivatives__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimize_lagrange_multipliers(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_minimize_lagrange_multipliers(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public boolean get_minimize_lagrange_multipliers(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_minimize_lagrange_multipliers__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_minimize_lagrange_multipliers(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_minimize_lagrange_multipliers__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimize_lagrange_multipliers(int i, boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_minimize_lagrange_multipliers__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimize_lagrange_multipliers(boolean value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_minimize_lagrange_multipliers(swigCPtr, this, value);
  }

  public void constructProperty_minimize_lagrange_multipliers(boolean initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_minimize_lagrange_multipliers(swigCPtr, this, initValue);
  }

  public boolean get_minimize_lagrange_multipliers() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_minimize_lagrange_multipliers__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_minimize_lagrange_multipliers() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoDirectCollocationSolver_upd_minimize_lagrange_multipliers__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimize_lagrange_multipliers(boolean value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_minimize_lagrange_multipliers__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_lagrange_multiplier_weight(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_lagrange_multiplier_weight(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public double get_lagrange_multiplier_weight(int i) {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_lagrange_multiplier_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_lagrange_multiplier_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_lagrange_multiplier_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_lagrange_multiplier_weight(int i, double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_lagrange_multiplier_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_lagrange_multiplier_weight(double value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_lagrange_multiplier_weight(swigCPtr, this, value);
  }

  public void constructProperty_lagrange_multiplier_weight(double initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_lagrange_multiplier_weight(swigCPtr, this, initValue);
  }

  public double get_lagrange_multiplier_weight() {
    return opensimMocoJNI.MocoDirectCollocationSolver_get_lagrange_multiplier_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_lagrange_multiplier_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoDirectCollocationSolver_upd_lagrange_multiplier_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_lagrange_multiplier_weight(double value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_lagrange_multiplier_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_velocity_correction_bounds(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_velocity_correction_bounds(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public MocoBounds get_velocity_correction_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_velocity_correction_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoBounds upd_velocity_correction_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_velocity_correction_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_velocity_correction_bounds(int i, MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_velocity_correction_bounds__SWIG_0(swigCPtr, this, i, MocoBounds.getCPtr(value), value);
  }

  public int append_velocity_correction_bounds(MocoBounds value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_velocity_correction_bounds(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  public void constructProperty_velocity_correction_bounds(MocoBounds initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_velocity_correction_bounds(swigCPtr, this, MocoBounds.getCPtr(initValue), initValue);
  }

  public MocoBounds get_velocity_correction_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_velocity_correction_bounds__SWIG_1(swigCPtr, this), false);
  }

  public MocoBounds upd_velocity_correction_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_velocity_correction_bounds__SWIG_1(swigCPtr, this), false);
  }

  public void set_velocity_correction_bounds(MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_velocity_correction_bounds__SWIG_1(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  public void copyProperty_implicit_multibody_acceleration_bounds(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_implicit_multibody_acceleration_bounds(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public MocoBounds get_implicit_multibody_acceleration_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_implicit_multibody_acceleration_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoBounds upd_implicit_multibody_acceleration_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_implicit_multibody_acceleration_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_implicit_multibody_acceleration_bounds(int i, MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_implicit_multibody_acceleration_bounds__SWIG_0(swigCPtr, this, i, MocoBounds.getCPtr(value), value);
  }

  public int append_implicit_multibody_acceleration_bounds(MocoBounds value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_implicit_multibody_acceleration_bounds(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  public void constructProperty_implicit_multibody_acceleration_bounds(MocoBounds initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_implicit_multibody_acceleration_bounds(swigCPtr, this, MocoBounds.getCPtr(initValue), initValue);
  }

  public MocoBounds get_implicit_multibody_acceleration_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_implicit_multibody_acceleration_bounds__SWIG_1(swigCPtr, this), false);
  }

  public MocoBounds upd_implicit_multibody_acceleration_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_implicit_multibody_acceleration_bounds__SWIG_1(swigCPtr, this), false);
  }

  public void set_implicit_multibody_acceleration_bounds(MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_implicit_multibody_acceleration_bounds__SWIG_1(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  public void copyProperty_implicit_auxiliary_derivative_bounds(MocoDirectCollocationSolver source) {
    opensimMocoJNI.MocoDirectCollocationSolver_copyProperty_implicit_auxiliary_derivative_bounds(swigCPtr, this, MocoDirectCollocationSolver.getCPtr(source), source);
  }

  public MocoBounds get_implicit_auxiliary_derivative_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_implicit_auxiliary_derivative_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoBounds upd_implicit_auxiliary_derivative_bounds(int i) {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_implicit_auxiliary_derivative_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_implicit_auxiliary_derivative_bounds(int i, MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_implicit_auxiliary_derivative_bounds__SWIG_0(swigCPtr, this, i, MocoBounds.getCPtr(value), value);
  }

  public int append_implicit_auxiliary_derivative_bounds(MocoBounds value) {
    return opensimMocoJNI.MocoDirectCollocationSolver_append_implicit_auxiliary_derivative_bounds(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  public void constructProperty_implicit_auxiliary_derivative_bounds(MocoBounds initValue) {
    opensimMocoJNI.MocoDirectCollocationSolver_constructProperty_implicit_auxiliary_derivative_bounds(swigCPtr, this, MocoBounds.getCPtr(initValue), initValue);
  }

  public MocoBounds get_implicit_auxiliary_derivative_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_get_implicit_auxiliary_derivative_bounds__SWIG_1(swigCPtr, this), false);
  }

  public MocoBounds upd_implicit_auxiliary_derivative_bounds() {
    return new MocoBounds(opensimMocoJNI.MocoDirectCollocationSolver_upd_implicit_auxiliary_derivative_bounds__SWIG_1(swigCPtr, this), false);
  }

  public void set_implicit_auxiliary_derivative_bounds(MocoBounds value) {
    opensimMocoJNI.MocoDirectCollocationSolver_set_implicit_auxiliary_derivative_bounds__SWIG_1(swigCPtr, this, MocoBounds.getCPtr(value), value);
  }

  /**
   *  %Set the mesh to a user-defined list of mesh points to sample. This<br>
   * takes precedence over the uniform mesh that would be specified with<br>
   * num_mesh_intervals. The user-defined mesh must start with 0, be strictly<br>
   * increasing (no duplicate entries), and end with 1. 
   */
  public void setMesh(StdVectorDouble mesh) {
    opensimMocoJNI.MocoDirectCollocationSolver_setMesh(swigCPtr, this, StdVectorDouble.getCPtr(mesh), mesh);
  }

}
