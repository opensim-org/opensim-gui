/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A Force that exerts a generalized force based on spring-like<br>
 * characteristics (stiffness and viscosity).  <br>
 * <br>
 * @author Frank C. Anderson, Ajay Seth<br>
 * @version 2.0
 */
public class SpringGeneralizedForce extends Force {
  private transient long swigCPtr;

  public SpringGeneralizedForce(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SpringGeneralizedForce obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_SpringGeneralizedForce(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static SpringGeneralizedForce safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new SpringGeneralizedForce(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new SpringGeneralizedForce(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_coordinate(SpringGeneralizedForce source) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_copyProperty_coordinate(swigCPtr, this, SpringGeneralizedForce.getCPtr(source), source);
  }

  public String get_coordinate(int i) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_coordinate__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_coordinate(int i) {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_coordinate__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_coordinate(int i, String value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_coordinate__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_coordinate(String value) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_append_coordinate(swigCPtr, this, value);
  }

  public void constructProperty_coordinate() {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_constructProperty_coordinate__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_coordinate(String initValue) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_constructProperty_coordinate__SWIG_1(swigCPtr, this, initValue);
  }

  public String get_coordinate() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_coordinate__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_coordinate() {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_coordinate__SWIG_1(swigCPtr, this), false);
  }

  public void set_coordinate(String value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_coordinate__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_stiffness(SpringGeneralizedForce source) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_copyProperty_stiffness(swigCPtr, this, SpringGeneralizedForce.getCPtr(source), source);
  }

  public double get_stiffness(int i) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_stiffness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_stiffness(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_stiffness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_stiffness(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_stiffness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_stiffness(double value) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_append_stiffness(swigCPtr, this, value);
  }

  public void constructProperty_stiffness(double initValue) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_constructProperty_stiffness(swigCPtr, this, initValue);
  }

  public double get_stiffness() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_stiffness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_stiffness() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_stiffness__SWIG_1(swigCPtr, this), false);
  }

  public void set_stiffness(double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_stiffness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_rest_length(SpringGeneralizedForce source) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_copyProperty_rest_length(swigCPtr, this, SpringGeneralizedForce.getCPtr(source), source);
  }

  public double get_rest_length(int i) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_rest_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_rest_length(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_rest_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_rest_length(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_rest_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_rest_length(double value) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_append_rest_length(swigCPtr, this, value);
  }

  public void constructProperty_rest_length(double initValue) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_constructProperty_rest_length(swigCPtr, this, initValue);
  }

  public double get_rest_length() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_rest_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_rest_length() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_rest_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_rest_length(double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_rest_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_viscosity(SpringGeneralizedForce source) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_copyProperty_viscosity(swigCPtr, this, SpringGeneralizedForce.getCPtr(source), source);
  }

  public double get_viscosity(int i) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_viscosity__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_viscosity(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_viscosity__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_viscosity(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_viscosity__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_viscosity(double value) {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_append_viscosity(swigCPtr, this, value);
  }

  public void constructProperty_viscosity(double initValue) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_constructProperty_viscosity(swigCPtr, this, initValue);
  }

  public double get_viscosity() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_get_viscosity__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_viscosity() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_upd_viscosity__SWIG_1(swigCPtr, this), false);
  }

  public void set_viscosity(double value) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_set_viscosity__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  This serves as default constructor or you can specify the coordinate<br>
   *     name. A name of "" is treated as though unspecified. *
   */
  public SpringGeneralizedForce(String coordinateName) {
    this(opensimActuatorsAnalysesToolsJNI.new_SpringGeneralizedForce__SWIG_0(coordinateName), true);
  }

  /**
   *  This serves as default constructor or you can specify the coordinate<br>
   *     name. A name of "" is treated as though unspecified. *
   */
  public SpringGeneralizedForce() {
    this(opensimActuatorsAnalysesToolsJNI.new_SpringGeneralizedForce__SWIG_1(), true);
  }

  public void setStiffness(double aStiffness) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_setStiffness(swigCPtr, this, aStiffness);
  }

  public double getStiffness() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getStiffness(swigCPtr, this);
  }

  public void setRestLength(double aRestLength) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_setRestLength(swigCPtr, this, aRestLength);
  }

  public double getRestLength() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getRestLength(swigCPtr, this);
  }

  public void setViscosity(double aViscosity) {
    opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_setViscosity(swigCPtr, this, aViscosity);
  }

  public double getViscosity() {
    return opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getViscosity(swigCPtr, this);
  }

  /**
   * Methods to query a Force for the value actually applied during simulation<br>
   * The names of the quantities (column labels) is returned by this first function<br>
   * getRecordLabels()
   */
  public ArrayStr getRecordLabels() {
    return new ArrayStr(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getRecordLabels(swigCPtr, this), true);
  }

  /**
   * Given SimTK::State object extract all the values necessary to report forces, application location<br>
   * frame, etc. used in conjunction with getRecordLabels and should return same size Array
   */
  public ArrayDouble getRecordValues(State state) {
    return new ArrayDouble(opensimActuatorsAnalysesToolsJNI.SpringGeneralizedForce_getRecordValues(swigCPtr, this, State.getCPtr(state), state), true);
  }

}
