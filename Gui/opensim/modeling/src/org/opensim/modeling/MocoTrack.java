/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * <br>
 * This tool constructs problems in which state and/or marker trajectory data<br>
 * are tracked while solving for model kinematics and actuator controls.<br>
 * "Tracking" refers to cost terms that minimize the error between provided<br>
 * reference data and the associated model quantities (joint angles, joint<br>
 * velocities, marker positions, etc).<br>
 * <br>
 * State and marker tracking<br>
 * -------------------------<br>
 * State reference data (joint angles and velocities), marker reference data<br>
 * (x/y/z marker motion capture trajectories), or both may be provided via the<br>
 * `states_reference` and `markers_reference` properties. For each set of<br>
 * reference data provided, a tracking cost term is added to the internal<br>
 * MocoProblem.<br>
 * <br>
 * setMarkersReference() only accepts a scalar TimeSeriesTable (either<br>
 * directly or via a TableProcessor) containing x/y/z marker position values.<br>
 * A TimeSeriesTableVec3 of markers is not accepted, but you may use the<br>
 * flatten() method to convert to a scalar TimeSeriesTable:<br>
 * <br>
 * {@code 
MocoTrack track;

TimeSeriesTableVec3 markers = TRCFileAdapter("marker_trajectories.trc");
TimeSeriesTable markersFlat(markers.flatten());
track.setMarkersReference(TableProcessor(markersFlat));
}<br>
 * <br>
 * If you wish to set the markers reference directly from a TRC file, use<br>
 * setMarkersReferenceFromTRC().<br>
 * <br>
 * The `states_global_tracking_weight` and `markers_global_tracking_weight`<br>
 * properties apply a cost function weight to all tracking error associated<br>
 * provided reference data. The `states_weight_set` and `markers_weight_set`<br>
 * properties give you finer control over the tracking costs, letting you set<br>
 * weights for individual reference data tracking errors.<br>
 * <br>
 * Control effort minimization<br>
 * ---------------------------<br>
 * By default, a MocoControlCost term is added to the underlying problem with<br>
 * a weight of 0.001. Control effort terms often help smooth the problem<br>
 * solution controls, and minimally affect the states tracking solution with a<br>
 * sufficiently low weight. Use the `minimize_control_effort` and<br>
 * `control_effort_weight` properties to customize these settings.<br>
 * <br>
 * Problem configuration options<br>
 * -----------------------------<br>
 * A time range that is compatible with all reference data may be provided.<br>
 * If no time range is set, the widest time range that is compatible with all<br>
 * reference data will be used.<br>
 * <br>
 * If you would like to track joint velocities but only have joint angles in<br>
 * your states reference, enable the `track_reference_position_derivatives`<br>
 * property. When enabled, the provided position-level states reference data<br>
 * will be splined in order to compute derivatives. If some velocity-level<br>
 * information exists in the reference, this option will fill in the missing<br>
 * data with position derivatives and leave the existing velocity data intact.<br>
 * This is not enabled by default, but is recommended for improving tracking<br>
 * performance and reducing convergence times.<br>
 * <br>
 * Since the data in the provided references may be altered by TableProcessor<br>
 * operations or appended to by `track_reference_position_derivatives`, the<br>
 * tracked data is printed to file in addition to the problem solution. The<br>
 * tracked data files have the following format<br>
 * "<tool_name>_tracked_<data_type>.sto" (e.g. "MocoTool_tracked_states.sto").<br>
 * <br>
 * Default solver settings<br>
 * -----------------------<br>
 * - solver: MocoCasADiSolver<br>
 * - multibody_dynamics_mode: explicit<br>
 * - transcription_scheme: Hermite-Simpson<br>
 * - optim_convergence_tolerance: 1e-2<br>
 * - optim_constraint_tolerance: 1e-2<br>
 * - optim_sparsity_detection: random<br>
 * - optim_finite_difference_scheme: 'forward'<br>
 * <br>
 * If you would like to use settings other than these defaults, see<br>
 * "Customizing a tracking problem" below.<br>
 * <br>
 * Basic example<br>
 * -------------<br>
 * Construct a tracking problem by setting property values and calling solve():<br>
 * <br>
 * {@code 
MocoTrack track;
track.setName("states_tracking_with_reserves");
track.setModel(ModelProcessor("model_file.osim") |
               ModOpAddExternalLoads("external_loads.xml") |
               ModOpAddReserves());
track.setStatesReference("states_reference_file.sto");
track.set_track_reference_position_derivatives(true);
track.set_control_effort_weight(0.1);
MocoSolution solution = track.solve();
}<br>
 * <br>
 * Customizing a tracking problem<br>
 * ------------------------------<br>
 * If you wish to further customize the underlying MocoProblem before solving,<br>
 * instead of calling solve(), call initialize() which returns a pre-configured<br>
 * MocoStudy object:<br>
 * <br>
 * {@code 
MocoTrack track;
track.setName("track_and_minimize_hip_compressive_force");
track.setModel(ModelProcessor("model_file.xml") |
               ModOpAddExternalLoads());
track.setStatesReference("states_reference_file.sto");

MocoStudy study = track.initialize();

auto& problem = study.updProblem();
auto* hipForceCost = problem.addGoal<MocoJointReactionCost>("hip_force");
hipForceCost->set_weight(10);
hipForceCost->setJointPath("/jointset/hip_r");
hipForceCost->setReactionMeasures({"force-y"});

auto& solver = study.updSolver<MocoCasADiSolver>();
solver.set_multibody_dynamics_mode("implicit");

MocoSolution solution = study.solve();
}<br>
 * <br>
 * 
 */
public class MocoTrack extends MocoTool {
  private transient long swigCPtr;

  public MocoTrack(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoTrack_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoTrack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoTrack(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoTrack safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoTrack_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoTrack(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoTrack_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoTrack_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoTrack_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoTrack(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoTrack_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_states_reference(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_reference(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public TableProcessor get_states_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_states_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public TableProcessor upd_states_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_states_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_reference(int i, TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_states_reference__SWIG_0(swigCPtr, this, i, TableProcessor.getCPtr(value), value);
  }

  public int append_states_reference(TableProcessor value) {
    return opensimMocoJNI.MocoTrack_append_states_reference(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void constructProperty_states_reference(TableProcessor initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_reference(swigCPtr, this, TableProcessor.getCPtr(initValue), initValue);
  }

  public TableProcessor get_states_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_states_reference__SWIG_1(swigCPtr, this), false);
  }

  public TableProcessor upd_states_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_states_reference__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_reference(TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_states_reference__SWIG_1(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void copyProperty_states_global_tracking_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_global_tracking_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_states_global_tracking_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_states_global_tracking_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_states_global_tracking_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_states_global_tracking_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_global_tracking_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_states_global_tracking_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_states_global_tracking_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_states_global_tracking_weight(swigCPtr, this, value);
  }

  public void constructProperty_states_global_tracking_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_global_tracking_weight(swigCPtr, this, initValue);
  }

  public double get_states_global_tracking_weight() {
    return opensimMocoJNI.MocoTrack_get_states_global_tracking_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_states_global_tracking_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_states_global_tracking_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_global_tracking_weight(double value) {
    opensimMocoJNI.MocoTrack_set_states_global_tracking_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_states_weight_set(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_weight_set(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public MocoWeightSet get_states_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_states_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoWeightSet upd_states_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_states_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_weight_set(int i, MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_states_weight_set__SWIG_0(swigCPtr, this, i, MocoWeightSet.getCPtr(value), value);
  }

  public int append_states_weight_set(MocoWeightSet value) {
    return opensimMocoJNI.MocoTrack_append_states_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void constructProperty_states_weight_set(MocoWeightSet initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(initValue), initValue);
  }

  public MocoWeightSet get_states_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_states_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public MocoWeightSet upd_states_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_states_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_weight_set(MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_states_weight_set__SWIG_1(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void copyProperty_scale_state_weights_with_range(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_scale_state_weights_with_range(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_scale_state_weights_with_range(int i) {
    return opensimMocoJNI.MocoTrack_get_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_scale_state_weights_with_range(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_scale_state_weights_with_range(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_scale_state_weights_with_range(boolean value) {
    return opensimMocoJNI.MocoTrack_append_scale_state_weights_with_range(swigCPtr, this, value);
  }

  public void constructProperty_scale_state_weights_with_range(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_scale_state_weights_with_range(swigCPtr, this, initValue);
  }

  public boolean get_scale_state_weights_with_range() {
    return opensimMocoJNI.MocoTrack_get_scale_state_weights_with_range__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_scale_state_weights_with_range() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_scale_state_weights_with_range__SWIG_1(swigCPtr, this), false);
  }

  public void set_scale_state_weights_with_range(boolean value) {
    opensimMocoJNI.MocoTrack_set_scale_state_weights_with_range__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_track_reference_position_derivatives(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_track_reference_position_derivatives(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_track_reference_position_derivatives(int i) {
    return opensimMocoJNI.MocoTrack_get_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_track_reference_position_derivatives(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_track_reference_position_derivatives(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_track_reference_position_derivatives(boolean value) {
    return opensimMocoJNI.MocoTrack_append_track_reference_position_derivatives(swigCPtr, this, value);
  }

  public void constructProperty_track_reference_position_derivatives(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_track_reference_position_derivatives(swigCPtr, this, initValue);
  }

  public boolean get_track_reference_position_derivatives() {
    return opensimMocoJNI.MocoTrack_get_track_reference_position_derivatives__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_track_reference_position_derivatives() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_track_reference_position_derivatives__SWIG_1(swigCPtr, this), false);
  }

  public void set_track_reference_position_derivatives(boolean value) {
    opensimMocoJNI.MocoTrack_set_track_reference_position_derivatives__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_markers_reference(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_reference(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public TableProcessor get_markers_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_markers_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public TableProcessor upd_markers_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_markers_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_reference(int i, TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_markers_reference__SWIG_0(swigCPtr, this, i, TableProcessor.getCPtr(value), value);
  }

  public int append_markers_reference(TableProcessor value) {
    return opensimMocoJNI.MocoTrack_append_markers_reference(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void constructProperty_markers_reference(TableProcessor initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_reference(swigCPtr, this, TableProcessor.getCPtr(initValue), initValue);
  }

  public TableProcessor get_markers_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_markers_reference__SWIG_1(swigCPtr, this), false);
  }

  public TableProcessor upd_markers_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_markers_reference__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_reference(TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_markers_reference__SWIG_1(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void copyProperty_markers_global_tracking_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_global_tracking_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_markers_global_tracking_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_markers_global_tracking_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_global_tracking_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_markers_global_tracking_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_markers_global_tracking_weight(swigCPtr, this, value);
  }

  public void constructProperty_markers_global_tracking_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_global_tracking_weight(swigCPtr, this, initValue);
  }

  public double get_markers_global_tracking_weight() {
    return opensimMocoJNI.MocoTrack_get_markers_global_tracking_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_markers_global_tracking_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_markers_global_tracking_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_global_tracking_weight(double value) {
    opensimMocoJNI.MocoTrack_set_markers_global_tracking_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_markers_weight_set(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_weight_set(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public MocoWeightSet get_markers_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_markers_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoWeightSet upd_markers_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_markers_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_weight_set(int i, MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_markers_weight_set__SWIG_0(swigCPtr, this, i, MocoWeightSet.getCPtr(value), value);
  }

  public int append_markers_weight_set(MocoWeightSet value) {
    return opensimMocoJNI.MocoTrack_append_markers_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void constructProperty_markers_weight_set(MocoWeightSet initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(initValue), initValue);
  }

  public MocoWeightSet get_markers_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_markers_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public MocoWeightSet upd_markers_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_markers_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_weight_set(MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_markers_weight_set__SWIG_1(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void copyProperty_allow_unused_references(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_allow_unused_references(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_allow_unused_references(int i) {
    return opensimMocoJNI.MocoTrack_get_allow_unused_references__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_allow_unused_references(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_allow_unused_references__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_allow_unused_references(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_allow_unused_references__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_allow_unused_references(boolean value) {
    return opensimMocoJNI.MocoTrack_append_allow_unused_references(swigCPtr, this, value);
  }

  public void constructProperty_allow_unused_references(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_allow_unused_references(swigCPtr, this, initValue);
  }

  public boolean get_allow_unused_references() {
    return opensimMocoJNI.MocoTrack_get_allow_unused_references__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_allow_unused_references() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_allow_unused_references__SWIG_1(swigCPtr, this), false);
  }

  public void set_allow_unused_references(boolean value) {
    opensimMocoJNI.MocoTrack_set_allow_unused_references__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_guess_file(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_guess_file(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public String get_guess_file(int i) {
    return opensimMocoJNI.MocoTrack_get_guess_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_guess_file(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoTrack_upd_guess_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_guess_file(int i, String value) {
    opensimMocoJNI.MocoTrack_set_guess_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_guess_file(String value) {
    return opensimMocoJNI.MocoTrack_append_guess_file(swigCPtr, this, value);
  }

  public void constructProperty_guess_file(String initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_guess_file(swigCPtr, this, initValue);
  }

  public String get_guess_file() {
    return opensimMocoJNI.MocoTrack_get_guess_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_guess_file() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoTrack_upd_guess_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_guess_file(String value) {
    opensimMocoJNI.MocoTrack_set_guess_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_apply_tracked_states_to_guess(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_apply_tracked_states_to_guess(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_apply_tracked_states_to_guess(int i) {
    return opensimMocoJNI.MocoTrack_get_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_apply_tracked_states_to_guess(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_apply_tracked_states_to_guess(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_apply_tracked_states_to_guess(boolean value) {
    return opensimMocoJNI.MocoTrack_append_apply_tracked_states_to_guess(swigCPtr, this, value);
  }

  public void constructProperty_apply_tracked_states_to_guess(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_apply_tracked_states_to_guess(swigCPtr, this, initValue);
  }

  public boolean get_apply_tracked_states_to_guess() {
    return opensimMocoJNI.MocoTrack_get_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_apply_tracked_states_to_guess() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this), false);
  }

  public void set_apply_tracked_states_to_guess(boolean value) {
    opensimMocoJNI.MocoTrack_set_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimize_control_effort(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_minimize_control_effort(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_minimize_control_effort(int i) {
    return opensimMocoJNI.MocoTrack_get_minimize_control_effort__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_minimize_control_effort(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_minimize_control_effort__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimize_control_effort(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_minimize_control_effort__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimize_control_effort(boolean value) {
    return opensimMocoJNI.MocoTrack_append_minimize_control_effort(swigCPtr, this, value);
  }

  public void constructProperty_minimize_control_effort(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_minimize_control_effort(swigCPtr, this, initValue);
  }

  public boolean get_minimize_control_effort() {
    return opensimMocoJNI.MocoTrack_get_minimize_control_effort__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_minimize_control_effort() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_minimize_control_effort__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimize_control_effort(boolean value) {
    opensimMocoJNI.MocoTrack_set_minimize_control_effort__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_control_effort_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_control_effort_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_control_effort_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_control_effort_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_control_effort_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_control_effort_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_control_effort_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_control_effort_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_control_effort_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_control_effort_weight(swigCPtr, this, value);
  }

  public void constructProperty_control_effort_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_control_effort_weight(swigCPtr, this, initValue);
  }

  public double get_control_effort_weight() {
    return opensimMocoJNI.MocoTrack_get_control_effort_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_control_effort_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_control_effort_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_control_effort_weight(double value) {
    opensimMocoJNI.MocoTrack_set_control_effort_weight__SWIG_1(swigCPtr, this, value);
  }

  public MocoTrack() {
    this(opensimMocoJNI.new_MocoTrack(), true);
  }

  /**
   *  Set the states reference TableProcessor.<br>
   *  Note: Overrides any existing TableProcessor for 'states_reference'.
   */
  public void setStatesReference(TableProcessor states) {
    opensimMocoJNI.MocoTrack_setStatesReference(swigCPtr, this, TableProcessor.getCPtr(states), states);
  }

  /**
   *  Set the markers reference TableProcessor.<br>
   *  Note: Overrides any existing TableProcessor for 'markers_reference'.
   */
  public void setMarkersReference(TableProcessor markers) {
    opensimMocoJNI.MocoTrack_setMarkersReference(swigCPtr, this, TableProcessor.getCPtr(markers), markers);
  }

  /**
   *  Set the markers reference directly from a TRC file. By default, the<br>
   *  marker data is low-pass filtered with a 6 Hz cutoff frequency, but you<br>
   *  may set any frequency using the optional argument.<br>
   *  Note: Overrides any existing TableProcessor for 'markers_reference'.
   */
  public void setMarkersReferenceFromTRC(String filename, double lowpassFilterFreq) {
    opensimMocoJNI.MocoTrack_setMarkersReferenceFromTRC__SWIG_0(swigCPtr, this, filename, lowpassFilterFreq);
  }

  /**
   *  Set the markers reference directly from a TRC file. By default, the<br>
   *  marker data is low-pass filtered with a 6 Hz cutoff frequency, but you<br>
   *  may set any frequency using the optional argument.<br>
   *  Note: Overrides any existing TableProcessor for 'markers_reference'.
   */
  public void setMarkersReferenceFromTRC(String filename) {
    opensimMocoJNI.MocoTrack_setMarkersReferenceFromTRC__SWIG_1(swigCPtr, this, filename);
  }

  public MocoStudy initialize() {
    return new MocoStudy(opensimMocoJNI.MocoTrack_initialize(swigCPtr, this), true);
  }

  /**
   *  Solve the MocoTrack problem and obtain the solution.
   */
  public MocoSolution solve() {
    return new MocoSolution(opensimMocoJNI.MocoTrack_solve(swigCPtr, this), true);
  }

  /**
   *  Solve the MocoTrack problem, visualize the solution, then obtain the<br>
   *  solution.
   */
  public MocoSolution solveAndVisualize() {
    return new MocoSolution(opensimMocoJNI.MocoTrack_solveAndVisualize(swigCPtr, this), true);
  }

}
