/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MocoTrack extends MocoTool {
  private transient long swigCPtr;

  public MocoTrack(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoTrack_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoTrack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoTrack(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoTrack safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoTrack_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoTrack(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoTrack_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoTrack_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoTrack_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoTrack(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoTrack_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_states_reference(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_reference(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public TableProcessor get_states_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_states_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public TableProcessor upd_states_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_states_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_reference(int i, TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_states_reference__SWIG_0(swigCPtr, this, i, TableProcessor.getCPtr(value), value);
  }

  public int append_states_reference(TableProcessor value) {
    return opensimMocoJNI.MocoTrack_append_states_reference(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void constructProperty_states_reference(TableProcessor initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_reference(swigCPtr, this, TableProcessor.getCPtr(initValue), initValue);
  }

  public TableProcessor get_states_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_states_reference__SWIG_1(swigCPtr, this), false);
  }

  public TableProcessor upd_states_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_states_reference__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_reference(TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_states_reference__SWIG_1(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void copyProperty_states_global_tracking_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_global_tracking_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_states_global_tracking_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_states_global_tracking_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_states_global_tracking_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_states_global_tracking_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_global_tracking_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_states_global_tracking_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_states_global_tracking_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_states_global_tracking_weight(swigCPtr, this, value);
  }

  public void constructProperty_states_global_tracking_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_global_tracking_weight(swigCPtr, this, initValue);
  }

  public double get_states_global_tracking_weight() {
    return opensimMocoJNI.MocoTrack_get_states_global_tracking_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_states_global_tracking_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_states_global_tracking_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_global_tracking_weight(double value) {
    opensimMocoJNI.MocoTrack_set_states_global_tracking_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_states_weight_set(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_states_weight_set(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public MocoWeightSet get_states_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_states_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoWeightSet upd_states_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_states_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_states_weight_set(int i, MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_states_weight_set__SWIG_0(swigCPtr, this, i, MocoWeightSet.getCPtr(value), value);
  }

  public int append_states_weight_set(MocoWeightSet value) {
    return opensimMocoJNI.MocoTrack_append_states_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void constructProperty_states_weight_set(MocoWeightSet initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_states_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(initValue), initValue);
  }

  public MocoWeightSet get_states_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_states_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public MocoWeightSet upd_states_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_states_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public void set_states_weight_set(MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_states_weight_set__SWIG_1(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void copyProperty_scale_state_weights_with_range(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_scale_state_weights_with_range(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_scale_state_weights_with_range(int i) {
    return opensimMocoJNI.MocoTrack_get_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_scale_state_weights_with_range(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_scale_state_weights_with_range(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_scale_state_weights_with_range__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_scale_state_weights_with_range(boolean value) {
    return opensimMocoJNI.MocoTrack_append_scale_state_weights_with_range(swigCPtr, this, value);
  }

  public void constructProperty_scale_state_weights_with_range(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_scale_state_weights_with_range(swigCPtr, this, initValue);
  }

  public boolean get_scale_state_weights_with_range() {
    return opensimMocoJNI.MocoTrack_get_scale_state_weights_with_range__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_scale_state_weights_with_range() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_scale_state_weights_with_range__SWIG_1(swigCPtr, this), false);
  }

  public void set_scale_state_weights_with_range(boolean value) {
    opensimMocoJNI.MocoTrack_set_scale_state_weights_with_range__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_track_reference_position_derivatives(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_track_reference_position_derivatives(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_track_reference_position_derivatives(int i) {
    return opensimMocoJNI.MocoTrack_get_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_track_reference_position_derivatives(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_track_reference_position_derivatives(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_track_reference_position_derivatives__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_track_reference_position_derivatives(boolean value) {
    return opensimMocoJNI.MocoTrack_append_track_reference_position_derivatives(swigCPtr, this, value);
  }

  public void constructProperty_track_reference_position_derivatives(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_track_reference_position_derivatives(swigCPtr, this, initValue);
  }

  public boolean get_track_reference_position_derivatives() {
    return opensimMocoJNI.MocoTrack_get_track_reference_position_derivatives__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_track_reference_position_derivatives() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_track_reference_position_derivatives__SWIG_1(swigCPtr, this), false);
  }

  public void set_track_reference_position_derivatives(boolean value) {
    opensimMocoJNI.MocoTrack_set_track_reference_position_derivatives__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_markers_reference(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_reference(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public TableProcessor get_markers_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_markers_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public TableProcessor upd_markers_reference(int i) {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_markers_reference__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_reference(int i, TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_markers_reference__SWIG_0(swigCPtr, this, i, TableProcessor.getCPtr(value), value);
  }

  public int append_markers_reference(TableProcessor value) {
    return opensimMocoJNI.MocoTrack_append_markers_reference(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void constructProperty_markers_reference(TableProcessor initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_reference(swigCPtr, this, TableProcessor.getCPtr(initValue), initValue);
  }

  public TableProcessor get_markers_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_get_markers_reference__SWIG_1(swigCPtr, this), false);
  }

  public TableProcessor upd_markers_reference() {
    return new TableProcessor(opensimMocoJNI.MocoTrack_upd_markers_reference__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_reference(TableProcessor value) {
    opensimMocoJNI.MocoTrack_set_markers_reference__SWIG_1(swigCPtr, this, TableProcessor.getCPtr(value), value);
  }

  public void copyProperty_markers_global_tracking_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_global_tracking_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_markers_global_tracking_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_markers_global_tracking_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_global_tracking_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_markers_global_tracking_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_markers_global_tracking_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_markers_global_tracking_weight(swigCPtr, this, value);
  }

  public void constructProperty_markers_global_tracking_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_global_tracking_weight(swigCPtr, this, initValue);
  }

  public double get_markers_global_tracking_weight() {
    return opensimMocoJNI.MocoTrack_get_markers_global_tracking_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_markers_global_tracking_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_markers_global_tracking_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_global_tracking_weight(double value) {
    opensimMocoJNI.MocoTrack_set_markers_global_tracking_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_markers_weight_set(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_markers_weight_set(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public MocoWeightSet get_markers_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_markers_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public MocoWeightSet upd_markers_weight_set(int i) {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_markers_weight_set__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_markers_weight_set(int i, MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_markers_weight_set__SWIG_0(swigCPtr, this, i, MocoWeightSet.getCPtr(value), value);
  }

  public int append_markers_weight_set(MocoWeightSet value) {
    return opensimMocoJNI.MocoTrack_append_markers_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void constructProperty_markers_weight_set(MocoWeightSet initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_markers_weight_set(swigCPtr, this, MocoWeightSet.getCPtr(initValue), initValue);
  }

  public MocoWeightSet get_markers_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_get_markers_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public MocoWeightSet upd_markers_weight_set() {
    return new MocoWeightSet(opensimMocoJNI.MocoTrack_upd_markers_weight_set__SWIG_1(swigCPtr, this), false);
  }

  public void set_markers_weight_set(MocoWeightSet value) {
    opensimMocoJNI.MocoTrack_set_markers_weight_set__SWIG_1(swigCPtr, this, MocoWeightSet.getCPtr(value), value);
  }

  public void copyProperty_allow_unused_references(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_allow_unused_references(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_allow_unused_references(int i) {
    return opensimMocoJNI.MocoTrack_get_allow_unused_references__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_allow_unused_references(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_allow_unused_references__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_allow_unused_references(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_allow_unused_references__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_allow_unused_references(boolean value) {
    return opensimMocoJNI.MocoTrack_append_allow_unused_references(swigCPtr, this, value);
  }

  public void constructProperty_allow_unused_references(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_allow_unused_references(swigCPtr, this, initValue);
  }

  public boolean get_allow_unused_references() {
    return opensimMocoJNI.MocoTrack_get_allow_unused_references__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_allow_unused_references() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_allow_unused_references__SWIG_1(swigCPtr, this), false);
  }

  public void set_allow_unused_references(boolean value) {
    opensimMocoJNI.MocoTrack_set_allow_unused_references__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_guess_file(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_guess_file(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public String get_guess_file(int i) {
    return opensimMocoJNI.MocoTrack_get_guess_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_guess_file(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoTrack_upd_guess_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_guess_file(int i, String value) {
    opensimMocoJNI.MocoTrack_set_guess_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_guess_file(String value) {
    return opensimMocoJNI.MocoTrack_append_guess_file(swigCPtr, this, value);
  }

  public void constructProperty_guess_file(String initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_guess_file(swigCPtr, this, initValue);
  }

  public String get_guess_file() {
    return opensimMocoJNI.MocoTrack_get_guess_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_guess_file() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoTrack_upd_guess_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_guess_file(String value) {
    opensimMocoJNI.MocoTrack_set_guess_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_apply_tracked_states_to_guess(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_apply_tracked_states_to_guess(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_apply_tracked_states_to_guess(int i) {
    return opensimMocoJNI.MocoTrack_get_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_apply_tracked_states_to_guess(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_apply_tracked_states_to_guess(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_apply_tracked_states_to_guess__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_apply_tracked_states_to_guess(boolean value) {
    return opensimMocoJNI.MocoTrack_append_apply_tracked_states_to_guess(swigCPtr, this, value);
  }

  public void constructProperty_apply_tracked_states_to_guess(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_apply_tracked_states_to_guess(swigCPtr, this, initValue);
  }

  public boolean get_apply_tracked_states_to_guess() {
    return opensimMocoJNI.MocoTrack_get_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_apply_tracked_states_to_guess() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this), false);
  }

  public void set_apply_tracked_states_to_guess(boolean value) {
    opensimMocoJNI.MocoTrack_set_apply_tracked_states_to_guess__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimize_control_effort(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_minimize_control_effort(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public boolean get_minimize_control_effort(int i) {
    return opensimMocoJNI.MocoTrack_get_minimize_control_effort__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_minimize_control_effort(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_minimize_control_effort__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimize_control_effort(int i, boolean value) {
    opensimMocoJNI.MocoTrack_set_minimize_control_effort__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimize_control_effort(boolean value) {
    return opensimMocoJNI.MocoTrack_append_minimize_control_effort(swigCPtr, this, value);
  }

  public void constructProperty_minimize_control_effort(boolean initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_minimize_control_effort(swigCPtr, this, initValue);
  }

  public boolean get_minimize_control_effort() {
    return opensimMocoJNI.MocoTrack_get_minimize_control_effort__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_minimize_control_effort() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoTrack_upd_minimize_control_effort__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimize_control_effort(boolean value) {
    opensimMocoJNI.MocoTrack_set_minimize_control_effort__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_control_effort_weight(MocoTrack source) {
    opensimMocoJNI.MocoTrack_copyProperty_control_effort_weight(swigCPtr, this, MocoTrack.getCPtr(source), source);
  }

  public double get_control_effort_weight(int i) {
    return opensimMocoJNI.MocoTrack_get_control_effort_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_control_effort_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_control_effort_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_control_effort_weight(int i, double value) {
    opensimMocoJNI.MocoTrack_set_control_effort_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_control_effort_weight(double value) {
    return opensimMocoJNI.MocoTrack_append_control_effort_weight(swigCPtr, this, value);
  }

  public void constructProperty_control_effort_weight(double initValue) {
    opensimMocoJNI.MocoTrack_constructProperty_control_effort_weight(swigCPtr, this, initValue);
  }

  public double get_control_effort_weight() {
    return opensimMocoJNI.MocoTrack_get_control_effort_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_control_effort_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoTrack_upd_control_effort_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_control_effort_weight(double value) {
    opensimMocoJNI.MocoTrack_set_control_effort_weight__SWIG_1(swigCPtr, this, value);
  }

  public MocoTrack() {
    this(opensimMocoJNI.new_MocoTrack(), true);
  }

  public void setStatesReference(TableProcessor states) {
    opensimMocoJNI.MocoTrack_setStatesReference(swigCPtr, this, TableProcessor.getCPtr(states), states);
  }

  public void setMarkersReference(TableProcessor markers) {
    opensimMocoJNI.MocoTrack_setMarkersReference(swigCPtr, this, TableProcessor.getCPtr(markers), markers);
  }

  public void setMarkersReferenceFromTRC(String filename, double lowpassFilterFreq) {
    opensimMocoJNI.MocoTrack_setMarkersReferenceFromTRC__SWIG_0(swigCPtr, this, filename, lowpassFilterFreq);
  }

  public void setMarkersReferenceFromTRC(String filename) {
    opensimMocoJNI.MocoTrack_setMarkersReferenceFromTRC__SWIG_1(swigCPtr, this, filename);
  }

  public MocoStudy initialize() {
    return new MocoStudy(opensimMocoJNI.MocoTrack_initialize(swigCPtr, this), true);
  }

  public MocoSolution solve() {
    return new MocoSolution(opensimMocoJNI.MocoTrack_solve(swigCPtr, this), true);
  }

  public MocoSolution solveAndVisualize() {
    return new MocoSolution(opensimMocoJNI.MocoTrack_solveAndVisualize(swigCPtr, this), true);
  }

}
