/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  A scale factor is a scalar value optimized by Moco that can be used to scale<br>
 * a tracked reference quantity in the cost function. Scale factors can be added to<br>
 * a MocoProblem via MocoGoals, and this class enables the use of MocoParameter<br>
 * to optimize scale factors values by providing the 'scale_factor' property.<br>
 * MocoScaleFactor derives from Component, since it must be appended to the model<br>
 * internal to MocoProblem as MocoParameter can only optimize model parameter values<br>
 * contained in properties. Users do not need to interact with this class directly,<br>
 * but rather use the 'addScaleFactor()' interface provided by MocoGoals that<br>
 * support scale factors. How the scale factor is utilized in the cost function is<br>
 * specific to each MocoGoal. 
 */
public class MocoScaleFactor extends Component {
  private transient long swigCPtr;

  public MocoScaleFactor(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoScaleFactor_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoScaleFactor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoScaleFactor(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoScaleFactor safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoScaleFactor_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoScaleFactor(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoScaleFactor_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoScaleFactor_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoScaleFactor_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoScaleFactor(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoScaleFactor_getConcreteClassName(swigCPtr, this);
  }

  public MocoScaleFactor() {
    this(opensimMocoJNI.new_MocoScaleFactor__SWIG_0(), true);
  }

  public MocoScaleFactor(String name, SWIGTYPE_p_MocoBounds arg1) {
    this(opensimMocoJNI.new_MocoScaleFactor__SWIG_1(name, SWIGTYPE_p_MocoBounds.getCPtr(arg1)), true);
  }

  public double getScaleFactor() {
    return opensimMocoJNI.MocoScaleFactor_getScaleFactor(swigCPtr, this);
  }

  public void setScaleFactor(double value) {
    opensimMocoJNI.MocoScaleFactor_setScaleFactor(swigCPtr, this, value);
  }

  /**
   *  Note: the return value is constructed fresh on every call from<br>
   *  the internal property. Avoid repeated calls to this function.
   */
  public SWIGTYPE_p_MocoBounds getBounds() {
    return new SWIGTYPE_p_MocoBounds(opensimMocoJNI.MocoScaleFactor_getBounds(swigCPtr, this), true);
  }

  public void setBounds(SWIGTYPE_p_MocoBounds bounds) {
    opensimMocoJNI.MocoScaleFactor_setBounds(swigCPtr, this, SWIGTYPE_p_MocoBounds.getCPtr(bounds));
  }

}
