/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  A model kinematic constraint to be enforced in the optimal control problem.<br>
 *  Objects of this class can only be instantiated by a MocoPhase, since<br>
 *  information from each constraint in the model is required to ensure that<br>
 *  the correct values are assigned to internal variables during construction.
 */
public class MocoKinematicConstraint {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public MocoKinematicConstraint(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoKinematicConstraint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoKinematicConstraint(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_MocoConstraintInfo getConstraintInfo() {
    return new SWIGTYPE_p_MocoConstraintInfo(opensimMocoJNI.MocoKinematicConstraint_getConstraintInfo(swigCPtr, this), false);
  }

  public void setConstraintInfo(SWIGTYPE_p_MocoConstraintInfo cInfo) {
    opensimMocoJNI.MocoKinematicConstraint_setConstraintInfo(swigCPtr, this, SWIGTYPE_p_MocoConstraintInfo.getCPtr(cInfo));
  }

  /**
   *  Get the SimTK::ConstraintIndex associated with this<br>
   *  MocoKinematicConstraint. Note that a SimTK::ConstraintIndex is different<br>
   *  from what is returned from MocoPathConstraint::getPathConstraintIndex():<br>
   *  the former is an index to a model constraint, whereas the latter is an<br>
   *  index to the path constraint errors vector in a MocoProblem.
   */
  public SWIGTYPE_p_SimTK__ConstraintIndex getSimbodyConstraintIndex() {
    return new SWIGTYPE_p_SimTK__ConstraintIndex(opensimMocoJNI.MocoKinematicConstraint_getSimbodyConstraintIndex(swigCPtr, this), true);
  }

  /**
   *  Get the number of scalar constraint equations at each kinematic level.<br>
   *  Note that the total number of scalar constraint equations enforced is<br>
   * NOT* equal to the sum of each of these values -- you must include the<br>
   *  first and second derivatives of the position equations and the first<br>
   *  derivatives of the velocity equations into that count as well (this<br>
   *  value can be obtained by calling getNumEquations()).
   */
  public int getNumPositionEquations() {
    return opensimMocoJNI.MocoKinematicConstraint_getNumPositionEquations(swigCPtr, this);
  }

  public int getNumVelocityEquations() {
    return opensimMocoJNI.MocoKinematicConstraint_getNumVelocityEquations(swigCPtr, this);
  }

  public int getNumAccelerationEquations() {
    return opensimMocoJNI.MocoKinematicConstraint_getNumAccelerationEquations(swigCPtr, this);
  }

  /**
   *  Get a vector of enums specifying the kinematic level of each scalar<br>
   *  constraint equation in the associated model constraint, as each equation<br>
   *  may need to be treated differently in a solver (e.g. don't add Lagrange<br>
   *  multipliers for derivatives of position or velocity constraint equations<br>
   *  when looping through all scalar<br>
   *  constraint equations).
   */
  public SWIGTYPE_p_std__vectorT_KinematicLevel_t getKinematicLevels() {
    return new SWIGTYPE_p_std__vectorT_KinematicLevel_t(opensimMocoJNI.MocoKinematicConstraint_getKinematicLevels(swigCPtr, this), true);
  }

  /**
   *  Convenience method for calculating constraint errors given a<br>
   *  SimTK::State object. This may not be the most efficient solution for<br>
   *  solvers, but could be useful for a quick implementation or for<br>
   *  debugging model constraints causing issues in an optimal control<br>
   *  problem.<br>
   *  The errors vector passed must be consistent with the<br>
   *  number of scalar constraint equations associated with this<br>
   *  MocoKinematicConstraint.
   */
  public void calcKinematicConstraintErrors(Model model, State state, Vector errors) {
    opensimMocoJNI.MocoKinematicConstraint_calcKinematicConstraintErrors(swigCPtr, this, Model.getCPtr(model), model, State.getCPtr(state), state, Vector.getCPtr(errors), errors);
  }

}
