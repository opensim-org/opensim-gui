/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * IMU is a Model Component that represents a virtual IMU along with its Geometry<br>
 * for visualization. This component reports angular velocity and linear<br>
 * acceleration (with gravitational acceleration subtracted) vectors expressed in<br>
 * the IMU frame to mimic the behavior of real-world IMUs. It also reports<br>
 * orientations between the IMU and ground frame as Quaternions, expressed in the<br>
 * ground frame.<br>
 * <br>
 * TODO: add noise model, limits/saturation, as needed.<br>
 * <br>
 * @author Ayman Habib
 */
public class IMU extends ModelComponent {
  private transient long swigCPtr;

  public IMU(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.IMU_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(IMU obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(IMU obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_IMU(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static IMU safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.IMU_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new IMU(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.IMU_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.IMU_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.IMU_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new IMU(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.IMU_getConcreteClassName(swigCPtr, this);
  }

  public IMU() {
    this(opensimSimulationJNI.new_IMU__SWIG_0(), true);
  }

  public IMU(IMU arg0) {
    this(opensimSimulationJNI.new_IMU__SWIG_1(IMU.getCPtr(arg0), arg0), true);
  }

  public void setPropertyIndex_socket_frame(SWIGTYPE_p_OpenSim__PropertyIndex value) {
    opensimSimulationJNI.IMU_PropertyIndex_socket_frame_set(swigCPtr, this, SWIGTYPE_p_OpenSim__PropertyIndex.getCPtr(value));
  }

  public SWIGTYPE_p_OpenSim__PropertyIndex getPropertyIndex_socket_frame() {
    return new SWIGTYPE_p_OpenSim__PropertyIndex(opensimSimulationJNI.IMU_PropertyIndex_socket_frame_get(swigCPtr, this), true);
  }

  public void connectSocket_frame(OpenSimObject object) {
    opensimSimulationJNI.IMU_connectSocket_frame(swigCPtr, this, OpenSimObject.getCPtr(object), object);
  }

  public void set_has_output_orientation_as_quaternion(boolean value) {
    opensimSimulationJNI.IMU__has_output_orientation_as_quaternion_set(swigCPtr, this, value);
  }

  public boolean get_has_output_orientation_as_quaternion() {
    return opensimSimulationJNI.IMU__has_output_orientation_as_quaternion_get(swigCPtr, this);
  }

  public void set_has_output_gyroscope_signal(boolean value) {
    opensimSimulationJNI.IMU__has_output_gyroscope_signal_set(swigCPtr, this, value);
  }

  public boolean get_has_output_gyroscope_signal() {
    return opensimSimulationJNI.IMU__has_output_gyroscope_signal_get(swigCPtr, this);
  }

  public void set_has_output_accelerometer_signal(boolean value) {
    opensimSimulationJNI.IMU__has_output_accelerometer_signal_set(swigCPtr, this, value);
  }

  public boolean get_has_output_accelerometer_signal() {
    return opensimSimulationJNI.IMU__has_output_accelerometer_signal_get(swigCPtr, this);
  }

  /**
   *  Report the Transform of this IMU in the Ground frame.<br>
   *  Note: Requires realizing the State to SimTK::Stage::Position.
   */
  public Transform calcTransformInGround(State s) {
    return new Transform(opensimSimulationJNI.IMU_calcTransformInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  /**
   *  Report the orientation of this IMU in ground frame expressed as a<br>
   *  Quaternion.<br>
   *  Note: Requires realizing the State to SimTK::Stage::Position.
   */
  public SWIGTYPE_p_SimTK__Quaternion_T_SimTK__Real_t calcOrientationAsQuaternion(State s) {
    return new SWIGTYPE_p_SimTK__Quaternion_T_SimTK__Real_t(opensimSimulationJNI.IMU_calcOrientationAsQuaternion(swigCPtr, this, State.getCPtr(s), s), true);
  }

  /**
   *  Report the angular velocity of this IMU in the frame it is attached to.<br>
   *  Note: Requires realizing the State to SimTK::Stage::Velocity.
   */
  public Vec3 calcGyroscopeSignal(State s) {
    return new Vec3(opensimSimulationJNI.IMU_calcGyroscopeSignal(swigCPtr, this, State.getCPtr(s), s), true);
  }

  /**
   *  Report the linear acceleration of the frame to which this IMU is<br>
   *  attached in the Ground grame. Gravity is subtracted and result expressed<br>
   *  in the frame to which the IMU is attached.<br>
   *  Note: Requires realizing the State to SimTK::Stage::Acceleration.
   */
  public Vec3 calcAccelerometerSignal(State s) {
    return new Vec3(opensimSimulationJNI.IMU_calcAccelerometerSignal(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public void generateDecorations(boolean fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis) {
    opensimSimulationJNI.IMU_generateDecorations(swigCPtr, this, fixed, ModelDisplayHints.getCPtr(hints), hints, State.getCPtr(state), state, ArrayDecorativeGeometry.getCPtr(appendToThis), appendToThis);
  }

}
