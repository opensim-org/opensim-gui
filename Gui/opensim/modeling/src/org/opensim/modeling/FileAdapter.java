/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  FileAdapter is a DataAdapter that reads and writes files with methods<br>
 * read and writeFile respectively. The read method is implemented in the base class and it<br>
 * calls the virtual extendRead method implemented by format specific subclasses. <br>
 * Typically you don't need to call read explicitly if reading one DataTable from file, instead use <br>
 * a constructor of the table from the specific file. e.g. <br>
 * {@code 
TimeSeriesTableVec3 table(filename);
 }
 */
public class FileAdapter extends DataAdapter {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected FileAdapter(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.FileAdapter_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FileAdapter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        opensimCommonJNI.delete_FileAdapter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  Write a collection of tables to the given file. Different file formats<br>
   *     require different number/type of tables. See specific adapter's <br>
   *     documentation to see what is required.                                    
   */
  public static void writeFile(SWIGTYPE_p_std__mapT_std__string_OpenSim__AbstractDataTable_const_p_std__lessT_std__string_t_t tables, String fileName) {
    opensimCommonJNI.FileAdapter_writeFile(SWIGTYPE_p_std__mapT_std__string_OpenSim__AbstractDataTable_const_p_std__lessT_std__string_t_t.getCPtr(tables), fileName);
  }

  /**
   *  Find the extension from a filename.                                   
   */
  public static String findExtension(String filename) {
    return opensimCommonJNI.FileAdapter_findExtension(filename);
  }

  /**
   *  Get the next line from the stream and tokenize/split the line using<br>
   *     the given delimiters.                                                     
   */
  public static StdVectorString getNextLine(SWIGTYPE_p_std__istream stream, String delims) {
    return new StdVectorString(opensimCommonJNI.FileAdapter_getNextLine(SWIGTYPE_p_std__istream.getCPtr(stream), delims), true);
  }

  /**
   *  Tokenize/split a given string using the given delimiters. The delimiters<br>
   *     are each required to be one character and the string is split if/when any <br>
   *     of those characters are found. For example, a delimiter string " \t" <br>
   *     specifies that either a space or a tab can act as the delimiter.          
   */
  public static StdVectorString tokenize(String str, String delims) {
    return new StdVectorString(opensimCommonJNI.FileAdapter_tokenize(str, delims), true);
  }

  /**
   *  Create a concerte FileAdapter based on the extension of the passed in file and return it.<br>
   *      This serves as a Factory of FileAdapters so clients don't need to know specific concrete <br>
   *      subclasses, as long as the generic base class read interface is used 
   */
  public static DataAdapter createAdapterFromExtension(String fileName) {
    long cPtr = opensimCommonJNI.FileAdapter_createAdapterFromExtension(fileName);
    return (cPtr == 0) ? null : new DataAdapter(cPtr, true);
  }

}
