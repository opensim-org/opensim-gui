/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Invoke SimulationUtilities::appendCoordinateValueDerivativesAsSpeeds() on<br>
 *  the table.
 */
public class TabOpAppendCoordinateValueDerivativesAsSpeeds extends TableOperator {
  private transient long swigCPtr;

  public TabOpAppendCoordinateValueDerivativesAsSpeeds(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(TabOpAppendCoordinateValueDerivativesAsSpeeds obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(TabOpAppendCoordinateValueDerivativesAsSpeeds obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_TabOpAppendCoordinateValueDerivativesAsSpeeds(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static TabOpAppendCoordinateValueDerivativesAsSpeeds safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new TabOpAppendCoordinateValueDerivativesAsSpeeds(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new TabOpAppendCoordinateValueDerivativesAsSpeeds(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_overwrite_existing_columns(TabOpAppendCoordinateValueDerivativesAsSpeeds source) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_copyProperty_overwrite_existing_columns(swigCPtr, this, TabOpAppendCoordinateValueDerivativesAsSpeeds.getCPtr(source), source);
  }

  public boolean get_overwrite_existing_columns(int i) {
    return opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_get_overwrite_existing_columns__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_overwrite_existing_columns(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_upd_overwrite_existing_columns__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_overwrite_existing_columns(int i, boolean value) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_set_overwrite_existing_columns__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_overwrite_existing_columns(boolean value) {
    return opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_append_overwrite_existing_columns(swigCPtr, this, value);
  }

  public void constructProperty_overwrite_existing_columns(boolean initValue) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_constructProperty_overwrite_existing_columns(swigCPtr, this, initValue);
  }

  public boolean get_overwrite_existing_columns() {
    return opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_get_overwrite_existing_columns__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_overwrite_existing_columns() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_upd_overwrite_existing_columns__SWIG_1(swigCPtr, this), false);
  }

  public void set_overwrite_existing_columns(boolean value) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_set_overwrite_existing_columns__SWIG_1(swigCPtr, this, value);
  }

  public TabOpAppendCoordinateValueDerivativesAsSpeeds() {
    this(opensimSimulationJNI.new_TabOpAppendCoordinateValueDerivativesAsSpeeds__SWIG_0(), true);
  }

  public TabOpAppendCoordinateValueDerivativesAsSpeeds(boolean overwriteExistingColumns) {
    this(opensimSimulationJNI.new_TabOpAppendCoordinateValueDerivativesAsSpeeds__SWIG_1(overwriteExistingColumns), true);
  }

  public void operate(TimeSeriesTable table, Model model) {
    opensimSimulationJNI.TabOpAppendCoordinateValueDerivativesAsSpeeds_operate(swigCPtr, this, TimeSeriesTable.getCPtr(table), table, Model.getCPtr(model), model);
  }

}
