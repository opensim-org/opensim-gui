/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * %Bhargava2004MuscleMetabolicsProbe is a Probe ModelComponent for computing <br>
 * the net metabolic energy rate of a set of Muscles in the model during a <br>
 * simulation. <br>
 * <br>
 * <h1>%Bhargava2004MuscleMetabolicsProbe Theory</h1><br>
 * <br>
 * The discussion here is based on the following paper:<br>
 * <br>
 * <a href="http://www.ncbi.nlm.nih.gov/pubmed/14672571"><br>
 * Bhargava, L. J., Pandy, M. G. and Anderson, F. C. (2004). <br>
 * A phenomenological model for estimating metabolic energy consumption<br>
 * in muscle contraction. J Biomech 37, 81-8.</a><br>
 * <br>
 * <i>Note that the equations below that describe the particular implementation of <br>
 * %Bhargava2004MuscleMetabolicsProbe may slightly differ from the equations<br>
 * described in the representative publication above. Note also that we define<br>
 * positive muscle velocity to indicate lengthening (eccentric contraction) and<br>
 * negative muscle velocity to indicate shortening (concentric contraction).</i><br>
 * <br>
 * <br>
 * %Muscle metabolic power (or rate of metabolic energy consumption) is equal to the<br>
 * rate at which heat is liberated plus the rate at which work is done:<br>
 * <br>
 * <b>Edot = Bdot + sumOfAllMuscles(Adot + Mdot + Sdot + Wdot).</b><br>
 * <br>
 *       - Bdot is the basal heat rate (W).<br>
 *       - Adot is the activation heat rate (W).<br>
 *       - Mdot is the maintenance heat rate (W).<br>
 *       - Sdot is the shortening heat rate (W).<br>
 *       - Wdot is the mechanical work rate (W).<br>
 * <br>
 * <br>
 * This probe also uses muscle parameters stored in the MetabolicMuscle object for each muscle.<br>
 * The full set of all MetabolicMuscles (MetabolicMuscleSet) is a property of this probe:<br>
 * <br>
 * - m = The mass of the muscle (kg).<br>
 * - r = Ratio of slow twitch fibers in the muscle (between 0 and 1).<br>
 * - Adot_slow = Activation constant for slow twitch fibers (W/kg).<br>
 * - Adot_fast = Activation constant for fast twitch fibers (W/kg).<br>
 * - Mdot_slow = Maintenance constant for slow twitch fibers (W/kg).<br>
 * - Mdot_fast = Maintenance constant for slow twitch fibers (W/kg).<br>
 * <br>
 * <br>
 * <h2><b> BASAL HEAT RATE (W) </b></h2><br>
 * If <i>basal_rate_on</i> is set to true, then Bdot is calculated as follows:<br>
 * <br>
 * <b>Bdot = basal_coefficient * (m_body^basal_exponent)</b><br>
 *     - m_body = mass of the entire model<br>
 *     - basal_coefficient and basal_exponent are defined by their respective properties.<br>
 * <br>
 * <i>Note that this quantity is muscle independent. Rather it is calculated on a whole body level.</i><br>
 * <br>
 * <br>
 * <h2><b> ACTIVATION HEAT RATE (W) </b></h2><br>
 * If <i>activation_rate_on</i> is set to true, then Adot is calculated as follows:<br>
 * <br>
 * <b>Adot = phi * m * [ Adot_slow * r * sin((pi/2)*u) +<br>
 *                       Adot_fast * (1-r) * (1-cos((pi/2)*u)) ]</b><br>
 *     - u = muscle excitation at the current time.<br>
 *     - phi = decay function. Bhargava et al. (2004) use a function to model<br>
 *             the observation that the rate of heat generation is greatest<br>
 *             immediately after the muscle is excited and then decays. We<br>
 *             follow the work of Anderson and Pandy, who set this value to 1.0.<br>
 * <br>
 * <br>
 * <h2><b> MAINTENANCE HEAT RATE (W) </b></h2><br>
 * If <i>maintenance_rate_on</i> is set to true, then Mdot is calculated as follows:<br>
 * <br>
 * <b>Mdot = m * f * [ Mdot_slow * r * sin((pi/2)*u)    +    Mdot_fast * (1-r) * (1-cos((pi/2)*u)) ]</b><br>
 * - u = muscle excitation at the current time.<br>
 * - f is a piecewise linear function that describes the normalized fiber length dependence<br>
 * of the maintenance heat rate (default curve is shown below):<br>
 * <img src=fig_NormalizedFiberLengthDependenceOfMaintenanceHeatRateBhargava2004.png/><br>
 * <br>
 * <br>
 * <h2><b> SHORTENING HEAT RATE (W) </b></h2><br>
 * If <i>shortening_rate_on</i> is set to true, then Sdot is calculated as follows:<br>
 * <br>
 * <b>Sdot = -alpha * v_CE</b><br>
 * <br>
 * If use_force_dependent_shortening_prop_constant = true,<br>
 *     - <b>alpha = (0.16 * F_CE_iso) + (0.18 * F_CE)   </b>,   <i>v_CE &gt;= 0 (concentric / isometric contraction)</i><br>
 *     - <b>alpha = 0.157 * F_CE                        </b>,   <i>v_CE &lt;  0 (eccentric contraction)</i><br>
 * <br>
 *     - v_CE = muscle fiber velocity at the current time.<br>
 *     - F_CE = force developed by the contractile (active) element of muscle at the current time.<br>
 *     - F_CE_iso = force that would be developed by the contractile element of muscle under isometric conditions with the current activation and fiber length.<br>
 * <br>
 * If use_force_dependent_shortening_prop_constant = false,<br>
 *     - <b>alpha = 0.25 * (F_CE + F_PASSIVE),   </b>,   <i>v_CE &gt;= 0 (concentric / isometric contraction)</i><br>
 *     - <b>alpha = 0.00                         </b>,   <i>v_CE &lt;  0 (eccentric contraction)</i><br>
 * <br>
 *      where F_PASSIVE = passive force developed by the muscle fiber velocity at the current time.<br>
 * <br>
 * <br>
 * <h2><b> MECHANICAL WORK RATE (W) </b></h2><br>
 * If <i>mechanical_work_rate_on</i> is set to true, then Wdot is calculated as follows:<br>
 * <br>
 * <b>Wdot = -F_CE * v_CE       </b><br>
 *     - v_CE = muscle fiber velocity at the current time.<br>
 *     - F_CE = force developed by the contractile element of muscle at the current time.<br>
 * <br>
 * <br>
 * If we draw a control volume around the fiber, the first law of thermodynamics<br>
 * suggests that negative mechanical work should be included in Wdot. As such,<br>
 * we include negative mechanical work in Wdot by default. To exclude negative<br>
 * mechanical work from Wdot, set the 'include_negative_mechanical_work'<br>
 * property to false.<br>
 * <br>
 * During eccentric contraction, the magnitude of the (negative) mechanical work<br>
 * rate can exceed that of the total (positive) heat rate, resulting in a flow<br>
 * of energy into the fiber. Experiments indicate that the chemical processes<br>
 * involved in fiber contraction cannot be reversed, and most of the energy that<br>
 * is absorbed during eccentric contraction (in increased cross-bridge<br>
 * potentials, for example) is eventually converted into heat. Thus, we increase<br>
 * Sdot (if necessary) to ensure Edot &gt; 0 for each muscle. See<br>
 * <a href="http://www.ncbi.nlm.nih.gov/pubmed/9409483">Constable, J.K.,<br>
 * Barclay, C.J., Gibbs, C.L. (1997) Energetics of lengthening in mouse and toad<br>
 * skeletal muscles. J Physiol 505:205-215</a>. To allow muscles to have<br>
 * negative total power, set the 'forbid_negative_total_power' property to false.<br>
 * <br>
 * <br>
 * Note that if enforce_minimum_heat_rate_per_muscle == true AND <br>
 * activation_rate_on == shortening_rate_on == maintenance_rate_on == true, then the total heat<br>
 * rate (AMdot + Mdot + Sdot) will be capped to a minimum value of 1.0 W/kg (Umberger(2003), page 104).<br>
 * <br>
 * <br>
 * <br>
 * <br>
 * <h1>Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter</h1><br>
 * <br>
 * Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter is an Object class that <br>
 * holds the metabolic parameters required to calculate metabolic power for a single muscle. <br>
 * <br>
 * <h2><b> Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter Properties </b></h2><br>
 * <br>
 * REQUIRED PROPERTIES<br>
 * - <b>specific_tension</b> = The specific tension of the muscle (Pascals (N/m^2)).<br>
 * - <b>density</b> = The density of the muscle (kg/m^3).<br>
 * - <b>ratio_slow_twitch_fibers</b> = Ratio of slow twitch fibers in the muscle (must be between 0 and 1).<br>
 * - <b>activation_constant_slow_twitch</b>  = Activation constant for slow twitch fibers (W/kg).<br>
 * - <b>activation_constant_fast_twitch</b>  = Activation constant for fast twitch fibers (W/kg).<br>
 * - <b>maintenance_constant_slow_twitch</b> = Maintenance constant for slow twitch fibers (W/kg).<br>
 * - <b>maintenance_constant_fast_twitch</b> = Maintenance constant for slow twitch fibers (W/kg).<br>
 * <br>
 * OPTIONAL PROPERTIES<br>
 * - <b>use_provided_muscle_mass</b> = An optional flag that allows the user to<br>
 *      explicitly specify a muscle mass. If set to true, the "provided_muscle_mass"<br>
 *      property must be specified. The default setting is false, in which case, the<br>
 *      muscle mass is calculated from the following formula:<br>
 *          m = (Fmax/specific_tension)*density*Lm_opt, where <br>
 *              specific_tension and density are properties defined above<br>
 *                  (note that their default values are set based on mammalian muscle,<br>
 *                  0.25e6 N/m^2 and 1059.7 kg/m^3, respectively);<br>
 *              Fmax and Lm_opt are the maximum isometric force and optimal <br>
 *                  fiber length, respectively, of the muscle.<br>
 * <br>
 * - <b>provided_muscle_mass</b> = The user specified muscle mass (kg).<br>
 * <br>
 * <br>
 * @author Tim Dorn
 */
public class Bhargava2004MuscleMetabolicsProbe extends Probe {
  private transient long swigCPtr;

  public Bhargava2004MuscleMetabolicsProbe(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Bhargava2004MuscleMetabolicsProbe obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Bhargava2004MuscleMetabolicsProbe(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Bhargava2004MuscleMetabolicsProbe safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Bhargava2004MuscleMetabolicsProbe(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Bhargava2004MuscleMetabolicsProbe(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_activation_rate_on(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_activation_rate_on(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_activation_rate_on(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_activation_rate_on__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_activation_rate_on(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_activation_rate_on__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_activation_rate_on(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_activation_rate_on__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_activation_rate_on(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_activation_rate_on(swigCPtr, this, value);
  }

  public void constructProperty_activation_rate_on(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_activation_rate_on(swigCPtr, this, initValue);
  }

  public boolean get_activation_rate_on() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_activation_rate_on__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_activation_rate_on() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_activation_rate_on__SWIG_1(swigCPtr, this), false);
  }

  public void set_activation_rate_on(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_activation_rate_on__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_maintenance_rate_on(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_maintenance_rate_on(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_maintenance_rate_on(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_maintenance_rate_on__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_maintenance_rate_on(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_maintenance_rate_on__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_maintenance_rate_on(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_maintenance_rate_on__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_maintenance_rate_on(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_maintenance_rate_on(swigCPtr, this, value);
  }

  public void constructProperty_maintenance_rate_on(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_maintenance_rate_on(swigCPtr, this, initValue);
  }

  public boolean get_maintenance_rate_on() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_maintenance_rate_on__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_maintenance_rate_on() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_maintenance_rate_on__SWIG_1(swigCPtr, this), false);
  }

  public void set_maintenance_rate_on(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_maintenance_rate_on__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_shortening_rate_on(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_shortening_rate_on(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_shortening_rate_on(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_shortening_rate_on__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_shortening_rate_on(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_shortening_rate_on__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_shortening_rate_on(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_shortening_rate_on__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_shortening_rate_on(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_shortening_rate_on(swigCPtr, this, value);
  }

  public void constructProperty_shortening_rate_on(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_shortening_rate_on(swigCPtr, this, initValue);
  }

  public boolean get_shortening_rate_on() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_shortening_rate_on__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_shortening_rate_on() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_shortening_rate_on__SWIG_1(swigCPtr, this), false);
  }

  public void set_shortening_rate_on(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_shortening_rate_on__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_basal_rate_on(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_rate_on(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_basal_rate_on(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_rate_on__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_basal_rate_on(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_rate_on__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_basal_rate_on(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_rate_on__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_basal_rate_on(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_basal_rate_on(swigCPtr, this, value);
  }

  public void constructProperty_basal_rate_on(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_rate_on(swigCPtr, this, initValue);
  }

  public boolean get_basal_rate_on() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_rate_on__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_basal_rate_on() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_rate_on__SWIG_1(swigCPtr, this), false);
  }

  public void set_basal_rate_on(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_rate_on__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_mechanical_work_rate_on(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_mechanical_work_rate_on(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_mechanical_work_rate_on(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_mechanical_work_rate_on__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_mechanical_work_rate_on(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_mechanical_work_rate_on__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_mechanical_work_rate_on(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_mechanical_work_rate_on__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_mechanical_work_rate_on(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_mechanical_work_rate_on(swigCPtr, this, value);
  }

  public void constructProperty_mechanical_work_rate_on(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_mechanical_work_rate_on(swigCPtr, this, initValue);
  }

  public boolean get_mechanical_work_rate_on() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_mechanical_work_rate_on__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_mechanical_work_rate_on() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_mechanical_work_rate_on__SWIG_1(swigCPtr, this), false);
  }

  public void set_mechanical_work_rate_on(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_mechanical_work_rate_on__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_enforce_minimum_heat_rate_per_muscle(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_enforce_minimum_heat_rate_per_muscle(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_enforce_minimum_heat_rate_per_muscle(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_enforce_minimum_heat_rate_per_muscle(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_enforce_minimum_heat_rate_per_muscle(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_enforce_minimum_heat_rate_per_muscle(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_enforce_minimum_heat_rate_per_muscle(swigCPtr, this, value);
  }

  public void constructProperty_enforce_minimum_heat_rate_per_muscle(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_enforce_minimum_heat_rate_per_muscle(swigCPtr, this, initValue);
  }

  public boolean get_enforce_minimum_heat_rate_per_muscle() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_enforce_minimum_heat_rate_per_muscle__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_enforce_minimum_heat_rate_per_muscle() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_enforce_minimum_heat_rate_per_muscle__SWIG_1(swigCPtr, this), false);
  }

  public void set_enforce_minimum_heat_rate_per_muscle(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_enforce_minimum_heat_rate_per_muscle__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default curve shown in doxygen. *
   */
  public void copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public PiecewiseLinearFunction get_normalized_fiber_length_dependence_on_maintenance_rate(int i) {
    return new PiecewiseLinearFunction(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_0(swigCPtr, this, i), false);
  }

  public PiecewiseLinearFunction upd_normalized_fiber_length_dependence_on_maintenance_rate(int i) {
    return new PiecewiseLinearFunction(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_normalized_fiber_length_dependence_on_maintenance_rate(int i, PiecewiseLinearFunction value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_0(swigCPtr, this, i, PiecewiseLinearFunction.getCPtr(value), value);
  }

  public int append_normalized_fiber_length_dependence_on_maintenance_rate(PiecewiseLinearFunction value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_normalized_fiber_length_dependence_on_maintenance_rate(swigCPtr, this, PiecewiseLinearFunction.getCPtr(value), value);
  }

  public void constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(PiecewiseLinearFunction initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(swigCPtr, this, PiecewiseLinearFunction.getCPtr(initValue), initValue);
  }

  public PiecewiseLinearFunction get_normalized_fiber_length_dependence_on_maintenance_rate() {
    return new PiecewiseLinearFunction(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_1(swigCPtr, this), false);
  }

  public PiecewiseLinearFunction upd_normalized_fiber_length_dependence_on_maintenance_rate() {
    return new PiecewiseLinearFunction(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_1(swigCPtr, this), false);
  }

  public void set_normalized_fiber_length_dependence_on_maintenance_rate(PiecewiseLinearFunction value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_normalized_fiber_length_dependence_on_maintenance_rate__SWIG_1(swigCPtr, this, PiecewiseLinearFunction.getCPtr(value), value);
  }

  /**
   *  Disabled by default. *
   */
  public void copyProperty_use_force_dependent_shortening_prop_constant(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_use_force_dependent_shortening_prop_constant(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_use_force_dependent_shortening_prop_constant(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_use_force_dependent_shortening_prop_constant__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_use_force_dependent_shortening_prop_constant(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_use_force_dependent_shortening_prop_constant__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_use_force_dependent_shortening_prop_constant(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_use_force_dependent_shortening_prop_constant__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_use_force_dependent_shortening_prop_constant(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_use_force_dependent_shortening_prop_constant(swigCPtr, this, value);
  }

  public void constructProperty_use_force_dependent_shortening_prop_constant(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_use_force_dependent_shortening_prop_constant(swigCPtr, this, initValue);
  }

  public boolean get_use_force_dependent_shortening_prop_constant() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_use_force_dependent_shortening_prop_constant__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_use_force_dependent_shortening_prop_constant() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_use_force_dependent_shortening_prop_constant__SWIG_1(swigCPtr, this), false);
  }

  public void set_use_force_dependent_shortening_prop_constant(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_use_force_dependent_shortening_prop_constant__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default value = 1.2. *
   */
  public void copyProperty_basal_coefficient(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_coefficient(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public double get_basal_coefficient(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_coefficient__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_basal_coefficient(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_coefficient__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_basal_coefficient(int i, double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_coefficient__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_basal_coefficient(double value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_basal_coefficient(swigCPtr, this, value);
  }

  public void constructProperty_basal_coefficient(double initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_coefficient(swigCPtr, this, initValue);
  }

  public double get_basal_coefficient() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_coefficient__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_basal_coefficient() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_coefficient__SWIG_1(swigCPtr, this), false);
  }

  public void set_basal_coefficient(double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_coefficient__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default value = 1.0. *
   */
  public void copyProperty_basal_exponent(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_basal_exponent(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public double get_basal_exponent(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_exponent__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_basal_exponent(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_exponent__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_basal_exponent(int i, double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_exponent__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_basal_exponent(double value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_basal_exponent(swigCPtr, this, value);
  }

  public void constructProperty_basal_exponent(double initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_basal_exponent(swigCPtr, this, initValue);
  }

  public double get_basal_exponent() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_basal_exponent__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_basal_exponent() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_basal_exponent__SWIG_1(swigCPtr, this), false);
  }

  public void set_basal_exponent(double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_basal_exponent__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default value = 1.0. *
   */
  public void copyProperty_muscle_effort_scaling_factor(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_muscle_effort_scaling_factor(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public double get_muscle_effort_scaling_factor(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_muscle_effort_scaling_factor__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_muscle_effort_scaling_factor(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_muscle_effort_scaling_factor(int i, double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_muscle_effort_scaling_factor__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_muscle_effort_scaling_factor(double value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_muscle_effort_scaling_factor(swigCPtr, this, value);
  }

  public void constructProperty_muscle_effort_scaling_factor(double initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_muscle_effort_scaling_factor(swigCPtr, this, initValue);
  }

  public double get_muscle_effort_scaling_factor() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_muscle_effort_scaling_factor__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_muscle_effort_scaling_factor() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_muscle_effort_scaling_factor__SWIG_1(swigCPtr, this), false);
  }

  public void set_muscle_effort_scaling_factor(double value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_muscle_effort_scaling_factor__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_include_negative_mechanical_work(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_include_negative_mechanical_work(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_include_negative_mechanical_work(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_include_negative_mechanical_work__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_include_negative_mechanical_work(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_include_negative_mechanical_work__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_include_negative_mechanical_work(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_include_negative_mechanical_work__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_include_negative_mechanical_work(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_include_negative_mechanical_work(swigCPtr, this, value);
  }

  public void constructProperty_include_negative_mechanical_work(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_include_negative_mechanical_work(swigCPtr, this, initValue);
  }

  public boolean get_include_negative_mechanical_work() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_include_negative_mechanical_work__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_include_negative_mechanical_work() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_include_negative_mechanical_work__SWIG_1(swigCPtr, this), false);
  }

  public void set_include_negative_mechanical_work(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_include_negative_mechanical_work__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Enabled by default. *
   */
  public void copyProperty_forbid_negative_total_power(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_forbid_negative_total_power(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_forbid_negative_total_power(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_forbid_negative_total_power__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_forbid_negative_total_power(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_forbid_negative_total_power__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_forbid_negative_total_power(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_forbid_negative_total_power__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_forbid_negative_total_power(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_forbid_negative_total_power(swigCPtr, this, value);
  }

  public void constructProperty_forbid_negative_total_power(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_forbid_negative_total_power(swigCPtr, this, initValue);
  }

  public boolean get_forbid_negative_total_power() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_forbid_negative_total_power__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_forbid_negative_total_power() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_forbid_negative_total_power__SWIG_1(swigCPtr, this), false);
  }

  public void set_forbid_negative_total_power(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_forbid_negative_total_power__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default value = true *
   */
  public void copyProperty_report_total_metabolics_only(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_report_total_metabolics_only(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public boolean get_report_total_metabolics_only(int i) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_report_total_metabolics_only__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_report_total_metabolics_only(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_report_total_metabolics_only__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_report_total_metabolics_only(int i, boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_report_total_metabolics_only__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_report_total_metabolics_only(boolean value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_report_total_metabolics_only(swigCPtr, this, value);
  }

  public void constructProperty_report_total_metabolics_only(boolean initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_report_total_metabolics_only(swigCPtr, this, initValue);
  }

  public boolean get_report_total_metabolics_only() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_report_total_metabolics_only__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_report_total_metabolics_only() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_report_total_metabolics_only__SWIG_1(swigCPtr, this), false);
  }

  public void set_report_total_metabolics_only(boolean value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_report_total_metabolics_only__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe source) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe.getCPtr(source), source);
  }

  public Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(int i) {
    return new Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_0(swigCPtr, this, i), false);
  }

  public Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(int i) {
    return new Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(int i, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_0(swigCPtr, this, i, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet.getCPtr(value), value);
  }

  public int append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet.getCPtr(value), value);
  }

  public void constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet initValue) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet.getCPtr(initValue), initValue);
  }

  public Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet() {
    return new Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_1(swigCPtr, this), false);
  }

  public Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet() {
    return new Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_1(swigCPtr, this), false);
  }

  public void set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet value) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet__SWIG_1(swigCPtr, this, Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet.getCPtr(value), value);
  }

  /**
   *  Default constructor 
   */
  public Bhargava2004MuscleMetabolicsProbe() {
    this(opensimSimulationJNI.new_Bhargava2004MuscleMetabolicsProbe__SWIG_0(), true);
  }

  /**
   *  Convenience constructor 
   */
  public Bhargava2004MuscleMetabolicsProbe(boolean activation_rate_on, boolean maintenance_rate_on, boolean shortening_rate_on, boolean basal_rate_on, boolean work_rate_on) {
    this(opensimSimulationJNI.new_Bhargava2004MuscleMetabolicsProbe__SWIG_1(activation_rate_on, maintenance_rate_on, shortening_rate_on, basal_rate_on, work_rate_on), true);
  }

  /**
   *  Compute muscle metabolic power. 
   */
  public Vector computeProbeInputs(State state) {
    return new Vector(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_computeProbeInputs(swigCPtr, this, State.getCPtr(state), state), true);
  }

  /**
   *  Returns the number of probe inputs in the vector returned by computeProbeInputs(). 
   */
  public int getNumProbeInputs() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getNumProbeInputs(swigCPtr, this);
  }

  /**
   *  Returns the column labels of the probe values for reporting. <br>
   *         Currently uses the Probe name as the column label, so be sure<br>
   *         to name your probe appropriately!
   */
  public ArrayStr getProbeOutputLabels() {
    return new ArrayStr(opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getProbeOutputLabels(swigCPtr, this), true);
  }

  public int getNumMetabolicMuscles() {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getNumMetabolicMuscles(swigCPtr, this);
  }

  /**
   *  Add a muscle and its parameters so that it can be included in the metabolic analysis. 
   */
  public void addMuscle(String muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_addMuscle__SWIG_0(swigCPtr, this, muscleName, ratio_slow_twitch_fibers, activation_constant_slow_twitch, activation_constant_fast_twitch, maintenance_constant_slow_twitch, maintenance_constant_fast_twitch);
  }

  /**
   *  Add a muscle and its parameters so that it can be included in the metabolic analysis. 
   */
  public void addMuscle(String muscleName, double ratio_slow_twitch_fibers, double activation_constant_slow_twitch, double activation_constant_fast_twitch, double maintenance_constant_slow_twitch, double maintenance_constant_fast_twitch, double muscle_mass) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_addMuscle__SWIG_1(swigCPtr, this, muscleName, ratio_slow_twitch_fibers, activation_constant_slow_twitch, activation_constant_fast_twitch, maintenance_constant_slow_twitch, maintenance_constant_fast_twitch, muscle_mass);
  }

  /**
   *  Remove a muscle from the metabolic analysis. 
   */
  public void removeMuscle(String muscleName) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_removeMuscle(swigCPtr, this, muscleName);
  }

  /**
   *  %Set an existing muscle to use a provided muscle mass. 
   */
  public void useProvidedMass(String muscleName, double providedMass) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_useProvidedMass(swigCPtr, this, muscleName, providedMass);
  }

  /**
   *  %Set an existing muscle to calculate its own mass. 
   */
  public void useCalculatedMass(String muscleName) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_useCalculatedMass(swigCPtr, this, muscleName);
  }

  /**
   *  Get whether the muscle mass is being explicitly provided.<br>
   *        True means that it is using the property 'provided_muscle_mass'<br>
   *        False means that the muscle mass is being calculated from muscle properties. 
   */
  public boolean isUsingProvidedMass(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_isUsingProvidedMass(swigCPtr, this, muscleName);
  }

  /**
   *  Get the muscle mass used in the metabolic analysis. The value<br>
   *         returned will depend on if the muscle mass is explicitly provided<br>
   *         (i.e. isUsingProvidedMass = true), or if it is being automatically<br>
   *         calculated from muscle data already present in the model<br>
   *         (i.e. isUsingProvidedMass = true). 
   */
  public double getMuscleMass(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getMuscleMass(swigCPtr, this, muscleName);
  }

  /**
   *  Get the ratio of slow twitch fibers for an existing muscle. 
   */
  public double getRatioSlowTwitchFibers(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getRatioSlowTwitchFibers(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the ratio of slow twitch fibers for an existing muscle. 
   */
  public void setRatioSlowTwitchFibers(String muscleName, double ratio) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setRatioSlowTwitchFibers(swigCPtr, this, muscleName, ratio);
  }

  /**
   *  Get the density for an existing muscle (kg/m^3). 
   */
  public double getDensity(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getDensity(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the density for an existing muscle (kg/m^3). 
   */
  public void setDensity(String muscleName, double density) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setDensity(swigCPtr, this, muscleName, density);
  }

  /**
   *  Get the specific tension for an existing muscle (Pascals (N/m^2)). 
   */
  public double getSpecificTension(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getSpecificTension(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the specific tension for an existing muscle (Pascals (N/m^2)). 
   */
  public void setSpecificTension(String muscleName, double specificTension) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setSpecificTension(swigCPtr, this, muscleName, specificTension);
  }

  /**
   *  Get the activation constant for slow twitch fibers for an existing muscle. 
   */
  public double getActivationConstantSlowTwitch(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getActivationConstantSlowTwitch(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the activation constant for slow twitch fibers for an existing muscle. 
   */
  public void setActivationConstantSlowTwitch(String muscleName, double c) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setActivationConstantSlowTwitch(swigCPtr, this, muscleName, c);
  }

  /**
   *  Get the activation constant for fast twitch fibers for an existing muscle. 
   */
  public double getActivationConstantFastTwitch(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getActivationConstantFastTwitch(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the activation constant for fast twitch fibers for an existing muscle. 
   */
  public void setActivationConstantFastTwitch(String muscleName, double c) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setActivationConstantFastTwitch(swigCPtr, this, muscleName, c);
  }

  /**
   *  Get the maintenance constant for slow twitch fibers for an existing muscle. 
   */
  public double getMaintenanceConstantSlowTwitch(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantSlowTwitch(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the maintenance constant for slow twitch fibers for an existing muscle. 
   */
  public void setMaintenanceConstantSlowTwitch(String muscleName, double c) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantSlowTwitch(swigCPtr, this, muscleName, c);
  }

  /**
   *  Get the maintenance constant for fast twitch fibers for an existing muscle. 
   */
  public double getMaintenanceConstantFastTwitch(String muscleName) {
    return opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_getMaintenanceConstantFastTwitch(swigCPtr, this, muscleName);
  }

  /**
   *  %Set the maintenance constant for fast twitch fibers for an existing muscle. 
   */
  public void setMaintenanceConstantFastTwitch(String muscleName, double c) {
    opensimSimulationJNI.Bhargava2004MuscleMetabolicsProbe_setMaintenanceConstantFastTwitch(swigCPtr, this, muscleName, c);
  }

}
