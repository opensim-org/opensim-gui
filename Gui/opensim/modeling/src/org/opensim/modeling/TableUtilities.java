/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class TableUtilities {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public TableUtilities(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(TableUtilities obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_TableUtilities(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  Throws an exception if the same label appears more than once in the list<br>
   *  of labels.<br>
   *  @throws NonUniqueLabels
   */
  public static void checkNonUniqueLabels(StdVectorString labels) {
    opensimCommonJNI.TableUtilities_checkNonUniqueLabels(StdVectorString.getCPtr(labels), labels);
  }

  /**
   *  Returns true if the table contains 'inDegrees' metadata set to 'yes',<br>
   *  and returns false if the table contains 'inDegrees' metadata set to<br>
   *  'no'.<br>
   *  @throws Exception if table does not have 'inDegrees' table metadata.<br>
   *  @throws Exception if the 'inDegrees' metadata is neither 'yes' or 'no'.
   */
  public static boolean isInDegrees(TimeSeriesTable table) {
    return opensimCommonJNI.TableUtilities_isInDegrees(TimeSeriesTable.getCPtr(table), table);
  }

  /**
   *  Get the index in the provided array of labels that corresponds to the<br>
   *  desired label. This function attempts to handle the change in<br>
   *  state variable names that occurred in OpenSim version 4.0; for example,<br>
   *  if you search for `&lt;coord-name&gt;/speed` and it is not found, then this<br>
   *  function looks for `&lt;coord-name&gt;_u`. If you search for<br>
   *  `&lt;muscle&gt;/activation` and it is not found, then this function looks for<br>
   *  `&lt;muscle&gt;.activation`. This function returns -1 if the desired label is<br>
   *  not found.
   */
  public static int findStateLabelIndex(ArrayStr labels, String desired) {
    return opensimCommonJNI.TableUtilities_findStateLabelIndex__SWIG_0(ArrayStr.getCPtr(labels), labels, desired);
  }

  /**
   *  
   */
  public static int findStateLabelIndex(StdVectorString labels, String desired) {
    return opensimCommonJNI.TableUtilities_findStateLabelIndex__SWIG_1(StdVectorString.getCPtr(labels), labels, desired);
  }

  /**
   *  Lowpass filter the data in a TimeSeriesTable at a provided cutoff<br>
   *  frequency. If padData is true, then the data is first padded with pad()<br>
   *  using numRowsToPrependAndAppend = table.getNumRows() / 2.<br>
   *  The filtering is performed with Signal::LowpassIIR()
   */
  public static void filterLowpass(TimeSeriesTable table, double cutoffFreq, boolean padData) {
    opensimCommonJNI.TableUtilities_filterLowpass__SWIG_0(TimeSeriesTable.getCPtr(table), table, cutoffFreq, padData);
  }

  /**
   *  Lowpass filter the data in a TimeSeriesTable at a provided cutoff<br>
   *  frequency. If padData is true, then the data is first padded with pad()<br>
   *  using numRowsToPrependAndAppend = table.getNumRows() / 2.<br>
   *  The filtering is performed with Signal::LowpassIIR()
   */
  public static void filterLowpass(TimeSeriesTable table, double cutoffFreq) {
    opensimCommonJNI.TableUtilities_filterLowpass__SWIG_1(TimeSeriesTable.getCPtr(table), table, cutoffFreq);
  }

  /**
   *  Pad each column by the number of rows specified. The padded data is<br>
   *  obtained by reflecting and negating the data in the table.<br>
   *  Postcondition: the number of rows is table.getNumRows() + 2 *<br>
   *  numRowsToPrependAndAppend.
   */
  public static void pad(TimeSeriesTable table, int numRowsToPrependAndAppend) {
    opensimCommonJNI.TableUtilities_pad(TimeSeriesTable.getCPtr(table), table, numRowsToPrependAndAppend);
  }

  public static TimeSeriesTableVec3 convertRotationsToEulerAngles(SWIGTYPE_p_OpenSim__TimeSeriesTable_T_SimTK__Rotation_T_SimTK__Real_t_t rotTable) {
    return new TimeSeriesTableVec3(opensimCommonJNI.TableUtilities_convertRotationsToEulerAngles(SWIGTYPE_p_OpenSim__TimeSeriesTable_T_SimTK__Rotation_T_SimTK__Real_t_t.getCPtr(rotTable)), true);
  }

  public TableUtilities() {
    this(opensimCommonJNI.new_TableUtilities(), true);
  }

}
