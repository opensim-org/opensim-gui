/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * -----------------------------------------------------------------------------<br>
 *   This InverseRotation class is the inverse of a Rotation<br>
 *   See the Rotation class for information.<br>
 * -----------------------------------------------------------------------------
 */
public class InverseRotation {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public InverseRotation(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(InverseRotation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimbodyJNI.delete_InverseRotation(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  You should not ever construct one of these as they should only occur as expression<br>
   *  intermediates resulting from use of the "~" operator on a Rotation.<br>
   *  But if you must, the default will produce an identity rotation.
   */
  public InverseRotation() {
    this(opensimSimbodyJNI.new_InverseRotation__SWIG_0(), true);
  }

  /**
   *  This is an explicit implementation of the default copy constructor.
   */
  public InverseRotation(InverseRotation R) {
    this(opensimSimbodyJNI.new_InverseRotation__SWIG_1(InverseRotation.getCPtr(R), R), true);
  }

  /**
   *  Assuming this InverseRotation_ is R_AB, and given a symmetric dyadic matrix S_BB expressed<br>
   *  in B, we can reexpress it in A using S_AA=R_AB*S_BB*R_BA. The matrix should be one<br>
   *  that is formed as products of vectors expressed in A, such as inertia, gyration or<br>
   *  covariance matrices. This can be done efficiently exploiting properties of R and S.<br>
   *  Cost is 57 flops.<br>
   *  @see Rotation#reexpressSymMat33() We can invert an InverseRotation just by recasting it to a Rotation at zero cost.
   */
  public Rotation invert() {
    return new Rotation(opensimSimbodyJNI.InverseRotation_invert(swigCPtr, this), false);
  }

  /**
   *  Transpose, and transpose operators (override BaseMat versions of transpose).<br>
   *  For an orthogonal matrix like this one transpose is the same as inverse.
   */
  public Rotation transpose() {
    return new Rotation(opensimSimbodyJNI.InverseRotation_transpose(swigCPtr, this), false);
  }

}
