/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * <br>
 * The squared difference between a model marker<br>
 * location and an experimental reference marker location, summed over the markers for which an<br>
 * experimental data location is provided, and integrated over the phase.<br>
 * The reference can be provided as a file name to a TRC file, or<br>
 * programmatically as a TimeSeriesTable.<br>
 * <br>
 * ## Scale factors<br>
 * <br>
 * Use `addScaleFactor()` to add a MocoParameter to the MocoProblem that will<br>
 * scale the tracking reference data associated with a marker in the tracking cost.<br>
 * Scale factors for this goal can be useful if the magnitude of the tracking<br>
 * reference data is either unknown or unreliable (e.g., pelvis marker Y-value).<br>
 * Scale factors are applied to the tracking error calculations based on the<br>
 * following equation:<br>
 * <br>
 *     error = modelValue - scaleFactor * referenceValue<br>
 * <br>
 * In other words, scale factors are applied when computing the tracking error for<br>
 * each marker, not to the reference data directly.<br>
 * <br>
 * Adding a scale factor to a MocoMarkerTrackingGoal.<br>
 * {@code 
auto* markerTrackingGoal = problem.addGoal<MocoMarkerTrackingGoal>();
...
markerTrackingGoal->addScaleFactor(
        'LPSIS_y_scale_factor', 'LPSIS', 1, {0.5, 2.0});
}<br>
 * <br>
 * 
 */
public class MocoMarkerTrackingGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoMarkerTrackingGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoMarkerTrackingGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoMarkerTrackingGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoMarkerTrackingGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

    public void addScaleFactor(String name, String marker, int index, double[] b)
            throws Exception {
            addScaleFactor(name, marker, index, MocoPhase.convertArrayToMB(b));
    }

  public static MocoMarkerTrackingGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoMarkerTrackingGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoMarkerTrackingGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoMarkerTrackingGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoMarkerTrackingGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoMarkerTrackingGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoMarkerTrackingGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoMarkerTrackingGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoMarkerTrackingGoal() {
    this(opensimMocoJNI.new_MocoMarkerTrackingGoal__SWIG_0(), true);
  }

  public MocoMarkerTrackingGoal(String name) {
    this(opensimMocoJNI.new_MocoMarkerTrackingGoal__SWIG_1(name), true);
  }

  public MocoMarkerTrackingGoal(String name, double weight) {
    this(opensimMocoJNI.new_MocoMarkerTrackingGoal__SWIG_2(name, weight), true);
  }

  /**
   *  Provide a MarkersReference object containing the marker trajectories to<br>
   *     be tracked by a model. The MarkersReferences can be created from a file<br>
   *     of marker trajectories (e.g. .trc) or created programmatically via a<br>
   *     TimeSeriesTableVec3. The marker weights property can be optionally<br>
   *     specified to weight the tracking of individual markers in the cost<br>
   *     function. Names of markers in the reference to be tracked should match<br>
   *     the names of corresponding model markers. 
   */
  public void setMarkersReference(MarkersReference arg0) {
    opensimMocoJNI.MocoMarkerTrackingGoal_setMarkersReference(swigCPtr, this, MarkersReference.getCPtr(arg0), arg0);
  }

  /**
   *  If no MarkersReference has been specified, this returns an empty<br>
   *     MarkersReference object. 
   */
  public MarkersReference getMarkersReference() {
    return new MarkersReference(opensimMocoJNI.MocoMarkerTrackingGoal_getMarkersReference(swigCPtr, this), true);
  }

  /**
   *  Specify if the markers_reference can contain marker data for a marker<br>
   *     not in the model. An exception is raised if set to false and marker<br>
   *     data exists for a marker not included in the model. 
   */
  public void setAllowUnusedReferences(boolean tf) {
    opensimMocoJNI.MocoMarkerTrackingGoal_setAllowUnusedReferences(swigCPtr, this, tf);
  }

  /**
   *  Add a MocoParameter to the problem that will scale the tracking reference<br>
   *  data associated with the specified marker. Scale factors are applied<br>
   *  to the tracking error calculations based on the following equation:<br>
   * <br>
   *      error = modelValue - scaleFactor * referenceValue<br>
   * <br>
   *  In other words, the scale factor is applied when computing the tracking<br>
   *  error for each marker, not to the reference data directly. You must<br>
   *  specify both the marker name and the index corresponding to the direction<br>
   *  in ground (i.e., X = 0, Y = 1, Z = 2) of the scaled value.
   */
  public void addScaleFactor(String name, String marker, int index, MocoBounds bounds) {
    opensimMocoJNI.MocoMarkerTrackingGoal_addScaleFactor(swigCPtr, this, name, marker, index, MocoBounds.getCPtr(bounds), bounds);
  }

}
