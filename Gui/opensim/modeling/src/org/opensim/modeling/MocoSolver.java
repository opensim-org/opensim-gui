/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Once the solver is created, you should not make any edits to the<br>
 * MocoProblem. If you do, you must call resetProblem(const MocoProblem<br>
 * problem). 
 */
public class MocoSolver extends OpenSimObject {
  private transient long swigCPtr;

  public MocoSolver(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoSolver safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoSolver_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoSolver(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoSolver_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoSolver_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoSolver_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoSolver(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoSolver_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Call this to prepare the solver for use on the provided problem.<br>
   *  The solver creates and stores a MocoProblemRep using the provided<br>
   *  problem.
   */
  public void resetProblem(MocoProblem problem) {
    opensimMocoJNI.MocoSolver_resetProblem(swigCPtr, this, MocoProblem.getCPtr(problem), problem);
  }

  /**
   *  (Experimental) Run a forward simulation (using the OpenSim Manager,<br>
   *  which uses a SimTK::Integrator), using the default controls for<br>
   *  actuators and the default states as the initial states, to create a<br>
   *  guess that is dynamically consistent (constraint errors should be<br>
   *  small). The time range for the simulation is the upper bound on the<br>
   *  initial time and the lower bound on the final time. The initial state<br>
   *  values are the default state values unless:<br>
   *   - initial bounds are an equality constraint: use the bound value<br>
   *   - default value is not within the initial bounds: use midpoint of<br>
   *     initial bounds.<br>
   * <br>
   *  The number of times in the trajectory is the number of successful<br>
   *  integration steps.<br>
   * <br>
   *  Note: This function does not yet support problems with parameters.<br>
   * <br>
   *  Note: This function assumes all actuators are in the model's ForceSet.<br>
   * <br>
   *  @throws Exception If the lower bound on the final time is less than or<br>
   *  equal to the upper bound on the initial time. This situation is okay in<br>
   *  general; it's just that this function doesn't support it.<br>
   * <br>
   *  You must have called resetProblem().
   */
  public MocoTrajectory createGuessTimeStepping() {
    return new MocoTrajectory(opensimMocoJNI.MocoSolver_createGuessTimeStepping(swigCPtr, this), true);
  }

}
