/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MarkersReference extends ReferenceVec3 {
  private transient long swigCPtr;

  public MarkersReference(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.MarkersReference_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MarkersReference obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_MarkersReference(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MarkersReference safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.MarkersReference_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MarkersReference(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.MarkersReference_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.MarkersReference_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.MarkersReference_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MarkersReference(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.MarkersReference_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_marker_file(MarkersReference source) {
    opensimSimulationJNI.MarkersReference_copyProperty_marker_file(swigCPtr, this, MarkersReference.getCPtr(source), source);
  }

  public String get_marker_file(int i) {
    return opensimSimulationJNI.MarkersReference_get_marker_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_marker_file(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.MarkersReference_upd_marker_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_marker_file(int i, String value) {
    opensimSimulationJNI.MarkersReference_set_marker_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_marker_file(String value) {
    return opensimSimulationJNI.MarkersReference_append_marker_file(swigCPtr, this, value);
  }

  public void constructProperty_marker_file(String initValue) {
    opensimSimulationJNI.MarkersReference_constructProperty_marker_file(swigCPtr, this, initValue);
  }

  public String get_marker_file() {
    return opensimSimulationJNI.MarkersReference_get_marker_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_marker_file() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.MarkersReference_upd_marker_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_marker_file(String value) {
    opensimSimulationJNI.MarkersReference_set_marker_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_marker_weights(MarkersReference source) {
    opensimSimulationJNI.MarkersReference_copyProperty_marker_weights(swigCPtr, this, MarkersReference.getCPtr(source), source);
  }

  public SetMarkerWeights get_marker_weights(int i) {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_get_marker_weights__SWIG_0(swigCPtr, this, i), false);
  }

  public SetMarkerWeights upd_marker_weights(int i) {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_upd_marker_weights__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_marker_weights(int i, SetMarkerWeights value) {
    opensimSimulationJNI.MarkersReference_set_marker_weights__SWIG_0(swigCPtr, this, i, SetMarkerWeights.getCPtr(value), value);
  }

  public int append_marker_weights(SetMarkerWeights value) {
    return opensimSimulationJNI.MarkersReference_append_marker_weights(swigCPtr, this, SetMarkerWeights.getCPtr(value), value);
  }

  public void constructProperty_marker_weights(SetMarkerWeights initValue) {
    opensimSimulationJNI.MarkersReference_constructProperty_marker_weights(swigCPtr, this, SetMarkerWeights.getCPtr(initValue), initValue);
  }

  public SetMarkerWeights get_marker_weights() {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_get_marker_weights__SWIG_1(swigCPtr, this), false);
  }

  public SetMarkerWeights upd_marker_weights() {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_upd_marker_weights__SWIG_1(swigCPtr, this), false);
  }

  public void set_marker_weights(SetMarkerWeights value) {
    opensimSimulationJNI.MarkersReference_set_marker_weights__SWIG_1(swigCPtr, this, SetMarkerWeights.getCPtr(value), value);
  }

  public void copyProperty_default_weight(MarkersReference source) {
    opensimSimulationJNI.MarkersReference_copyProperty_default_weight(swigCPtr, this, MarkersReference.getCPtr(source), source);
  }

  public double get_default_weight(int i) {
    return opensimSimulationJNI.MarkersReference_get_default_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_default_weight(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.MarkersReference_upd_default_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_default_weight(int i, double value) {
    opensimSimulationJNI.MarkersReference_set_default_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_default_weight(double value) {
    return opensimSimulationJNI.MarkersReference_append_default_weight(swigCPtr, this, value);
  }

  public void constructProperty_default_weight(double initValue) {
    opensimSimulationJNI.MarkersReference_constructProperty_default_weight(swigCPtr, this, initValue);
  }

  public double get_default_weight() {
    return opensimSimulationJNI.MarkersReference_get_default_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_default_weight() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.MarkersReference_upd_default_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_default_weight(double value) {
    opensimSimulationJNI.MarkersReference_set_default_weight__SWIG_1(swigCPtr, this, value);
  }

  public MarkersReference() {
    this(opensimSimulationJNI.new_MarkersReference__SWIG_0(), true);
  }

  public MarkersReference(String markerFileName, SetMarkerWeights markerWeightSet, Units modelUnits) {
    this(opensimSimulationJNI.new_MarkersReference__SWIG_1(markerFileName, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet, Units.getCPtr(modelUnits), modelUnits), true);
  }

  public MarkersReference(String markerFileName, SetMarkerWeights markerWeightSet) {
    this(opensimSimulationJNI.new_MarkersReference__SWIG_2(markerFileName, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet), true);
  }

  public MarkersReference(TimeSeriesTableVec3 markerData, SetMarkerWeights markerWeightSet, Units units) {
    this(opensimSimulationJNI.new_MarkersReference__SWIG_3(TimeSeriesTableVec3.getCPtr(markerData), markerData, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet, Units.getCPtr(units), units), true);
  }

  public MarkersReference(TimeSeriesTableVec3 markerData, SetMarkerWeights markerWeightSet) {
    this(opensimSimulationJNI.new_MarkersReference__SWIG_4(TimeSeriesTableVec3.getCPtr(markerData), markerData, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet), true);
  }

  public void initializeFromMarkersFile(String markerFile, SetMarkerWeights markerWeightSet, Units modelUnits) {
    opensimSimulationJNI.MarkersReference_initializeFromMarkersFile__SWIG_0(swigCPtr, this, markerFile, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet, Units.getCPtr(modelUnits), modelUnits);
  }

  public void initializeFromMarkersFile(String markerFile, SetMarkerWeights markerWeightSet) {
    opensimSimulationJNI.MarkersReference_initializeFromMarkersFile__SWIG_1(swigCPtr, this, markerFile, SetMarkerWeights.getCPtr(markerWeightSet), markerWeightSet);
  }

  public int getNumRefs() {
    return opensimSimulationJNI.MarkersReference_getNumRefs(swigCPtr, this);
  }

  public Vec2 getValidTimeRange() {
    return new Vec2(opensimSimulationJNI.MarkersReference_getValidTimeRange(swigCPtr, this), true);
  }

  public SimTKArrayString getNames() {
    return new SimTKArrayString(opensimSimulationJNI.MarkersReference_getNames(swigCPtr, this), false);
  }

  public void getValuesAtTime(double time, SimTKArrayVec3 values) {
    opensimSimulationJNI.MarkersReference_getValuesAtTime(swigCPtr, this, time, SimTKArrayVec3.getCPtr(values), values);
  }

  public void getWeights(State s, SimTKArrayDouble weights) {
    opensimSimulationJNI.MarkersReference_getWeights(swigCPtr, this, State.getCPtr(s), s, SimTKArrayDouble.getCPtr(weights), weights);
  }

  public TimeSeriesTableVec3 getMarkerTable() {
    return new TimeSeriesTableVec3(opensimSimulationJNI.MarkersReference_getMarkerTable(swigCPtr, this), true);
  }

  public double getSamplingFrequency() {
    return opensimSimulationJNI.MarkersReference_getSamplingFrequency(swigCPtr, this);
  }

  public SetMarkerWeights getMarkerWeightSet() {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_getMarkerWeightSet(swigCPtr, this), false);
  }

  public SetMarkerWeights updMarkerWeightSet() {
    return new SetMarkerWeights(opensimSimulationJNI.MarkersReference_updMarkerWeightSet(swigCPtr, this), false);
  }

  public void setMarkerWeightSet(SetMarkerWeights markerWeights) {
    opensimSimulationJNI.MarkersReference_setMarkerWeightSet(swigCPtr, this, SetMarkerWeights.getCPtr(markerWeights), markerWeights);
  }

  public void setDefaultWeight(double weight) {
    opensimSimulationJNI.MarkersReference_setDefaultWeight(swigCPtr, this, weight);
  }

  public long getNumFrames() {
    return opensimSimulationJNI.MarkersReference_getNumFrames(swigCPtr, this);
  }

}
