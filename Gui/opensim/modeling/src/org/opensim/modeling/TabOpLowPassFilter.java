/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Apply a low-pass filter to the trajectory.
 */
public class TabOpLowPassFilter extends TableOperator {
  private transient long swigCPtr;

  public TabOpLowPassFilter(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.TabOpLowPassFilter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(TabOpLowPassFilter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_TabOpLowPassFilter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static TabOpLowPassFilter safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.TabOpLowPassFilter_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new TabOpLowPassFilter(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.TabOpLowPassFilter_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.TabOpLowPassFilter_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.TabOpLowPassFilter_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new TabOpLowPassFilter(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.TabOpLowPassFilter_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_cutoff_frequency(TabOpLowPassFilter source) {
    opensimSimulationJNI.TabOpLowPassFilter_copyProperty_cutoff_frequency(swigCPtr, this, TabOpLowPassFilter.getCPtr(source), source);
  }

  public double get_cutoff_frequency(int i) {
    return opensimSimulationJNI.TabOpLowPassFilter_get_cutoff_frequency__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_cutoff_frequency(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TabOpLowPassFilter_upd_cutoff_frequency__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_cutoff_frequency(int i, double value) {
    opensimSimulationJNI.TabOpLowPassFilter_set_cutoff_frequency__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_cutoff_frequency(double value) {
    return opensimSimulationJNI.TabOpLowPassFilter_append_cutoff_frequency(swigCPtr, this, value);
  }

  public void constructProperty_cutoff_frequency(double initValue) {
    opensimSimulationJNI.TabOpLowPassFilter_constructProperty_cutoff_frequency(swigCPtr, this, initValue);
  }

  public double get_cutoff_frequency() {
    return opensimSimulationJNI.TabOpLowPassFilter_get_cutoff_frequency__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_cutoff_frequency() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TabOpLowPassFilter_upd_cutoff_frequency__SWIG_1(swigCPtr, this), false);
  }

  public void set_cutoff_frequency(double value) {
    opensimSimulationJNI.TabOpLowPassFilter_set_cutoff_frequency__SWIG_1(swigCPtr, this, value);
  }

  public TabOpLowPassFilter() {
    this(opensimSimulationJNI.new_TabOpLowPassFilter__SWIG_0(), true);
  }

  public TabOpLowPassFilter(double cutoffFrequency) {
    this(opensimSimulationJNI.new_TabOpLowPassFilter__SWIG_1(cutoffFrequency), true);
  }

  public void operate(TimeSeriesTable table, Model model) {
    opensimSimulationJNI.TabOpLowPassFilter_operate__SWIG_0(swigCPtr, this, TimeSeriesTable.getCPtr(table), table, Model.getCPtr(model), model);
  }

  public void operate(TimeSeriesTable table) {
    opensimSimulationJNI.TabOpLowPassFilter_operate__SWIG_1(swigCPtr, this, TimeSeriesTable.getCPtr(table), table);
  }

}
