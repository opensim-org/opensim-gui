/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  For DeGrooteFregly2016Muscle components with implicit tendon compliance<br>
 * dynamics, the initial tendon and fiber velocities are determined based the<br>
 * derivative of the linearized muscle-tendon equilibrium equation described<br>
 * in Millard et al. 2013 (Appendix, equation A6).<br>
 * Without this goal, the derivative of normalized tendon force, which is a<br>
 * control variable in implicit tendon compliance dynamics, may undesirably<br>
 * start at a very large value if not constrained or minimized (which it is<br>
 * not by default).<br>
 * This is an endpoint constraint goal by default.<br>
 * Note: This goal only applies to DeGrooteFregly2016Muscles.<br>
 * 
 */
public class MocoInitialVelocityEquilibriumDGFGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoInitialVelocityEquilibriumDGFGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoInitialVelocityEquilibriumDGFGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoInitialVelocityEquilibriumDGFGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoInitialVelocityEquilibriumDGFGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoInitialVelocityEquilibriumDGFGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoInitialVelocityEquilibriumDGFGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoInitialVelocityEquilibriumDGFGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoInitialVelocityEquilibriumDGFGoal() {
    this(opensimMocoJNI.new_MocoInitialVelocityEquilibriumDGFGoal__SWIG_0(), true);
  }

  public MocoInitialVelocityEquilibriumDGFGoal(String name) {
    this(opensimMocoJNI.new_MocoInitialVelocityEquilibriumDGFGoal__SWIG_1(name), true);
  }

}
