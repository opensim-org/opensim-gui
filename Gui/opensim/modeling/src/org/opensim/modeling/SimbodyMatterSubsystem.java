/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class SimbodyMatterSubsystem {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SimbodyMatterSubsystem(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SimbodyMatterSubsystem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimbodyJNI.delete_SimbodyMatterSubsystem(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SimbodyMatterSubsystem() {
    this(opensimSimbodyJNI.new_SimbodyMatterSubsystem(), true);
  }

  public double calcSystemMass(State s) {
    return opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMass(swigCPtr, this, State.getCPtr(s), s);
  }

  public Vec3 calcSystemMassCenterLocationInGround(State s) {
    return new Vec3(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMassCenterLocationInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public MassProperties calcSystemMassPropertiesInGround(State s) {
    return new MassProperties(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMassPropertiesInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public Inertia calcSystemCentralInertiaInGround(State s) {
    return new Inertia(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemCentralInertiaInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public Vec3 calcSystemMassCenterVelocityInGround(State s) {
    return new Vec3(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMassCenterVelocityInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public Vec3 calcSystemMassCenterAccelerationInGround(State s) {
    return new Vec3(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMassCenterAccelerationInGround(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public SpatialVec calcSystemMomentumAboutGroundOrigin(State s) {
    return new SpatialVec(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemMomentumAboutGroundOrigin(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public SpatialVec calcSystemCentralMomentum(State s) {
    return new SpatialVec(opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemCentralMomentum(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public double calcKineticEnergy(State state) {
    return opensimSimbodyJNI.SimbodyMatterSubsystem_calcKineticEnergy(swigCPtr, this, State.getCPtr(state), state);
  }

  public void multiplyBySystemJacobian(State state, Vector u, VectorOfSpatialVec Ju) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyBySystemJacobian(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(u), u, VectorOfSpatialVec.getCPtr(Ju), Ju);
  }

  public void calcBiasForSystemJacobian(State state, VectorOfSpatialVec JDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForSystemJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, VectorOfSpatialVec.getCPtr(JDotu), JDotu);
  }

  public void calcBiasForSystemJacobian(State state, Vector JDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForSystemJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(JDotu), JDotu);
  }

  public void multiplyBySystemJacobianTranspose(State state, VectorOfSpatialVec F_G, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyBySystemJacobianTranspose(swigCPtr, this, State.getCPtr(state), state, VectorOfSpatialVec.getCPtr(F_G), F_G, Vector.getCPtr(f), f);
  }

  public void calcSystemJacobian(State state, MatrixOfSpatialVec J_G) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, MatrixOfSpatialVec.getCPtr(J_G), J_G);
  }

  public void calcSystemJacobian(State state, Matrix J_G) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcSystemJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(J_G), J_G);
  }

  public void multiplyByStationJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Vector u, VectorOfVec3 JSu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByStationJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, Vector.getCPtr(u), u, VectorOfVec3.getCPtr(JSu), JSu);
  }

  public Vec3 multiplyByStationJacobian(State state, int onBodyB, Vec3 stationPInB, Vector u) {
    return new Vec3(opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByStationJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(stationPInB), stationPInB, Vector.getCPtr(u), u), true);
  }

  public void multiplyByStationJacobianTranspose(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, VectorOfVec3 f_GP, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByStationJacobianTranspose__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, VectorOfVec3.getCPtr(f_GP), f_GP, Vector.getCPtr(f), f);
  }

  public void multiplyByStationJacobianTranspose(State state, int onBodyB, Vec3 stationPInB, Vec3 f_GP, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByStationJacobianTranspose__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(stationPInB), stationPInB, Vec3.getCPtr(f_GP), f_GP, Vector.getCPtr(f), f);
  }

  public void calcStationJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, MatrixVec3 JS) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcStationJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, MatrixVec3.getCPtr(JS), JS);
  }

  public void calcStationJacobian(State state, int onBodyB, Vec3 stationPInB, RowVectorOfVec3 JS) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcStationJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(stationPInB), stationPInB, RowVectorOfVec3.getCPtr(JS), JS);
  }

  public void calcStationJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Matrix JS) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcStationJacobian__SWIG_2(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, Matrix.getCPtr(JS), JS);
  }

  public void calcStationJacobian(State state, int onBodyB, Vec3 stationPInB, Matrix JS) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcStationJacobian__SWIG_3(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(stationPInB), stationPInB, Matrix.getCPtr(JS), JS);
  }

  public void calcBiasForStationJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, VectorOfVec3 JSDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForStationJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, VectorOfVec3.getCPtr(JSDotu), JSDotu);
  }

  public void calcBiasForStationJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Vector JSDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForStationJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(stationPInB), stationPInB, Vector.getCPtr(JSDotu), JSDotu);
  }

  public Vec3 calcBiasForStationJacobian(State state, int onBodyB, Vec3 stationPInB) {
    return new Vec3(opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForStationJacobian__SWIG_2(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(stationPInB), stationPInB), true);
  }

  public void multiplyByFrameJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Vector u, VectorOfSpatialVec JFu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByFrameJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, Vector.getCPtr(u), u, VectorOfSpatialVec.getCPtr(JFu), JFu);
  }

  public SpatialVec multiplyByFrameJacobian(State state, int onBodyB, Vec3 originAoInB, Vector u) {
    return new SpatialVec(opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByFrameJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(originAoInB), originAoInB, Vector.getCPtr(u), u), true);
  }

  public void multiplyByFrameJacobianTranspose(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, VectorOfSpatialVec F_GAo, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByFrameJacobianTranspose__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, VectorOfSpatialVec.getCPtr(F_GAo), F_GAo, Vector.getCPtr(f), f);
  }

  public void multiplyByFrameJacobianTranspose(State state, int onBodyB, Vec3 originAoInB, SpatialVec F_GAo, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByFrameJacobianTranspose__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(originAoInB), originAoInB, SpatialVec.getCPtr(F_GAo), F_GAo, Vector.getCPtr(f), f);
  }

  public void calcFrameJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, MatrixOfSpatialVec JF) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcFrameJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, MatrixOfSpatialVec.getCPtr(JF), JF);
  }

  public void calcFrameJacobian(State state, int onBodyB, Vec3 originAoInB, SWIGTYPE_p_SimTK__RowVector_T_SimTK__VecT_2_SimTK__Vec3_1_t_t JF) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcFrameJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(originAoInB), originAoInB, SWIGTYPE_p_SimTK__RowVector_T_SimTK__VecT_2_SimTK__Vec3_1_t_t.getCPtr(JF));
  }

  public void calcFrameJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Matrix JF) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcFrameJacobian__SWIG_2(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, Matrix.getCPtr(JF), JF);
  }

  public void calcFrameJacobian(State state, int onBodyB, Vec3 originAoInB, Matrix JF) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcFrameJacobian__SWIG_3(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(originAoInB), originAoInB, Matrix.getCPtr(JF), JF);
  }

  public void calcBiasForFrameJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, VectorOfSpatialVec JFDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForFrameJacobian__SWIG_0(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, VectorOfSpatialVec.getCPtr(JFDotu), JFDotu);
  }

  public void calcBiasForFrameJacobian(State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Vector JFDotu) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForFrameJacobian__SWIG_1(swigCPtr, this, State.getCPtr(state), state, SimTKArrayMobilizedBodyIndex.getCPtr(onBodyB), onBodyB, SimTKArrayVec3.getCPtr(originAoInB), originAoInB, Vector.getCPtr(JFDotu), JFDotu);
  }

  public SpatialVec calcBiasForFrameJacobian(State state, int onBodyB, Vec3 originAoInB) {
    return new SpatialVec(opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForFrameJacobian__SWIG_2(swigCPtr, this, State.getCPtr(state), state, onBodyB, Vec3.getCPtr(originAoInB), originAoInB), true);
  }

  public void multiplyByM(State state, Vector a, Vector Ma) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByM(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(a), a, Vector.getCPtr(Ma), Ma);
  }

  public void multiplyByMInv(State state, Vector v, Vector MinvV) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByMInv(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(v), v, Vector.getCPtr(MinvV), MinvV);
  }

  public void calcM(State arg0, Matrix M) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcM(swigCPtr, this, State.getCPtr(arg0), arg0, Matrix.getCPtr(M), M);
  }

  public void calcMInv(State arg0, Matrix MInv) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcMInv(swigCPtr, this, State.getCPtr(arg0), arg0, Matrix.getCPtr(MInv), MInv);
  }

  public void calcProjectedMInv(State s, Matrix GMInvGt) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcProjectedMInv(swigCPtr, this, State.getCPtr(s), s, Matrix.getCPtr(GMInvGt), GMInvGt);
  }

  public void solveForConstraintImpulses(State state, Vector deltaV, Vector impulse) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_solveForConstraintImpulses(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(deltaV), deltaV, Vector.getCPtr(impulse), impulse);
  }

  public void multiplyByG(State state, Vector ulike, Vector Gulike) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByG__SWIG_0(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(ulike), ulike, Vector.getCPtr(Gulike), Gulike);
  }

  public void multiplyByG(State state, Vector ulike, Vector bias, Vector Gulike) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByG__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(ulike), ulike, Vector.getCPtr(bias), bias, Vector.getCPtr(Gulike), Gulike);
  }

  public void calcBiasForMultiplyByG(State state, Vector bias) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForMultiplyByG(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(bias), bias);
  }

  public void calcG(State state, Matrix G) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcG(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(G), G);
  }

  public void calcBiasForAccelerationConstraints(State state, Vector bias) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForAccelerationConstraints(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(bias), bias);
  }

  public void multiplyByGTranspose(State state, Vector lambda, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByGTranspose(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(lambda), lambda, Vector.getCPtr(f), f);
  }

  public void calcGTranspose(State arg0, Matrix Gt) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcGTranspose(swigCPtr, this, State.getCPtr(arg0), arg0, Matrix.getCPtr(Gt), Gt);
  }

  public void multiplyByPq(State state, Vector qlike, Vector PqXqlike) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByPq__SWIG_0(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(qlike), qlike, Vector.getCPtr(PqXqlike), PqXqlike);
  }

  public void multiplyByPq(State state, Vector qlike, Vector biasp, Vector PqXqlike) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByPq__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(qlike), qlike, Vector.getCPtr(biasp), biasp, Vector.getCPtr(PqXqlike), PqXqlike);
  }

  public void calcBiasForMultiplyByPq(State state, Vector biasp) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBiasForMultiplyByPq(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(biasp), biasp);
  }

  public void calcPq(State state, Matrix Pq) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcPq(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(Pq), Pq);
  }

  public void multiplyByPqTranspose(State state, Vector lambdap, Vector f) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByPqTranspose(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(lambdap), lambdap, Vector.getCPtr(f), f);
  }

  public void calcPqTranspose(State state, Matrix Pqt) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcPqTranspose(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(Pqt), Pqt);
  }

  public void calcP(State state, Matrix P) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcP(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(P), P);
  }

  public void calcPt(State state, Matrix Pt) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcPt(swigCPtr, this, State.getCPtr(state), state, Matrix.getCPtr(Pt), Pt);
  }

  public void multiplyByN(State s, boolean transpose, Vector in, Vector out) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByN(swigCPtr, this, State.getCPtr(s), s, transpose, Vector.getCPtr(in), in, Vector.getCPtr(out), out);
  }

  public void multiplyByNInv(State s, boolean transpose, Vector in, Vector out) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByNInv(swigCPtr, this, State.getCPtr(s), s, transpose, Vector.getCPtr(in), in, Vector.getCPtr(out), out);
  }

  public void multiplyByNDot(State s, boolean transpose, Vector in, Vector out) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_multiplyByNDot(swigCPtr, this, State.getCPtr(s), s, transpose, Vector.getCPtr(in), in, Vector.getCPtr(out), out);
  }

  public void calcAcceleration(State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector udot, VectorOfSpatialVec A_GB) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcAcceleration(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(appliedMobilityForces), appliedMobilityForces, VectorOfSpatialVec.getCPtr(appliedBodyForces), appliedBodyForces, Vector.getCPtr(udot), udot, VectorOfSpatialVec.getCPtr(A_GB), A_GB);
  }

  public void calcAccelerationIgnoringConstraints(State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector udot, VectorOfSpatialVec A_GB) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcAccelerationIgnoringConstraints(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(appliedMobilityForces), appliedMobilityForces, VectorOfSpatialVec.getCPtr(appliedBodyForces), appliedBodyForces, Vector.getCPtr(udot), udot, VectorOfSpatialVec.getCPtr(A_GB), A_GB);
  }

  public void calcResidualForceIgnoringConstraints(State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector knownUdot, Vector residualMobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcResidualForceIgnoringConstraints(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(appliedMobilityForces), appliedMobilityForces, VectorOfSpatialVec.getCPtr(appliedBodyForces), appliedBodyForces, Vector.getCPtr(knownUdot), knownUdot, Vector.getCPtr(residualMobilityForces), residualMobilityForces);
  }

  public void calcResidualForce(State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector knownUdot, Vector knownLambda, Vector residualMobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcResidualForce(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(appliedMobilityForces), appliedMobilityForces, VectorOfSpatialVec.getCPtr(appliedBodyForces), appliedBodyForces, Vector.getCPtr(knownUdot), knownUdot, Vector.getCPtr(knownLambda), knownLambda, Vector.getCPtr(residualMobilityForces), residualMobilityForces);
  }

  public void calcBodyAccelerationFromUDot(State state, Vector knownUDot, VectorOfSpatialVec A_GB) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcBodyAccelerationFromUDot(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(knownUDot), knownUDot, VectorOfSpatialVec.getCPtr(A_GB), A_GB);
  }

  public void calcConstraintForcesFromMultipliers(State state, Vector multipliers, VectorOfSpatialVec bodyForcesInG, Vector mobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcConstraintForcesFromMultipliers(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(multipliers), multipliers, VectorOfSpatialVec.getCPtr(bodyForcesInG), bodyForcesInG, Vector.getCPtr(mobilityForces), mobilityForces);
  }

  public void calcMobilizerReactionForces(State state, VectorOfSpatialVec forcesAtMInG) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcMobilizerReactionForces(swigCPtr, this, State.getCPtr(state), state, VectorOfSpatialVec.getCPtr(forcesAtMInG), forcesAtMInG);
  }

  public Vector getMotionMultipliers(State state) {
    return new Vector(opensimSimbodyJNI.SimbodyMatterSubsystem_getMotionMultipliers(swigCPtr, this, State.getCPtr(state), state), false);
  }

  public Vector calcMotionErrors(State state, Stage stage) {
    return new Vector(opensimSimbodyJNI.SimbodyMatterSubsystem_calcMotionErrors(swigCPtr, this, State.getCPtr(state), state, Stage.getCPtr(stage), stage), true);
  }

  public void findMotionForces(State state, Vector mobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_findMotionForces(swigCPtr, this, State.getCPtr(state), state, Vector.getCPtr(mobilityForces), mobilityForces);
  }

  public Vector getConstraintMultipliers(State state) {
    return new Vector(opensimSimbodyJNI.SimbodyMatterSubsystem_getConstraintMultipliers(swigCPtr, this, State.getCPtr(state), state), false);
  }

  public void findConstraintForces(State state, VectorOfSpatialVec bodyForcesInG, Vector mobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_findConstraintForces(swigCPtr, this, State.getCPtr(state), state, VectorOfSpatialVec.getCPtr(bodyForcesInG), bodyForcesInG, Vector.getCPtr(mobilityForces), mobilityForces);
  }

  public double calcMotionPower(State state) {
    return opensimSimbodyJNI.SimbodyMatterSubsystem_calcMotionPower(swigCPtr, this, State.getCPtr(state), state);
  }

  public double calcConstraintPower(State state) {
    return opensimSimbodyJNI.SimbodyMatterSubsystem_calcConstraintPower(swigCPtr, this, State.getCPtr(state), state);
  }

  public void calcTreeEquivalentMobilityForces(State arg0, VectorOfSpatialVec bodyForces, Vector mobilityForces) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcTreeEquivalentMobilityForces(swigCPtr, this, State.getCPtr(arg0), arg0, VectorOfSpatialVec.getCPtr(bodyForces), bodyForces, Vector.getCPtr(mobilityForces), mobilityForces);
  }

  public void calcQDot(State s, Vector u, Vector qdot) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcQDot(swigCPtr, this, State.getCPtr(s), s, Vector.getCPtr(u), u, Vector.getCPtr(qdot), qdot);
  }

  public void calcQDotDot(State s, Vector udot, Vector qdotdot) {
    opensimSimbodyJNI.SimbodyMatterSubsystem_calcQDotDot(swigCPtr, this, State.getCPtr(s), s, Vector.getCPtr(udot), udot, Vector.getCPtr(qdotdot), qdotdot);
  }

  public static boolean isInstanceOf(SWIGTYPE_p_Subsystem arg0) {
    return opensimSimbodyJNI.SimbodyMatterSubsystem_isInstanceOf(SWIGTYPE_p_Subsystem.getCPtr(arg0));
  }

  public static SimbodyMatterSubsystem downcast(SWIGTYPE_p_Subsystem arg0) {
    return new SimbodyMatterSubsystem(opensimSimbodyJNI.SimbodyMatterSubsystem_downcast(SWIGTYPE_p_Subsystem.getCPtr(arg0)), false);
  }

  public static SimbodyMatterSubsystem updDowncast(SWIGTYPE_p_Subsystem arg0) {
    return new SimbodyMatterSubsystem(opensimSimbodyJNI.SimbodyMatterSubsystem_updDowncast(SWIGTYPE_p_Subsystem.getCPtr(arg0)), false);
  }

  public SWIGTYPE_p_SimbodyMatterSubsystemRep getRep() {
    return new SWIGTYPE_p_SimbodyMatterSubsystemRep(opensimSimbodyJNI.SimbodyMatterSubsystem_getRep(swigCPtr, this), false);
  }

  public SWIGTYPE_p_SimbodyMatterSubsystemRep updRep() {
    return new SWIGTYPE_p_SimbodyMatterSubsystemRep(opensimSimbodyJNI.SimbodyMatterSubsystem_updRep(swigCPtr, this), false);
  }

}
