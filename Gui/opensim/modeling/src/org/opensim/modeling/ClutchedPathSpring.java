/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * The ClutchedPathSpring is an actuator that has passive path spring behavior<br>
 * only when the clutch is engaged. The clutch is engaged by a control signal <br>
 * of 1 and is off for a control signal of 0. Off means the spring is not <br>
 * engaged and the path is free to change length with the motion of the bodies <br>
 * it is connected to. The tension produced by the spring is proportional<br>
 * to the stretch (z) from the instant that the clutch is engaged.<br>
 * <br>
 * The spring tension = x*(K*z)*(1+D*Ldot), where<br>
 *      - x is the control signal to the actuator<br>
 *      - z is the stretch in the spring<br>
 *      - Ldot is the lengthening speed of the actuator<br>
 *      - K is the spring's linear stiffness (N/m)<br>
 *      - D is the spring's dissipation factor<br>
 * <br>
 * The ClutchedPathSpring maintains the "stretch", z, as an internal state with<br>
 * the following dynamics:<br>
 * <br>
 * <table border="0"><br>
 *      <tr><td>dz/dt = </td><td>Ldot, when x&gt;0 (clutch is engaged)</td></tr><br>
 *      <tr><td></td><td> -(1/Tau)*z, (decay to zero), otherwise</td></tr><br>
 * </table><br>
 * <br>
 * Note that the control signal, x, is clamped to (0,1).<br>
 * <br>
 * @author Ajay Seth
 */
public class ClutchedPathSpring extends PathActuator {
  private transient long swigCPtr;

  public ClutchedPathSpring(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ClutchedPathSpring obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_ClutchedPathSpring(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ClutchedPathSpring safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ClutchedPathSpring(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ClutchedPathSpring(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_stiffness(ClutchedPathSpring source) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_copyProperty_stiffness(swigCPtr, this, ClutchedPathSpring.getCPtr(source), source);
  }

  public double get_stiffness(int i) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_stiffness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_stiffness(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_stiffness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_stiffness(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_stiffness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_stiffness(double value) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_append_stiffness(swigCPtr, this, value);
  }

  public void constructProperty_stiffness(double initValue) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_constructProperty_stiffness(swigCPtr, this, initValue);
  }

  public double get_stiffness() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_stiffness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_stiffness() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_stiffness__SWIG_1(swigCPtr, this), false);
  }

  public void set_stiffness(double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_stiffness__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_dissipation(ClutchedPathSpring source) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_copyProperty_dissipation(swigCPtr, this, ClutchedPathSpring.getCPtr(source), source);
  }

  public double get_dissipation(int i) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_dissipation__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_dissipation(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_dissipation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_dissipation(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_dissipation__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_dissipation(double value) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_append_dissipation(swigCPtr, this, value);
  }

  public void constructProperty_dissipation(double initValue) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_constructProperty_dissipation(swigCPtr, this, initValue);
  }

  public double get_dissipation() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_dissipation__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_dissipation() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_dissipation__SWIG_1(swigCPtr, this), false);
  }

  public void set_dissipation(double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_dissipation__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_relaxation_time_constant(ClutchedPathSpring source) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_copyProperty_relaxation_time_constant(swigCPtr, this, ClutchedPathSpring.getCPtr(source), source);
  }

  public double get_relaxation_time_constant(int i) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_relaxation_time_constant__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_relaxation_time_constant(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_relaxation_time_constant__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_relaxation_time_constant(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_relaxation_time_constant__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_relaxation_time_constant(double value) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_append_relaxation_time_constant(swigCPtr, this, value);
  }

  public void constructProperty_relaxation_time_constant(double initValue) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_constructProperty_relaxation_time_constant(swigCPtr, this, initValue);
  }

  public double get_relaxation_time_constant() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_relaxation_time_constant__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_relaxation_time_constant() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_relaxation_time_constant__SWIG_1(swigCPtr, this), false);
  }

  public void set_relaxation_time_constant(double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_relaxation_time_constant__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_initial_stretch(ClutchedPathSpring source) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_copyProperty_initial_stretch(swigCPtr, this, ClutchedPathSpring.getCPtr(source), source);
  }

  public double get_initial_stretch(int i) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_initial_stretch__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_initial_stretch(int i) {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_initial_stretch__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_initial_stretch(int i, double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_initial_stretch__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_initial_stretch(double value) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_append_initial_stretch(swigCPtr, this, value);
  }

  public void constructProperty_initial_stretch(double initValue) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_constructProperty_initial_stretch(swigCPtr, this, initValue);
  }

  public double get_initial_stretch() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_get_initial_stretch__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_initial_stretch() {
    return new SWIGTYPE_p_double(opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_upd_initial_stretch__SWIG_1(swigCPtr, this), false);
  }

  public void set_initial_stretch(double value) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_set_initial_stretch__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Construct a ClutchedPathSpring with default parameters. Users should<br>
   *         note that the default values for stiffness and dissipation are `NaN`<br>
   *         so they must be set before simulating. 
   */
  public ClutchedPathSpring() {
    this(opensimActuatorsAnalysesToolsJNI.new_ClutchedPathSpring__SWIG_0(), true);
  }

  /**
   *  Convenience constructor with ClutchedPathSpring parameters<br>
   * @param name          the name of a %ClutchedPathSpring instance<br>
   * @param stiffness     the spring stiffness (K) in N/m<br>
   * @param dissipation   the dissipation factor (D) in s/m <br>
   * @param relaxationTau the spring relaxation time constant (Tau) in s <br>
   * @param stretch0      the initial stretch of the spring in m 
   */
  public ClutchedPathSpring(String name, double stiffness, double dissipation, double relaxationTau, double stretch0) {
    this(opensimActuatorsAnalysesToolsJNI.new_ClutchedPathSpring__SWIG_1(name, stiffness, dissipation, relaxationTau, stretch0), true);
  }

  /**
   *  Convenience constructor with ClutchedPathSpring parameters<br>
   * @param name          the name of a %ClutchedPathSpring instance<br>
   * @param stiffness     the spring stiffness (K) in N/m<br>
   * @param dissipation   the dissipation factor (D) in s/m <br>
   * @param relaxationTau the spring relaxation time constant (Tau) in s <br>
   * 
   */
  public ClutchedPathSpring(String name, double stiffness, double dissipation, double relaxationTau) {
    this(opensimActuatorsAnalysesToolsJNI.new_ClutchedPathSpring__SWIG_2(name, stiffness, dissipation, relaxationTau), true);
  }

  /**
   *  Spring stiffness in N/m when clutch is engaged. 
   */
  public double getStiffness() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getStiffness(swigCPtr, this);
  }

  public void setStiffness(double stiffness) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_setStiffness(swigCPtr, this, stiffness);
  }

  /**
   *  Spring dissipation factor in s/m when clutch is engaged. 
   */
  public double getDissipation() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getDissipation(swigCPtr, this);
  }

  public void setDissipation(double dissipation) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_setDissipation(swigCPtr, this, dissipation);
  }

  /**
   *  Initial spring stretch in m. 
   */
  public double getInitialStretch() {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getInitialStretch(swigCPtr, this);
  }

  public void setInitialStretch(double stretch0) {
    opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_setInitialStretch(swigCPtr, this, stretch0);
  }

  /**
   *  The stretch in the PathSpring. The value of the stretch <br>
   *         can only be obtained after the system has been realized to<br>
   *         Stage::Position
   */
  public double getStretch(State s) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getStretch(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   *  The tension generated by the PathSpring. The value of the tension <br>
   *         can only be obtained after the system has been realized to<br>
   *         Stage::Dynamics
   */
  public double getTension(State s) {
    return opensimActuatorsAnalysesToolsJNI.ClutchedPathSpring_getTension(swigCPtr, this, State.getCPtr(s), s);
  }

}
