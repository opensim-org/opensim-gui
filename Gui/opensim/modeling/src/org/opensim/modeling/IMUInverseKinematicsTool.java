/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class IMUInverseKinematicsTool extends InverseKinematicsToolBase {
  private transient long swigCPtr;

  public IMUInverseKinematicsTool(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(IMUInverseKinematicsTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_IMUInverseKinematicsTool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static IMUInverseKinematicsTool safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new IMUInverseKinematicsTool(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new IMUInverseKinematicsTool(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_orientations_file(IMUInverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_copyProperty_orientations_file(swigCPtr, this, IMUInverseKinematicsTool.getCPtr(source), source);
  }

  public String get_orientations_file(int i) {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_get_orientations_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_orientations_file(int i) {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_upd_orientations_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_orientations_file(int i, String value) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_set_orientations_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_orientations_file(String value) {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_append_orientations_file(swigCPtr, this, value);
  }

  public void constructProperty_orientations_file(String initValue) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_constructProperty_orientations_file(swigCPtr, this, initValue);
  }

  public String get_orientations_file() {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_get_orientations_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_orientations_file() {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_upd_orientations_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_orientations_file(String value) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_set_orientations_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_sensor_to_opensim_rotations(IMUInverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_copyProperty_sensor_to_opensim_rotations(swigCPtr, this, IMUInverseKinematicsTool.getCPtr(source), source);
  }

  public Vec3 get_sensor_to_opensim_rotations(int i) {
    return new Vec3(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_get_sensor_to_opensim_rotations__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_sensor_to_opensim_rotations(int i) {
    return new Vec3(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_upd_sensor_to_opensim_rotations__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_sensor_to_opensim_rotations(int i, Vec3 value) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_set_sensor_to_opensim_rotations__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_sensor_to_opensim_rotations(Vec3 value) {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_append_sensor_to_opensim_rotations(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_sensor_to_opensim_rotations(Vec3 initValue) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_constructProperty_sensor_to_opensim_rotations(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_sensor_to_opensim_rotations() {
    return new Vec3(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_get_sensor_to_opensim_rotations__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_sensor_to_opensim_rotations() {
    return new Vec3(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_upd_sensor_to_opensim_rotations__SWIG_1(swigCPtr, this), false);
  }

  public void set_sensor_to_opensim_rotations(Vec3 value) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_set_sensor_to_opensim_rotations__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public IMUInverseKinematicsTool() {
    this(opensimActuatorsAnalysesToolsJNI.new_IMUInverseKinematicsTool__SWIG_0(), true);
  }

  public IMUInverseKinematicsTool(String setupFile) {
    this(opensimActuatorsAnalysesToolsJNI.new_IMUInverseKinematicsTool__SWIG_1(setupFile), true);
  }

  public boolean run(boolean visualizeResults) throws java.io.IOException {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_run__SWIG_0(swigCPtr, this, visualizeResults);
  }

  public boolean run() throws java.io.IOException {
    return opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_run__SWIG_1(swigCPtr, this);
  }

  public static TimeSeriesTableVec3 loadMarkersFile(String markerFile) {
    return new TimeSeriesTableVec3(opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_loadMarkersFile(markerFile), true);
  }

  public void runInverseKinematicsWithOrientationsFromFile(Model model, String quaternionStoFileName, boolean visualizeResults) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_runInverseKinematicsWithOrientationsFromFile__SWIG_0(swigCPtr, this, Model.getCPtr(model), model, quaternionStoFileName, visualizeResults);
  }

  public void runInverseKinematicsWithOrientationsFromFile(Model model, String quaternionStoFileName) {
    opensimActuatorsAnalysesToolsJNI.IMUInverseKinematicsTool_runInverseKinematicsWithOrientationsFromFile__SWIG_1(swigCPtr, this, Model.getCPtr(model), model, quaternionStoFileName);
  }

}
