/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A multivariate polynomial function.<br>
 * <br>
 * This implementation allows computation of first-order derivatives only.<br>
 * <br>
 * For a third-order polynomial that is a function of three components <br>
 * (X, Y, Z), the order is a follows:<br>
 * <br>
 * <pre><br>
 * Index | X  Y  Z<br>
 * 0     | 0  0  0<br>
 * 1     | 0  0  1<br>
 * 2     | 0  0  2<br>
 * 3     | 0  0  3<br>
 * 4     | 0  1  0<br>
 * 5     | 0  1  1<br>
 * 6     | 0  1  2<br>
 * 7     | 0  2  0<br>
 * 8     | 0  2  1<br>
 * 9     | 0  3  0<br>
 * 10    | 1  0  0<br>
 * 11    | 1  0  1<br>
 * 12    | 1  0  2<br>
 * 13    | 1  1  0<br>
 * 14    | 1  1  1<br>
 * 15    | 1  2  0<br>
 * 16    | 2  0  0<br>
 * 17    | 2  0  1<br>
 * 18    | 2  1  0<br>
 * 19    | 3  0  0<br>
 * </pre><br>
 * Assuming c6 the index 6 coefficient, the corresponding term is Y Z^2.<br>
 * <br>
 * <br>
 * <br>
 * <br>
 * <br>
 * Note: The order of coefficients for this class is the opposite from the<br>
 *       order used in the univariate PolynomialFunction.
 */
public class MultivariatePolynomialFunction extends Function {
  private transient long swigCPtr;

  public MultivariatePolynomialFunction(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.MultivariatePolynomialFunction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MultivariatePolynomialFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(MultivariatePolynomialFunction obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_MultivariatePolynomialFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MultivariatePolynomialFunction safeDownCast(OpenSimObject obj) {
    long cPtr = opensimCommonJNI.MultivariatePolynomialFunction_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MultivariatePolynomialFunction(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimCommonJNI.MultivariatePolynomialFunction_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimCommonJNI.MultivariatePolynomialFunction_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimCommonJNI.MultivariatePolynomialFunction_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MultivariatePolynomialFunction(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimCommonJNI.MultivariatePolynomialFunction_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_coefficients(MultivariatePolynomialFunction source) {
    opensimCommonJNI.MultivariatePolynomialFunction_copyProperty_coefficients(swigCPtr, this, MultivariatePolynomialFunction.getCPtr(source), source);
  }

  public Vector get_coefficients(int i) {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_get_coefficients__SWIG_0(swigCPtr, this, i), false);
  }

  public Vector upd_coefficients(int i) {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_upd_coefficients__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_coefficients(int i, Vector value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_coefficients__SWIG_0(swigCPtr, this, i, Vector.getCPtr(value), value);
  }

  public int append_coefficients(Vector value) {
    return opensimCommonJNI.MultivariatePolynomialFunction_append_coefficients(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public void constructProperty_coefficients(Vector initValue) {
    opensimCommonJNI.MultivariatePolynomialFunction_constructProperty_coefficients(swigCPtr, this, Vector.getCPtr(initValue), initValue);
  }

  public Vector get_coefficients() {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_get_coefficients__SWIG_1(swigCPtr, this), false);
  }

  public Vector upd_coefficients() {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_upd_coefficients__SWIG_1(swigCPtr, this), false);
  }

  public void set_coefficients(Vector value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_coefficients__SWIG_1(swigCPtr, this, Vector.getCPtr(value), value);
  }

  public void copyProperty_dimension(MultivariatePolynomialFunction source) {
    opensimCommonJNI.MultivariatePolynomialFunction_copyProperty_dimension(swigCPtr, this, MultivariatePolynomialFunction.getCPtr(source), source);
  }

  public int get_dimension(int i) {
    return opensimCommonJNI.MultivariatePolynomialFunction_get_dimension__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_dimension(int i) {
    return new SWIGTYPE_p_int(opensimCommonJNI.MultivariatePolynomialFunction_upd_dimension__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_dimension(int i, int value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_dimension__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_dimension(int value) {
    return opensimCommonJNI.MultivariatePolynomialFunction_append_dimension(swigCPtr, this, value);
  }

  public void constructProperty_dimension(int initValue) {
    opensimCommonJNI.MultivariatePolynomialFunction_constructProperty_dimension(swigCPtr, this, initValue);
  }

  public int get_dimension() {
    return opensimCommonJNI.MultivariatePolynomialFunction_get_dimension__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_dimension() {
    return new SWIGTYPE_p_int(opensimCommonJNI.MultivariatePolynomialFunction_upd_dimension__SWIG_1(swigCPtr, this), false);
  }

  public void set_dimension(int value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_dimension__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_order(MultivariatePolynomialFunction source) {
    opensimCommonJNI.MultivariatePolynomialFunction_copyProperty_order(swigCPtr, this, MultivariatePolynomialFunction.getCPtr(source), source);
  }

  public int get_order(int i) {
    return opensimCommonJNI.MultivariatePolynomialFunction_get_order__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_order(int i) {
    return new SWIGTYPE_p_int(opensimCommonJNI.MultivariatePolynomialFunction_upd_order__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_order(int i, int value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_order__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_order(int value) {
    return opensimCommonJNI.MultivariatePolynomialFunction_append_order(swigCPtr, this, value);
  }

  public void constructProperty_order(int initValue) {
    opensimCommonJNI.MultivariatePolynomialFunction_constructProperty_order(swigCPtr, this, initValue);
  }

  public int get_order() {
    return opensimCommonJNI.MultivariatePolynomialFunction_get_order__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_order() {
    return new SWIGTYPE_p_int(opensimCommonJNI.MultivariatePolynomialFunction_upd_order__SWIG_1(swigCPtr, this), false);
  }

  public void set_order(int value) {
    opensimCommonJNI.MultivariatePolynomialFunction_set_order__SWIG_1(swigCPtr, this, value);
  }

  public MultivariatePolynomialFunction() {
    this(opensimCommonJNI.new_MultivariatePolynomialFunction__SWIG_0(), true);
  }

  public MultivariatePolynomialFunction(Vector coefficients, int dimension, int order) {
    this(opensimCommonJNI.new_MultivariatePolynomialFunction__SWIG_1(Vector.getCPtr(coefficients), coefficients, dimension, order), true);
  }

  /**
   * The vector of coefficients for the multivariate polynomial.
   */
  public void setCoefficients(Vector coefficients) {
    opensimCommonJNI.MultivariatePolynomialFunction_setCoefficients(swigCPtr, this, Vector.getCPtr(coefficients), coefficients);
  }

  /**
   *  
   */
  public Vector getCoefficients() {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_getCoefficients(swigCPtr, this), false);
  }

  /**
   * The number of independent variables in the multivariate polynomial.
   */
  public void setDimension(int dimension) {
    opensimCommonJNI.MultivariatePolynomialFunction_setDimension(swigCPtr, this, dimension);
  }

  /**
   *  
   */
  public int getDimension() {
    return opensimCommonJNI.MultivariatePolynomialFunction_getDimension(swigCPtr, this);
  }

  /**
   * The order (i.e., the largest sum of exponents in a single term) of the<br>
   * multivariate polynomial.
   */
  public void setOrder(int order) {
    opensimCommonJNI.MultivariatePolynomialFunction_setOrder(swigCPtr, this, order);
  }

  /**
   *  
   */
  public int getOrder() {
    return opensimCommonJNI.MultivariatePolynomialFunction_getOrder(swigCPtr, this);
  }

  /**
   * Return a pointer to a SimTK::Function object that implements this<br>
   * function.
   */
  public SWIGTYPE_p_SimTK__Function createSimTKFunction() {
    long cPtr = opensimCommonJNI.MultivariatePolynomialFunction_createSimTKFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SimTK__Function(cPtr, false);
  }

  /**
   * Get a vector of the terms in the polynomial function.
   */
  public Vector getTermValues(Vector x) {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_getTermValues(swigCPtr, this, Vector.getCPtr(x), x), true);
  }

  /**
   * Get a vector of the derivatives of the terms in the polynomial function.
   */
  public Vector getTermDerivatives(StdVectorInt derivComponent, Vector x) {
    return new Vector(opensimCommonJNI.MultivariatePolynomialFunction_getTermDerivatives(swigCPtr, this, StdVectorInt.getCPtr(derivComponent), derivComponent, Vector.getCPtr(x), x), true);
  }

  /**
   * Generate a new MultivariatePolynomialFunction representing the first<br>
   * derivative of the current function with respect to the specified<br>
   * component. <br>
   * <br>
   * Therefore, the resulting function with have the same dimension<br>
   * as the original function, but the order will be reduced by one. The <br>
   * coefficients of the derivative function can be negated using the <br>
   * `negateCoefficients` argument. This may be useful, for example, if the <br>
   * current function represents the length of a muscle path and the <br>
   * derivative is needed for computing muscle moment arms.<br>
   * <br>
   * @param derivComponent The component with respect to which the derivative<br>
   *        is taken.<br>
   * @param negateCoefficients If true, the coefficients of the derivative<br>
   *        function will be negated.
   */
  public MultivariatePolynomialFunction generateDerivativeFunction(int derivComponent, boolean negateCoefficients) {
    return new MultivariatePolynomialFunction(opensimCommonJNI.MultivariatePolynomialFunction_generateDerivativeFunction__SWIG_0(swigCPtr, this, derivComponent, negateCoefficients), true);
  }

  /**
   * Generate a new MultivariatePolynomialFunction representing the first<br>
   * derivative of the current function with respect to the specified<br>
   * component. <br>
   * <br>
   * Therefore, the resulting function with have the same dimension<br>
   * as the original function, but the order will be reduced by one. The <br>
   * coefficients of the derivative function can be negated using the <br>
   * `negateCoefficients` argument. This may be useful, for example, if the <br>
   * current function represents the length of a muscle path and the <br>
   * derivative is needed for computing muscle moment arms.<br>
   * <br>
   * @param derivComponent The component with respect to which the derivative<br>
   *        is taken.<br>
   * 
   */
  public MultivariatePolynomialFunction generateDerivativeFunction(int derivComponent) {
    return new MultivariatePolynomialFunction(opensimCommonJNI.MultivariatePolynomialFunction_generateDerivativeFunction__SWIG_1(swigCPtr, this, derivComponent), true);
  }

  /**
   * Generate a new MultivariatePolynomialFunction representing the derivative<br>
   * of the current function with respect to an independent variable not <br>
   * included in the current function. <br>
   * <br>
   * If, for example, differentiating with respect to time, the resulting <br>
   * function will have the form:<br>
   * <br>
   *  
  \dot f = \frac{df}{dt} = \sum_i \frac{\partial f}{\partial q_i} \dot q_i = P \dot q
  <br>
   * <br>
   * where   is the current function, \f$q_i are the independent<br>
   * variables of the current function, and  \dot q_i are the derivative<br>
   * of the independent variables with respect to time. The matrix   is
  a 1 x \f$n_q "partial velocity matrix" with entries <br>
   *   p_i = \frac{\partial f}{\partial q_i} (see Sherman et al. (2013), <br>
   * "What is a Moment Arm? Calculating Muscle Effectiveness in Biomechanical <br>
   * Models Using Generalized Coordinates").<br>
   * <br>
   * While this example and the method name suggest that the derivative is<br>
   * with respect to time, the method can be used to generate the derivative<br>
   * with respect to any independent variable not included in the current<br>
   * function. <br>
   * <br>
   * Since the resulting function requires the independent variable<br>
   * derivatives as an input, the dimension of the resulting function will be<br>
   * twice the dimension of the current function. The order of the resulting<br>
   * function will be the same as the order of the current function.
   */
  public MultivariatePolynomialFunction generatePartialVelocityFunction() {
    return new MultivariatePolynomialFunction(opensimCommonJNI.MultivariatePolynomialFunction_generatePartialVelocityFunction(swigCPtr, this), true);
  }

}
