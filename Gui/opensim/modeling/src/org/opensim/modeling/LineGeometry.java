/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * LineGeometry is a utility class used to abstract a line segment.<br>
 * It is used by muscle segments so that it's as small and useful as possible.<br>
 * <br>
 * NOTE: LineGeometry assumes its Frame is Ground!<br>
 * TODO make LineGeometry draw between actual Points!
 */
public class LineGeometry extends Geometry {
  private transient long swigCPtr;

  public LineGeometry(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.LineGeometry_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(LineGeometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_LineGeometry(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static LineGeometry safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.LineGeometry_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new LineGeometry(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.LineGeometry_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.LineGeometry_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.LineGeometry_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new LineGeometry(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.LineGeometry_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_start_point(LineGeometry source) {
    opensimSimulationJNI.LineGeometry_copyProperty_start_point(swigCPtr, this, LineGeometry.getCPtr(source), source);
  }

  public Vec3 get_start_point(int i) {
    return new Vec3(opensimSimulationJNI.LineGeometry_get_start_point__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_start_point(int i) {
    return new Vec3(opensimSimulationJNI.LineGeometry_upd_start_point__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_start_point(int i, Vec3 value) {
    opensimSimulationJNI.LineGeometry_set_start_point__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_start_point(Vec3 value) {
    return opensimSimulationJNI.LineGeometry_append_start_point(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_start_point(Vec3 initValue) {
    opensimSimulationJNI.LineGeometry_constructProperty_start_point(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_start_point() {
    return new Vec3(opensimSimulationJNI.LineGeometry_get_start_point__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_start_point() {
    return new Vec3(opensimSimulationJNI.LineGeometry_upd_start_point__SWIG_1(swigCPtr, this), false);
  }

  public void set_start_point(Vec3 value) {
    opensimSimulationJNI.LineGeometry_set_start_point__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void copyProperty_end_point(LineGeometry source) {
    opensimSimulationJNI.LineGeometry_copyProperty_end_point(swigCPtr, this, LineGeometry.getCPtr(source), source);
  }

  public Vec3 get_end_point(int i) {
    return new Vec3(opensimSimulationJNI.LineGeometry_get_end_point__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_end_point(int i) {
    return new Vec3(opensimSimulationJNI.LineGeometry_upd_end_point__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_end_point(int i, Vec3 value) {
    opensimSimulationJNI.LineGeometry_set_end_point__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_end_point(Vec3 value) {
    return opensimSimulationJNI.LineGeometry_append_end_point(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_end_point(Vec3 initValue) {
    opensimSimulationJNI.LineGeometry_constructProperty_end_point(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_end_point() {
    return new Vec3(opensimSimulationJNI.LineGeometry_get_end_point__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_end_point() {
    return new Vec3(opensimSimulationJNI.LineGeometry_upd_end_point__SWIG_1(swigCPtr, this), false);
  }

  public void set_end_point(Vec3 value) {
    opensimSimulationJNI.LineGeometry_set_end_point__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  /**
   *  Convenience constructor that takes two end points
   */
  public LineGeometry(Vec3 aPoint1, Vec3 aPoint2) {
    this(opensimSimulationJNI.new_LineGeometry__SWIG_0(Vec3.getCPtr(aPoint1), aPoint1, Vec3.getCPtr(aPoint2), aPoint2), true);
  }

  /**
   *  default constructor, creates line (0,0,0)-(1,1,1)
   */
  public LineGeometry() {
    this(opensimSimulationJNI.new_LineGeometry__SWIG_1(), true);
  }

  /**
   *  Get end points as Vec3 in passed in arguments
   */
  public void getPoints(Vec3 rPoint1, Vec3 rPoint2) {
    opensimSimulationJNI.LineGeometry_getPoints(swigCPtr, this, Vec3.getCPtr(rPoint1), rPoint1, Vec3.getCPtr(rPoint2), rPoint2);
  }

  /**
   *  %Set end points from passed in arguments
   */
  public void setPoints(Vec3 aPoint1, Vec3 aPoint2) {
    opensimSimulationJNI.LineGeometry_setPoints(swigCPtr, this, Vec3.getCPtr(aPoint1), aPoint1, Vec3.getCPtr(aPoint2), aPoint2);
  }

}
