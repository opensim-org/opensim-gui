/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class StdMapStringDataAdapter extends java.util.AbstractMap<String, DataAdapter> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public StdMapStringDataAdapter(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(StdMapStringDataAdapter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_StdMapStringDataAdapter(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  public int size() {
    return sizeImpl();
  }

  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof String)) {
      return false;
    }

    return containsImpl((String)key);
  }

  public DataAdapter get(java.lang.Object key) {
    if (!(key instanceof String)) {
      return null;
    }

    Iterator itr = find((String) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }

    return null;
  }

  public DataAdapter put(String key, DataAdapter value) {
    Iterator itr = find((String) key);
    if (itr.isNot(end())) {
      DataAdapter oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }

  public DataAdapter remove(java.lang.Object key) {
    if (!(key instanceof String)) {
      return null;
    }

    Iterator itr = find((String) key);
    if (itr.isNot(end())) {
      DataAdapter oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }

  public java.util.Set<Entry<String, DataAdapter>> entrySet() {
    java.util.Set<Entry<String, DataAdapter>> setToReturn =
        new java.util.HashSet<Entry<String, DataAdapter>>();

    Iterator itr = begin();
    final Iterator end = end();
    while (itr.isNot(end)) {
      setToReturn.add(new Entry<String, DataAdapter>() {
        private Iterator iterator;

        private Entry<String, DataAdapter> init(Iterator iterator) {
          this.iterator = iterator;
          return this;
        }

        public String getKey() {
          return iterator.getKey();
        }

        public DataAdapter getValue() {
          return iterator.getValue();
        }

        public DataAdapter setValue(DataAdapter newValue) {
          DataAdapter oldValue = iterator.getValue();
          iterator.setValue(newValue);
          return oldValue;
        }
      }.init(itr));
      itr = itr.getNextUnchecked();
    }

    return setToReturn;
  }

  public StdMapStringDataAdapter() {
    this(opensimCommonJNI.new_StdMapStringDataAdapter__SWIG_0(), true);
  }

  public StdMapStringDataAdapter(StdMapStringDataAdapter other) {
    this(opensimCommonJNI.new_StdMapStringDataAdapter__SWIG_1(StdMapStringDataAdapter.getCPtr(other), other), true);
  }

  static protected class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          opensimCommonJNI.delete_StdMapStringDataAdapter_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    private StdMapStringDataAdapter.Iterator getNextUnchecked() {
      return new StdMapStringDataAdapter.Iterator(opensimCommonJNI.StdMapStringDataAdapter_Iterator_getNextUnchecked(swigCPtr, this), true);
    }
  
    private boolean isNot(StdMapStringDataAdapter.Iterator other) {
      return opensimCommonJNI.StdMapStringDataAdapter_Iterator_isNot(swigCPtr, this, StdMapStringDataAdapter.Iterator.getCPtr(other), other);
    }
  
    private String getKey() {
      return opensimCommonJNI.StdMapStringDataAdapter_Iterator_getKey(swigCPtr, this);
    }
  
    private DataAdapter getValue() {
      long cPtr = opensimCommonJNI.StdMapStringDataAdapter_Iterator_getValue(swigCPtr, this);
      return (cPtr == 0) ? null : new DataAdapter(cPtr, true);
    }
  
    private void setValue(DataAdapter newValue) {
      opensimCommonJNI.StdMapStringDataAdapter_Iterator_setValue(swigCPtr, this, DataAdapter.getCPtr(newValue), newValue);
    }
  
  }

  public boolean isEmpty() {
    return opensimCommonJNI.StdMapStringDataAdapter_isEmpty(swigCPtr, this);
  }

  public void clear() {
    opensimCommonJNI.StdMapStringDataAdapter_clear(swigCPtr, this);
  }

  private StdMapStringDataAdapter.Iterator find(String key) {
    return new StdMapStringDataAdapter.Iterator(opensimCommonJNI.StdMapStringDataAdapter_find(swigCPtr, this, key), true);
  }

  private StdMapStringDataAdapter.Iterator begin() {
    return new StdMapStringDataAdapter.Iterator(opensimCommonJNI.StdMapStringDataAdapter_begin(swigCPtr, this), true);
  }

  private StdMapStringDataAdapter.Iterator end() {
    return new StdMapStringDataAdapter.Iterator(opensimCommonJNI.StdMapStringDataAdapter_end(swigCPtr, this), true);
  }

  private int sizeImpl() {
    return opensimCommonJNI.StdMapStringDataAdapter_sizeImpl(swigCPtr, this);
  }

  private boolean containsImpl(String key) {
    return opensimCommonJNI.StdMapStringDataAdapter_containsImpl(swigCPtr, this, key);
  }

  private void putUnchecked(String key, DataAdapter value) {
    opensimCommonJNI.StdMapStringDataAdapter_putUnchecked(swigCPtr, this, key, DataAdapter.getCPtr(value), value);
  }

  private void removeUnchecked(StdMapStringDataAdapter.Iterator itr) {
    opensimCommonJNI.StdMapStringDataAdapter_removeUnchecked(swigCPtr, this, StdMapStringDataAdapter.Iterator.getCPtr(itr), itr);
  }

}
