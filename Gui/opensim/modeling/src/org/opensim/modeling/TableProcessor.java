/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class describes a workflow for processing a table using<br>
 * TableOperator%s. The user must provide a source table either as a filepath<br>
 * to a table or an in-memory TimeSeriesTable. In C++, one can easily chain<br>
 * together the operators in a processor using the C++ pipe operator:<br>
 * {@code 
TableProcessor proc = TableProcessor("file.sto") | TabOpLowPassFilter(6);
} 
 */
public class TableProcessor extends OpenSimObject {
  private transient long swigCPtr;

  public TableProcessor(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.TableProcessor_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(TableProcessor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_TableProcessor(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static TableProcessor safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.TableProcessor_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new TableProcessor(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.TableProcessor_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.TableProcessor_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.TableProcessor_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new TableProcessor(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.TableProcessor_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_filepath(TableProcessor source) {
    opensimSimulationJNI.TableProcessor_copyProperty_filepath(swigCPtr, this, TableProcessor.getCPtr(source), source);
  }

  public String get_filepath(int i) {
    return opensimSimulationJNI.TableProcessor_get_filepath__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_filepath(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.TableProcessor_upd_filepath__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_filepath(int i, String value) {
    opensimSimulationJNI.TableProcessor_set_filepath__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_filepath(String value) {
    return opensimSimulationJNI.TableProcessor_append_filepath(swigCPtr, this, value);
  }

  public void constructProperty_filepath(String initValue) {
    opensimSimulationJNI.TableProcessor_constructProperty_filepath(swigCPtr, this, initValue);
  }

  public String get_filepath() {
    return opensimSimulationJNI.TableProcessor_get_filepath__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_filepath() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.TableProcessor_upd_filepath__SWIG_1(swigCPtr, this), false);
  }

  public void set_filepath(String value) {
    opensimSimulationJNI.TableProcessor_set_filepath__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_operators(TableProcessor source) {
    opensimSimulationJNI.TableProcessor_copyProperty_operators(swigCPtr, this, TableProcessor.getCPtr(source), source);
  }

  public TableOperator get_operators(int i) {
    return new TableOperator(opensimSimulationJNI.TableProcessor_get_operators(swigCPtr, this, i), false);
  }

  public TableOperator upd_operators(int i) {
    return new TableOperator(opensimSimulationJNI.TableProcessor_upd_operators(swigCPtr, this, i), false);
  }

  public void set_operators(int i, TableOperator value) {
    opensimSimulationJNI.TableProcessor_set_operators(swigCPtr, this, i, TableOperator.getCPtr(value), value);
  }

  public int append_operators(TableOperator value) {
    return opensimSimulationJNI.TableProcessor_append_operators(swigCPtr, this, TableOperator.getCPtr(value), value);
  }

  public void constructProperty_operators() {
    opensimSimulationJNI.TableProcessor_constructProperty_operators(swigCPtr, this);
  }

  /**
   *  This constructor is only for use when reading (deserializing) from an<br>
   *     XML file. 
   */
  public TableProcessor() {
    this(opensimSimulationJNI.new_TableProcessor__SWIG_0(), true);
  }

  /**
   *  Use an in-memory TimeSeriesTable as the source table.<br>
   *     Since this constructor is not explicit, you can provide a<br>
   *     TimeSeriesTable to any function that takes a TableProcessor (in C++). 
   */
  public TableProcessor(TimeSeriesTable table) {
    this(opensimSimulationJNI.new_TableProcessor__SWIG_1(TimeSeriesTable.getCPtr(table), table), true);
  }

  /**
   *  Use a filepath as the source table.<br>
   *     Since this constructor is not explicit, you can provide a string<br>
   *     filepath to any function that takes a TableProcessor. 
   */
  public TableProcessor(String filepath) {
    this(opensimSimulationJNI.new_TableProcessor__SWIG_2(filepath), true);
  }

  /**
   *  Process and obtain the table. If a filepath is provided, it will be<br>
   *     evaluated relative to `relativeToDirectory`.<br>
   *     Certain TableOperator%s require a Model (e.g.,<br>
   *     TabOpConvertDegreesToRadians, TabOpUseAbsoluteStateNames). If this processor<br>
   *     contains such an operator, then the operator will throw an exception<br>
   *     if you do not provide a model when invoking this function. 
   */
  public TimeSeriesTable process(String relativeToDirectory, Model model) {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_process__SWIG_0(swigCPtr, this, relativeToDirectory, Model.getCPtr(model), model), true);
  }

  /**
   *  Process and obtain the table. If a filepath is provided, it will be<br>
   *     evaluated relative to `relativeToDirectory`.<br>
   *     Certain TableOperator%s require a Model (e.g.,<br>
   *     TabOpConvertDegreesToRadians, TabOpUseAbsoluteStateNames). If this processor<br>
   *     contains such an operator, then the operator will throw an exception<br>
   *     if you do not provide a model when invoking this function. 
   */
  public TimeSeriesTable process(String relativeToDirectory) {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_process__SWIG_1(swigCPtr, this, relativeToDirectory), true);
  }

  /**
   *  Same as above, but paths are evaluated with respect to the current<br>
   *     working directory. 
   */
  public TimeSeriesTable process(Model model) {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_process__SWIG_2(swigCPtr, this, Model.getCPtr(model), model), true);
  }

  /**
   *  Same as above, but paths are evaluated with respect to the current<br>
   *     working directory. 
   */
  public TimeSeriesTable process() {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_process__SWIG_3(swigCPtr, this), true);
  }

  /**
   *  Same as process(), but the columns of processed table are converted from<br>
   *     degrees to radians, if applicable. This conversion requires a model. 
   */
  public TimeSeriesTable processAndConvertToRadians(String relativeToDirectory, Model model) {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_processAndConvertToRadians__SWIG_0(swigCPtr, this, relativeToDirectory, Model.getCPtr(model), model), true);
  }

  /**
   *  Same as above, but paths are evaluated with respect to the current<br>
   *     working directory. 
   */
  public TimeSeriesTable processAndConvertToRadians(Model model) {
    return new TimeSeriesTable(opensimSimulationJNI.TableProcessor_processAndConvertToRadians__SWIG_1(swigCPtr, this, Model.getCPtr(model), model), true);
  }

  /**
   *  Returns true if neither a filepath nor an in-memory table have been<br>
   *     provided. 
   */
  public boolean empty() {
    return opensimSimulationJNI.TableProcessor_empty(swigCPtr, this);
  }

  /**
   *  Append an operation to the end of the operations in this processor. 
   */
  public TableProcessor append(TableOperator op) {
    return new TableProcessor(opensimSimulationJNI.TableProcessor_append__SWIG_0(swigCPtr, this, TableOperator.getCPtr(op), op), false);
  }

  /**
   *  Append all operations in another processor to this processor.<br>
   *     The source table of the provided trajectory is ignored. 
   */
  public TableProcessor append(TableProcessor traj) {
    return new TableProcessor(opensimSimulationJNI.TableProcessor_append__SWIG_1(swigCPtr, this, TableProcessor.getCPtr(traj), traj), false);
  }

}
