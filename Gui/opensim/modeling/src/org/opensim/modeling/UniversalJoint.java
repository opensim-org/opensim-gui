/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class implementing a Universal joint. The underlying implementation<br>
 * in Simbody is a SimTK::MobilizedBody::Universal.<br>
 * Universal provides two DoF: rotation about the x axis of the joint frames,<br>
 * followed by a rotation about the new y axis. The joint is badly behaved when the<br>
 * second rotation is near 90 degrees. <br>
 * <br>
 * <img src=universalJoint.gif/><br>
 * <br>
 * @author Tim Dorn
 */
public class UniversalJoint extends Joint {
  private transient long swigCPtr;

  public UniversalJoint(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.UniversalJoint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(UniversalJoint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_UniversalJoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static UniversalJoint safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.UniversalJoint_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new UniversalJoint(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.UniversalJoint_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.UniversalJoint_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.UniversalJoint_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new UniversalJoint(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.UniversalJoint_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Convenience method to get a const reference to the Coordinate associated<br>
   *         with a single-degree-of-freedom Joint. If the Joint has more than one<br>
   *         Coordinate, you must use get_coordinates() or provide the appropriate<br>
   *         argument to the getCoordinate() method defined in the derived class. 
   */
  public Coordinate getCoordinate() {
    return new Coordinate(opensimSimulationJNI.UniversalJoint_getCoordinate__SWIG_0_0(swigCPtr, this), false);
  }

  /**
   *  Convenience method to get a writable reference to the Coordinate<br>
   *         associated with a single-degree-of-freedom Joint. If the Joint has more<br>
   *         than one Coordinate, you must use upd_coordinates() or provide the<br>
   *         appropriate argument to the updCoordinate() method defined in the<br>
   *         derived class. 
   */
  public Coordinate updCoordinate() {
    return new Coordinate(opensimSimulationJNI.UniversalJoint_updCoordinate__SWIG_0_0(swigCPtr, this), false);
  }

  /**
   *  Get a const reference to a Coordinate associated with this Joint.<br>
   *         @see Coord 
   */
  public Coordinate getCoordinate(UniversalJoint.Coord idx) {
    return new Coordinate(opensimSimulationJNI.UniversalJoint_getCoordinate__SWIG_1(swigCPtr, this, idx.swigValue()), false);
  }

  /**
   *  Get a writable reference to a Coordinate associated with this Joint.<br>
   *         @see Coord 
   */
  public Coordinate updCoordinate(UniversalJoint.Coord idx) {
    return new Coordinate(opensimSimulationJNI.UniversalJoint_updCoordinate__SWIG_1(swigCPtr, this, idx.swigValue()), false);
  }

  public UniversalJoint() {
    this(opensimSimulationJNI.new_UniversalJoint__SWIG_0(), true);
  }

  public UniversalJoint(String name, PhysicalFrame parent, PhysicalFrame child) {
    this(opensimSimulationJNI.new_UniversalJoint__SWIG_1(name, PhysicalFrame.getCPtr(parent), parent, PhysicalFrame.getCPtr(child), child), true);
  }

  public UniversalJoint(String name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) {
    this(opensimSimulationJNI.new_UniversalJoint__SWIG_2(name, PhysicalFrame.getCPtr(parent), parent, Vec3.getCPtr(locationInParent), locationInParent, Vec3.getCPtr(orientationInParent), orientationInParent, PhysicalFrame.getCPtr(child), child, Vec3.getCPtr(locationInChild), locationInChild, Vec3.getCPtr(orientationInChild), orientationInChild), true);
  }

  /**
   *  Indices of Coordinates for use as arguments to getCoordinate() and<br>
   *         updCoordinate().<br>
   * <br>
   *         <b>C++ example</b><br>
   *         {@code 
          const auto& rx = myUniversalJoint.
                           getCoordinate(UniversalJoint::Coord::Rotation1X);
          }<br>
   * <br>
   *         <b>Python example</b><br>
   *         {@code 
          import opensim
          rx = myUniversalJoint.getCoordinate(opensim.UniversalJoint.Coord_Rotation1X)
          }<br>
   * <br>
   *         <b>Java example</b><br>
   *         {@code 
          rx = myUniversalJoint.getCoordinate(UniversalJoint.Coord.Rotation1X);
          }<br>
   * <br>
   *         <b>MATLAB example</b><br>
   *         {@code 
          rx = myUniversalJoint.get_coordinates(0);
          }
   */
  public final static class Coord {
    /**
     *  0
     */
    public final static UniversalJoint.Coord Rotation1X = new UniversalJoint.Coord("Rotation1X", opensimSimulationJNI.UniversalJoint_Coord_Rotation1X_get());
    /**
     *  1
     */
    public final static UniversalJoint.Coord Rotation2Y = new UniversalJoint.Coord("Rotation2Y", opensimSimulationJNI.UniversalJoint_Coord_Rotation2Y_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Coord swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Coord.class + " with value " + swigValue);
    }

    private Coord(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Coord(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Coord(String swigName, Coord swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Coord[] swigValues = { Rotation1X, Rotation2Y };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
