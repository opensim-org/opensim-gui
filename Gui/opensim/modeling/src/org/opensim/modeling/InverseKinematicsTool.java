/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class InverseKinematicsTool extends InverseKinematicsToolBase {
  private transient long swigCPtr;

  public InverseKinematicsTool(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(InverseKinematicsTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_InverseKinematicsTool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static InverseKinematicsTool safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new InverseKinematicsTool(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new InverseKinematicsTool(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_IKTaskSet(InverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_copyProperty_IKTaskSet(swigCPtr, this, InverseKinematicsTool.getCPtr(source), source);
  }

  public IKTaskSet get_IKTaskSet(int i) {
    return new IKTaskSet(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_IKTaskSet__SWIG_0(swigCPtr, this, i), false);
  }

  public IKTaskSet upd_IKTaskSet(int i) {
    return new IKTaskSet(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_IKTaskSet__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_IKTaskSet(int i, IKTaskSet value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_IKTaskSet__SWIG_0(swigCPtr, this, i, IKTaskSet.getCPtr(value), value);
  }

  public int append_IKTaskSet(IKTaskSet value) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_append_IKTaskSet(swigCPtr, this, IKTaskSet.getCPtr(value), value);
  }

  public void constructProperty_IKTaskSet(IKTaskSet initValue) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_constructProperty_IKTaskSet(swigCPtr, this, IKTaskSet.getCPtr(initValue), initValue);
  }

  public IKTaskSet get_IKTaskSet() {
    return new IKTaskSet(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_IKTaskSet__SWIG_1(swigCPtr, this), false);
  }

  public IKTaskSet upd_IKTaskSet() {
    return new IKTaskSet(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_IKTaskSet__SWIG_1(swigCPtr, this), false);
  }

  public void set_IKTaskSet(IKTaskSet value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_IKTaskSet__SWIG_1(swigCPtr, this, IKTaskSet.getCPtr(value), value);
  }

  public void copyProperty_marker_file(InverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_copyProperty_marker_file(swigCPtr, this, InverseKinematicsTool.getCPtr(source), source);
  }

  public String get_marker_file(int i) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_marker_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_marker_file(int i) {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_marker_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_marker_file(int i, String value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_marker_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_marker_file(String value) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_append_marker_file(swigCPtr, this, value);
  }

  public void constructProperty_marker_file(String initValue) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_constructProperty_marker_file(swigCPtr, this, initValue);
  }

  public String get_marker_file() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_marker_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_marker_file() {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_marker_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_marker_file(String value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_marker_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_coordinate_file(InverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_copyProperty_coordinate_file(swigCPtr, this, InverseKinematicsTool.getCPtr(source), source);
  }

  public String get_coordinate_file(int i) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_coordinate_file__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_coordinate_file(int i) {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_coordinate_file__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_coordinate_file(int i, String value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_coordinate_file__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_coordinate_file(String value) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_append_coordinate_file(swigCPtr, this, value);
  }

  public void constructProperty_coordinate_file(String initValue) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_constructProperty_coordinate_file(swigCPtr, this, initValue);
  }

  public String get_coordinate_file() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_coordinate_file__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_coordinate_file() {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_coordinate_file__SWIG_1(swigCPtr, this), false);
  }

  public void set_coordinate_file(String value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_coordinate_file__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_report_marker_locations(InverseKinematicsTool source) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_copyProperty_report_marker_locations(swigCPtr, this, InverseKinematicsTool.getCPtr(source), source);
  }

  public boolean get_report_marker_locations(int i) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_report_marker_locations__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_report_marker_locations(int i) {
    return new SWIGTYPE_p_bool(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_report_marker_locations__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_report_marker_locations(int i, boolean value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_report_marker_locations__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_report_marker_locations(boolean value) {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_append_report_marker_locations(swigCPtr, this, value);
  }

  public void constructProperty_report_marker_locations(boolean initValue) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_constructProperty_report_marker_locations(swigCPtr, this, initValue);
  }

  public boolean get_report_marker_locations() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_get_report_marker_locations__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_report_marker_locations() {
    return new SWIGTYPE_p_bool(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_upd_report_marker_locations__SWIG_1(swigCPtr, this), false);
  }

  public void set_report_marker_locations(boolean value) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_set_report_marker_locations__SWIG_1(swigCPtr, this, value);
  }

  public InverseKinematicsTool() {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseKinematicsTool__SWIG_0(), true);
  }

  public InverseKinematicsTool(String aFileName, boolean aLoadModel) throws java.io.IOException {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseKinematicsTool__SWIG_1(aFileName, aLoadModel), true);
  }

  public InverseKinematicsTool(String aFileName) throws java.io.IOException {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseKinematicsTool__SWIG_2(aFileName), true);
  }

  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode, int versionNumber) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_updateFromXMLNode__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode), versionNumber);
  }

  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_updateFromXMLNode__SWIG_1(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode));
  }

  public void setMarkerDataFileName(String markerDataFileName) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_setMarkerDataFileName(swigCPtr, this, markerDataFileName);
  }

  public String getMarkerDataFileName() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_getMarkerDataFileName(swigCPtr, this);
  }

  public void setCoordinateFileName(String coordDataFileName) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_setCoordinateFileName(swigCPtr, this, coordDataFileName);
  }

  public String getCoordinateFileName() {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_getCoordinateFileName(swigCPtr, this);
  }

  public IKTaskSet getIKTaskSet() {
    return new IKTaskSet(opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_getIKTaskSet(swigCPtr, this), false);
  }

  public boolean run() throws java.io.IOException {
    return opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_run(swigCPtr, this);
  }

  public void populateReferences(MarkersReference markersReference, SimTKArrayCoordinateReference coordinateReferences) {
    opensimActuatorsAnalysesToolsJNI.InverseKinematicsTool_populateReferences(swigCPtr, this, MarkersReference.getCPtr(markersReference), markersReference, SimTKArrayCoordinateReference.getCPtr(coordinateReferences), coordinateReferences);
  }

}
