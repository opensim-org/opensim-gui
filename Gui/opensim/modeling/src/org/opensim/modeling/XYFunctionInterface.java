/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class XYFunctionInterface extends OpenSimObject {
  private transient long swigCPtr;

  public XYFunctionInterface(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.XYFunctionInterface_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(XYFunctionInterface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_XYFunctionInterface(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

    // cache pointer to function so it's not garbage collected early.
  private Function  dFunction;  

  public XYFunctionInterface(Function aFunction, Boolean unused) {
      this(aFunction);
      dFunction = aFunction;
  }

  public static XYFunctionInterface safeDownCast(OpenSimObject obj) {
    long cPtr = opensimCommonJNI.XYFunctionInterface_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new XYFunctionInterface(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimCommonJNI.XYFunctionInterface_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimCommonJNI.XYFunctionInterface_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new XYFunctionInterface(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimCommonJNI.XYFunctionInterface_getConcreteClassName(swigCPtr, this);
  }

  public static boolean isXYFunction(Function f) {
    return opensimCommonJNI.XYFunctionInterface_isXYFunction(Function.getCPtr(f), f);
  }

  public XYFunctionInterface(Function f) {
    this(opensimCommonJNI.new_XYFunctionInterface(Function.getCPtr(f), f), true);
  }

  public boolean isSpecifiedByControlPoints() {
    return opensimCommonJNI.XYFunctionInterface_isSpecifiedByControlPoints(swigCPtr, this);
  }

  public int getNumberOfPoints() {
    return opensimCommonJNI.XYFunctionInterface_getNumberOfPoints(swigCPtr, this);
  }

  public SWIGTYPE_p_double getXValues() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getXValues(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public SWIGTYPE_p_double getYValues() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getYValues(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public double getX(int aIndex) {
    return opensimCommonJNI.XYFunctionInterface_getX(swigCPtr, this, aIndex);
  }

  public double getY(int aIndex) {
    return opensimCommonJNI.XYFunctionInterface_getY(swigCPtr, this, aIndex);
  }

  public void setX(int aIndex, double aValue) {
    opensimCommonJNI.XYFunctionInterface_setX(swigCPtr, this, aIndex, aValue);
  }

  public void setY(int aIndex, double aValue) {
    opensimCommonJNI.XYFunctionInterface_setY(swigCPtr, this, aIndex, aValue);
  }

  public boolean deletePoint(int aIndex) {
    return opensimCommonJNI.XYFunctionInterface_deletePoint(swigCPtr, this, aIndex);
  }

  public boolean deletePoints(ArrayInt indices) {
    return opensimCommonJNI.XYFunctionInterface_deletePoints(swigCPtr, this, ArrayInt.getCPtr(indices), indices);
  }

  public int addPoint(double aX, double aY) {
    return opensimCommonJNI.XYFunctionInterface_addPoint(swigCPtr, this, aX, aY);
  }

  public ArrayXYPoint renderAsLineSegments(int aIndex) {
    long cPtr = opensimCommonJNI.XYFunctionInterface_renderAsLineSegments(swigCPtr, this, aIndex);
    return (cPtr == 0) ? null : new ArrayXYPoint(cPtr, false);
  }

  public static void deleteXYPointArray(ArrayXYPoint aArray) {
    opensimCommonJNI.XYFunctionInterface_deleteXYPointArray(ArrayXYPoint.getCPtr(aArray), aArray);
  }

  public XYFunctionInterface.FunctionType getFunctionType() {
    return XYFunctionInterface.FunctionType.swigToEnum(opensimCommonJNI.XYFunctionInterface_getFunctionType(swigCPtr, this));
  }

  public double getScale() {
    return opensimCommonJNI.XYFunctionInterface_getScale(swigCPtr, this);
  }

  public Constant getConstant() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getConstant(swigCPtr, this);
    return (cPtr == 0) ? null : new Constant(cPtr, false);
  }

  public StepFunction getStepFunction() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getStepFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new StepFunction(cPtr, false);
  }

  public PiecewiseConstantFunction getMultiStepFunction() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getMultiStepFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new PiecewiseConstantFunction(cPtr, false);
  }

  public PiecewiseLinearFunction getPiecewiseLinearFunction() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getPiecewiseLinearFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new PiecewiseLinearFunction(cPtr, false);
  }

  public LinearFunction getLinearFunction() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getLinearFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new LinearFunction(cPtr, false);
  }

  public SimmSpline getSimmSpline() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getSimmSpline(swigCPtr, this);
    return (cPtr == 0) ? null : new SimmSpline(cPtr, false);
  }

  public GCVSpline getGCVSpline() {
    long cPtr = opensimCommonJNI.XYFunctionInterface_getGCVSpline(swigCPtr, this);
    return (cPtr == 0) ? null : new GCVSpline(cPtr, false);
  }

  public final static class FunctionType {
    public final static XYFunctionInterface.FunctionType typeConstant = new XYFunctionInterface.FunctionType("typeConstant");
    public final static XYFunctionInterface.FunctionType typeStepFunction = new XYFunctionInterface.FunctionType("typeStepFunction");
    public final static XYFunctionInterface.FunctionType typePiecewiseConstantFunction = new XYFunctionInterface.FunctionType("typePiecewiseConstantFunction");
    public final static XYFunctionInterface.FunctionType typePiecewiseLinearFunction = new XYFunctionInterface.FunctionType("typePiecewiseLinearFunction");
    public final static XYFunctionInterface.FunctionType typeLinearFunction = new XYFunctionInterface.FunctionType("typeLinearFunction");
    public final static XYFunctionInterface.FunctionType typeNatCubicSpline = new XYFunctionInterface.FunctionType("typeNatCubicSpline");
    public final static XYFunctionInterface.FunctionType typeGCVSpline = new XYFunctionInterface.FunctionType("typeGCVSpline");
    public final static XYFunctionInterface.FunctionType typeUndefined = new XYFunctionInterface.FunctionType("typeUndefined");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FunctionType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FunctionType.class + " with value " + swigValue);
    }

    private FunctionType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FunctionType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FunctionType(String swigName, FunctionType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FunctionType[] swigValues = { typeConstant, typeStepFunction, typePiecewiseConstantFunction, typePiecewiseLinearFunction, typeLinearFunction, typeNatCubicSpline, typeGCVSpline, typeUndefined };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
