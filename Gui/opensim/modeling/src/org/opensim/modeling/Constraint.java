/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A parent class for implementing a Simbody Constraint.<br>
 * Specific constraints should be derived from this class. <br>
 * <br>
 * @author Frank C. Anderson<br>
 * @author Ajay Seth<br>
 * @version 1.0
 */
public class Constraint extends ModelComponent {
  private transient long swigCPtr;

  public Constraint(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Constraint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Constraint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Constraint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Constraint safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Constraint_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Constraint(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Constraint_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Constraint_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Constraint_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Constraint(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Constraint_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_isEnforced(Constraint source) {
    opensimSimulationJNI.Constraint_copyProperty_isEnforced(swigCPtr, this, Constraint.getCPtr(source), source);
  }

  public boolean get_isEnforced(int i) {
    return opensimSimulationJNI.Constraint_get_isEnforced__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_isEnforced(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Constraint_upd_isEnforced__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_isEnforced(int i, boolean value) {
    opensimSimulationJNI.Constraint_set_isEnforced__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_isEnforced(boolean value) {
    return opensimSimulationJNI.Constraint_append_isEnforced(swigCPtr, this, value);
  }

  public void constructProperty_isEnforced(boolean initValue) {
    opensimSimulationJNI.Constraint_constructProperty_isEnforced(swigCPtr, this, initValue);
  }

  public boolean get_isEnforced() {
    return opensimSimulationJNI.Constraint_get_isEnforced__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_isEnforced() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Constraint_upd_isEnforced__SWIG_1(swigCPtr, this), false);
  }

  public void set_isEnforced(boolean value) {
    opensimSimulationJNI.Constraint_set_isEnforced__SWIG_1(swigCPtr, this, value);
  }

  public void updateFromConstraint(State s, Constraint aConstraint) {
    opensimSimulationJNI.Constraint_updateFromConstraint(swigCPtr, this, State.getCPtr(s), s, Constraint.getCPtr(aConstraint), aConstraint);
  }

  /**
   * Determine whether or not this Constraint is being enforced. 
   */
  public boolean isEnforced(State s) {
    return opensimSimulationJNI.Constraint_isEnforced(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   * Set whether or not this Constraint is enforced.<br>
   * The realization Stage is dropped to Instance whenever the 'isEnforced'<br>
   * flag is changed, but setting the same value has no effect. 
   */
  public boolean setIsEnforced(State s, boolean isEnforced) {
    return opensimSimulationJNI.Constraint_setIsEnforced(swigCPtr, this, State.getCPtr(s), s, isEnforced);
  }

  public void calcConstraintForces(State s, VectorOfSpatialVec bodyForcesInAncestor, Vector mobilityForces) {
    opensimSimulationJNI.Constraint_calcConstraintForces(swigCPtr, this, State.getCPtr(s), s, VectorOfSpatialVec.getCPtr(bodyForcesInAncestor), bodyForcesInAncestor, Vector.getCPtr(mobilityForces), mobilityForces);
  }

  /**
   * Methods to query the Constraint forces (defaults to the Lagrange <br>
   * multipliers) applied to the MultibodySystem. The names of the quantities<br>
   * (column labels) are returned by this first method, getRecordLabels() 
   */
  public ArrayStr getRecordLabels() {
    return new ArrayStr(opensimSimulationJNI.Constraint_getRecordLabels(swigCPtr, this), true);
  }

  /**
   * Given a SimTK::State, extract all the values necessary to report <br>
   * constraint forces (e.g. multipliers). Subclasses can override to report<br>
   * the location, frame, etc.. of force application. This method is used in<br>
   * conjunction with getRecordLabels() and must return an Array of equal<br>
   * size. 
   */
  public ArrayDouble getRecordValues(State state) {
    return new ArrayDouble(opensimSimulationJNI.Constraint_getRecordValues(swigCPtr, this, State.getCPtr(state), state), true);
  }

  /**
   * This method specifies the interface that a constraint must implement<br>
   * in order to be used by the Induced Accelerations Analysis
   */
  public void setContactPointForInducedAccelerations(State s, Vec3 point) {
    opensimSimulationJNI.Constraint_setContactPointForInducedAccelerations(swigCPtr, this, State.getCPtr(s), s, Vec3.getCPtr(point), point);
  }

}
