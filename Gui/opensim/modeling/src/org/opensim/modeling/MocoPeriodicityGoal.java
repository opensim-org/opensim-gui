/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This goal enforces equality between initial and final variable values in<br>
 * the optimal control problem. The initial and final values can belong to<br>
 * separate continuous variables or the same continuous variable, as long as<br>
 * they are the same type of variable (e.g., state or control). Value pairs<br>
 * are specified via a MocoPeriodicityGoalPair, where the initial variable of<br>
 * the pair indicates the initial state/control variable and the final<br>
 * variable indicates the final state/control variable. Set the initial and<br>
 * final variables to the same variable to enforce periodicity on a single<br>
 * continuous variable. Only state and control continuous variable pairs are<br>
 * supported, and are specified via the 'state_pairs' and 'control_pairs'<br>
 * properties.<br>
 * <br>
 * To handle initial and final variable values that are equal in absolute value<br>
 * but differ in sign (e.g. a pelvis rotation in walking), use<br>
 * addNegatedStatePair or addNegatedControlPair.<br>
 * <br>
 * To impose bilateral symmetry in a walking simulation,<br>
 * we can simulate over half a gait cycle and impose periodic constraints. For<br>
 * bilateral variables (e.g., hip flexion speeds and hamstrings controls), the<br>
 * constraints should enforce that right and left values, and inversely, should<br>
 * be the same at the beginning and half of the gait cycle, respectively. For<br>
 * the other variables (e.g., pelvis tilt values), the constraints should<br>
 * enforce that the values should be the same at the beginning and half of the<br>
 * gait cycle. The example code below illustrates how to enforce the<br>
 * aforementioned constraints with different constructors.<br>
 * {@code 
periodicGoal = problem.addGoal<MocoPeriodicityGoal>("periodicGoal");
}<br>
 * Periodic contraint for the pelvis tilt values:<br>
 * {@code 
periodicGoal->addStatePair({ "/jointset/ground_pelvis/pelvis_tilt/value"});
}<br>
 * Periodic contraints for the hip flexion speeds:<br>
 * {@code 
periodicGoal->addStatePair({"/jointset/hip_l/hip_flexion_l/speed",
        "/jointset/hip_r/hip_flexion_r/speed"});
periodicGoal->addStatePair({"/jointset/hip_r/hip_flexion_r/speed",
        "/jointset/hip_l/hip_flexion_l/speed"});
}<br>
 * Periodic contraints for the hamstrings controls:<br>
 * {@code 
MocoPeriodicityGoalPair pair_hamstrings1;
pair_hamstrings1.set_initial_variable("/hamstrings_r");
pair_hamstrings1.set_final_variable("/hamstrings_l");
periodicGoal->append_control_pairs(pair_hamstrings1);
MocoPeriodicityGoalPair pair_hamstrings2;
pair_hamstrings2.set_initial_variable("/hamstrings_l");
pair_hamstrings2.set_final_variable("/hamstrings_r");
periodicGoal->append_control_pairs(pair_hamstrings2);
}<br>
 * This is an endpoint constraint goal by default.<br>
 * 
 */
public class MocoPeriodicityGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoPeriodicityGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoPeriodicityGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoPeriodicityGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoPeriodicityGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoPeriodicityGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoPeriodicityGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoPeriodicityGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoPeriodicityGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoPeriodicityGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoPeriodicityGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoPeriodicityGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoPeriodicityGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoPeriodicityGoal() {
    this(opensimMocoJNI.new_MocoPeriodicityGoal__SWIG_0(), true);
  }

  public MocoPeriodicityGoal(String name) {
    this(opensimMocoJNI.new_MocoPeriodicityGoal__SWIG_1(name), true);
  }

  public void addStatePair(MocoPeriodicityGoalPair pair) {
    opensimMocoJNI.MocoPeriodicityGoal_addStatePair(swigCPtr, this, MocoPeriodicityGoalPair.getCPtr(pair), pair);
  }

  public void addNegatedStatePair(MocoPeriodicityGoalPair pair) {
    opensimMocoJNI.MocoPeriodicityGoal_addNegatedStatePair(swigCPtr, this, MocoPeriodicityGoalPair.getCPtr(pair), pair);
  }

  public void addControlPair(MocoPeriodicityGoalPair pair) {
    opensimMocoJNI.MocoPeriodicityGoal_addControlPair(swigCPtr, this, MocoPeriodicityGoalPair.getCPtr(pair), pair);
  }

  public void addNegatedControlPair(MocoPeriodicityGoalPair pair) {
    opensimMocoJNI.MocoPeriodicityGoal_addNegatedControlPair(swigCPtr, this, MocoPeriodicityGoalPair.getCPtr(pair), pair);
  }

}
