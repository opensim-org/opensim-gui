/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A Point is an OpenSim abstraction for any location in space. Points<br>
 * are intended to locate physical structures (such as points of constraints<br>
 * and points of muscle attachments) as well as embody the results of spatial<br>
 * calculations. For example, if your system involves contact, you can define<br>
 * a Point that describes the location of the center-of-pressure as one<br>
 * element rolls over another.<br>
 * <br>
 * A Point provides its location, velocity and acceleration in the Ground frame<br>
 * as a function of the Model's (SimTK::MultibodySystem's) state, which is<br>
 * accessible when the state has been realized to the corresponding<br>
 * SimTK::Stage (i.e. Position, Velocity and Acceleration). <br>
 * <br>
 * @author Ajay Seth
 */
public class Point extends ModelComponent {
  private transient long swigCPtr;

  public Point(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Point_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Point obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Point(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Point safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Point_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Point(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Point_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Point_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Point_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Point(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Point_getConcreteClassName(swigCPtr, this);
  }

  public void set_has_output_location(boolean value) {
    opensimSimulationJNI.Point__has_output_location_set(swigCPtr, this, value);
  }

  public boolean get_has_output_location() {
    return opensimSimulationJNI.Point__has_output_location_get(swigCPtr, this);
  }

  public void set_has_output_velocity(boolean value) {
    opensimSimulationJNI.Point__has_output_velocity_set(swigCPtr, this, value);
  }

  public boolean get_has_output_velocity() {
    return opensimSimulationJNI.Point__has_output_velocity_get(swigCPtr, this);
  }

  public void set_has_output_acceleration(boolean value) {
    opensimSimulationJNI.Point__has_output_acceleration_set(swigCPtr, this, value);
  }

  public boolean get_has_output_acceleration() {
    return opensimSimulationJNI.Point__has_output_acceleration_get(swigCPtr, this);
  }

  /**
   * *<br>
   *     Get the location, r_GP, of this Point, P, relative to and expressed in <br>
   *     the Ground. Point position only valid at Stage::Position or higher.<br>
   *     @param state       The state applied to the model when determining the<br>
   *                        location of the Point.<br>
   *     @return location   The location of the point expressed in the Ground. 
   */
  public Vec3 getLocationInGround(State state) {
    return new Vec3(opensimSimulationJNI.Point_getLocationInGround(swigCPtr, this, State.getCPtr(state), state), false);
  }

  /**
   *  The velocity v_GP of this Point, P, relative to and expressed in Ground.<br>
   *         Point's velocity is only valid at Stage::Velocity or higher.<br>
   *     @param state       The state applied to the model when determining the<br>
   *                        velocity of the Point.<br>
   *     @return velocity   The velocity of the point expressed in the Ground. 
   */
  public Vec3 getVelocityInGround(State state) {
    return new Vec3(opensimSimulationJNI.Point_getVelocityInGround(swigCPtr, this, State.getCPtr(state), state), false);
  }

  /**
   *  The acceleration a_GP, of this Point, P, relative to and expressed in<br>
   *     Ground. Point's acceleration is only valid at Stage::Acceleration or higher. <br>
   *     @param state       The state applied to the model when determining the<br>
   *                        acceleration of the Point.<br>
   *     @return velocity   The acceleration of the point expressed in Ground 
   */
  public Vec3 getAccelerationInGround(State state) {
    return new Vec3(opensimSimulationJNI.Point_getAccelerationInGround(swigCPtr, this, State.getCPtr(state), state), false);
  }

  /**
   * Calculate the distance between this Point and some other Point<br>
   *     @param state      The current State of the model.<br>
   *     @param other      The other Point to which we want to get the distance between.<br>
   *     @return distance  The distance (positive scalar). 
   */
  public double calcDistanceBetween(State state, Point other) {
    return opensimSimulationJNI.Point_calcDistanceBetween__SWIG_0(swigCPtr, this, State.getCPtr(state), state, Point.getCPtr(other), other);
  }

  /**
   *  Calculate the distance between this Point and some other described as a<br>
   *     location in some other frame.<br>
   *     @param state      The current State of the model.<br>
   *     @param frame      The other frame in which the location is defined.<br>
   *     @param location   The location in the other frame.<br>
   *     @return distance  The distance (positive scalar). 
   */
  public double calcDistanceBetween(State state, Frame frame, Vec3 location) {
    return opensimSimulationJNI.Point_calcDistanceBetween__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Frame.getCPtr(frame), frame, Vec3.getCPtr(location), location);
  }

  /**
   *  Calculate the relative speed between this Point and some other Point.<br>
   *     It is the derivative of the distance with respect to time.<br>
   *     A positive speed is growing the distance and negative is coming closer.<br>
   *     @param state      The current State of the model.<br>
   *     @param other      The other Point to which we want to get the speed between.<br>
   *     @return speed     The speed (distance time derivative) which is a scalar. 
   */
  public double calcSpeedBetween(State state, Point other) {
    return opensimSimulationJNI.Point_calcSpeedBetween(swigCPtr, this, State.getCPtr(state), state, Point.getCPtr(other), other);
  }

}
