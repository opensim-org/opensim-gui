/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * Controller is an abstract ModelComponent that defines the interface for   <br>
 * an OpenSim Controller. A controller computes and sets the values of the  <br>
 * controls for the actuators under its control.<br>
 * The defining method of a Controller is its computeControls() method.<br>
 * @see computeControls()<br>
 * <br>
 * Note: Controllers currently do not use the Socket mechanism to locate <br>
 * and connect to the Actuators that Controllers depend on. As a result,<br>
 * for now, Controllers do not support controlling multiple actuators with <br>
 * the same name.<br>
 * <br>
 * @author Ajay Seth
 */
public class Controller extends ModelComponent {
  private transient long swigCPtr;

  public Controller(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Controller_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Controller obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Controller(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Controller safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Controller_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Controller(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Controller_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Controller_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Controller_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Controller(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Controller_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Controller is enabled (active) by default.<br>
   *     NOTE: Prior to OpenSim 4.0, this property was named **isDisabled**.<br>
   *           If **isDisabled** is **true**, **enabled** is **false**.<br>
   *           If **isDisabled** is **false**, **enabled** is **true**.            
   */
  public void copyProperty_enabled(Controller source) {
    opensimSimulationJNI.Controller_copyProperty_enabled(swigCPtr, this, Controller.getCPtr(source), source);
  }

  public boolean get_enabled(int i) {
    return opensimSimulationJNI.Controller_get_enabled__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_enabled(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Controller_upd_enabled__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_enabled(int i, boolean value) {
    opensimSimulationJNI.Controller_set_enabled__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_enabled(boolean value) {
    return opensimSimulationJNI.Controller_append_enabled(swigCPtr, this, value);
  }

  public void constructProperty_enabled(boolean initValue) {
    opensimSimulationJNI.Controller_constructProperty_enabled(swigCPtr, this, initValue);
  }

  public boolean get_enabled() {
    return opensimSimulationJNI.Controller_get_enabled__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_enabled() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Controller_upd_enabled__SWIG_1(swigCPtr, this), false);
  }

  public void set_enabled(boolean value) {
    opensimSimulationJNI.Controller_set_enabled__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_actuator_list(Controller source) {
    opensimSimulationJNI.Controller_copyProperty_actuator_list(swigCPtr, this, Controller.getCPtr(source), source);
  }

  public String get_actuator_list(int i) {
    return opensimSimulationJNI.Controller_get_actuator_list(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_actuator_list(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Controller_upd_actuator_list(swigCPtr, this, i), false);
  }

  public void set_actuator_list(int i, String value) {
    opensimSimulationJNI.Controller_set_actuator_list(swigCPtr, this, i, value);
  }

  public int append_actuator_list(String value) {
    return opensimSimulationJNI.Controller_append_actuator_list(swigCPtr, this, value);
  }

  public void constructProperty_actuator_list() {
    opensimSimulationJNI.Controller_constructProperty_actuator_list(swigCPtr, this);
  }

  /**
   *  Get whether or not this controller is enabled.<br>
   * @return true when controller is enabled.
   */
  public boolean isEnabled() {
    return opensimSimulationJNI.Controller_isEnabled(swigCPtr, this);
  }

  /**
   *  Enable this controller.<br>
   * @param enableFlag Enable the controller if true.
   */
  public void setEnabled(boolean enableFlag) {
    opensimSimulationJNI.Controller_setEnabled(swigCPtr, this, enableFlag);
  }

  /**
   *  replace the current set of actuators with the provided set 
   */
  public void setActuators(SetActuators actuators) {
    opensimSimulationJNI.Controller_setActuators(swigCPtr, this, SetActuators.getCPtr(actuators), actuators);
  }

  /**
   *  add to the current set of actuators 
   */
  public void addActuator(Actuator actuator) {
    opensimSimulationJNI.Controller_addActuator(swigCPtr, this, Actuator.getCPtr(actuator), actuator);
  }

  /**
   *  get a const reference to the current set of const actuators 
   */
  public SWIGTYPE_p_OpenSim__SetT_OpenSim__Actuator_const_OpenSim__Object_t getActuatorSet() {
    return new SWIGTYPE_p_OpenSim__SetT_OpenSim__Actuator_const_OpenSim__Object_t(opensimSimulationJNI.Controller_getActuatorSet(swigCPtr, this), false);
  }

  /**
   *  get a writable reference to the set of const actuators for this controller 
   */
  public SWIGTYPE_p_OpenSim__SetT_OpenSim__Actuator_const_OpenSim__Object_t updActuators() {
    return new SWIGTYPE_p_OpenSim__SetT_OpenSim__Actuator_const_OpenSim__Object_t(opensimSimulationJNI.Controller_updActuators(swigCPtr, this), false);
  }

  /**
   *  Compute the control for actuator<br>
   *  This method defines the behavior for any concrete controller <br>
   *  and therefore must be implemented by concrete subclasses.<br>
   * <br>
   * @param s         system state <br>
   * @param controls  writable model controls (all actuators)
   */
  public void computeControls(State s, Vector controls) {
    opensimSimulationJNI.Controller_computeControls(swigCPtr, this, State.getCPtr(s), s, Vector.getCPtr(controls), controls);
  }

  public int getNumControls() {
    return opensimSimulationJNI.Controller_getNumControls(swigCPtr, this);
  }

}
