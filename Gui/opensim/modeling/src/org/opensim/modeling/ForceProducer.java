/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A `ForceProducer` is an abstract `OpenSim::Force` that can emit (produce)<br>
 * its forces one-by-one into a virtual `OpenSim::ForceConsumer`.<br>
 * <br>
 * The benefit of this is that it enables arbitrary external code to directly<br>
 * introspect each force before it gets resolved to the underlying body-/generalized-force<br>
 * vector that `OpenSim::Force::computeForce` manipulates. This can be useful for<br>
 * visualizing/dumping user data (e.g. because user-written `OpenSim::ExternalForce`s<br>
 * produce point-forces) or debugging (because it's easier to debug forces if they<br>
 * come one-at-a-time rather than trying to figure out which parts of downstream code<br>
 * touched which parts of a `SimTK::Vector_&lt;SimTK::SpatialVec&gt;` during<br>
 * `OpenSim::Force::computeForce`).
 */
public class ForceProducer extends Force {
  private transient long swigCPtr;

  public ForceProducer(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ForceProducer_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ForceProducer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(ForceProducer obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ForceProducer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ForceProducer safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ForceProducer_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ForceProducer(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ForceProducer_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ForceProducer_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ForceProducer_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ForceProducer(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ForceProducer_getConcreteClassName(swigCPtr, this);
  }

  /**
   * Uses `implProduceForces` to produce (emit) forces evaluated from `state` into the<br>
   * provided `ForceConsumer`.<br>
   * <br>
   * Note: this function only produces the forces and does not apply them to anything. It's<br>
   *       up to the `ForceConsumer` implementation to handle the forces. Therefore,<br>
   *       `Force::appliesForces` is ignored by this method.<br>
   * <br>
   * @param state       the state used to evaluate forces<br>
   * 
   */
  public void produceForces(State state, SWIGTYPE_p_OpenSim__ForceConsumer forceConsumer) {
    opensimSimulationJNI.ForceProducer_produceForces(swigCPtr, this, State.getCPtr(state), state, SWIGTYPE_p_OpenSim__ForceConsumer.getCPtr(forceConsumer));
  }

  /**
   * Inhereted from `OpenSim::Force`.<br>
   * <br>
   * `ForceProducer` overrides `OpenSim::Force::computeForce` with a default<br>
   * implementation that, provided `OpenSim::Force::appliesForces` is `true`,<br>
   * internally uses `produceForces` to mutate the provided `bodyForces` in a<br>
   * manner that's compatible with the `OpenSim::Force` API.
   */
  public void computeForce(State state, VectorOfSpatialVec bodyForces, Vector generalizedForces) {
    opensimSimulationJNI.ForceProducer_computeForce(swigCPtr, this, State.getCPtr(state), state, VectorOfSpatialVec.getCPtr(bodyForces), bodyForces, Vector.getCPtr(generalizedForces), generalizedForces);
  }

}
