/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class opensimSimulation {
  public static State simulate(Model model, State initialState, double finalTime, boolean saveStatesFile) {
    return new State(opensimSimulationJNI.simulate__SWIG_0(Model.getCPtr(model), model, State.getCPtr(initialState), initialState, finalTime, saveStatesFile), true);
  }

  public static State simulate(Model model, State initialState, double finalTime) {
    return new State(opensimSimulationJNI.simulate__SWIG_1(Model.getCPtr(model), model, State.getCPtr(initialState), initialState, finalTime), true);
  }

  public static void updateStateLabels40(Model model, StdVectorString labels) {
    opensimSimulationJNI.updateStateLabels40(Model.getCPtr(model), model, StdVectorString.getCPtr(labels), labels);
  }

  public static void updatePre40KinematicsFilesFor40MotionType(Model model, StdVectorString filePaths, String suffix) {
    opensimSimulationJNI.updatePre40KinematicsFilesFor40MotionType__SWIG_0(Model.getCPtr(model), model, StdVectorString.getCPtr(filePaths), filePaths, suffix);
  }

  public static void updatePre40KinematicsFilesFor40MotionType(Model model, StdVectorString filePaths) {
    opensimSimulationJNI.updatePre40KinematicsFilesFor40MotionType__SWIG_1(Model.getCPtr(model), model, StdVectorString.getCPtr(filePaths), filePaths);
  }

  public static void updateSocketConnecteesBySearch(Model model) {
    opensimSimulationJNI.updateSocketConnecteesBySearch(Model.getCPtr(model), model);
  }

  public static StdVectorString createStateVariableNamesInSystemOrder(Model model) {
    return new StdVectorString(opensimSimulationJNI.createStateVariableNamesInSystemOrder(Model.getCPtr(model), model), true);
  }

  public static StdVectorString createControlNamesFromModel(Model model, StdVectorInt modelControlIndices) {
    return new StdVectorString(opensimSimulationJNI.createControlNamesFromModel__SWIG_0(Model.getCPtr(model), model, StdVectorInt.getCPtr(modelControlIndices), modelControlIndices), true);
  }

  public static StdVectorString createControlNamesFromModel(Model model) {
    return new StdVectorString(opensimSimulationJNI.createControlNamesFromModel__SWIG_1(Model.getCPtr(model), model), true);
  }

  public static SWIGTYPE_p_std__unordered_mapT_std__string_int_t createSystemControlIndexMap(Model model) {
    return new SWIGTYPE_p_std__unordered_mapT_std__string_int_t(opensimSimulationJNI.createSystemControlIndexMap(Model.getCPtr(model), model), true);
  }

  public static void checkOrderSystemControls(Model model) {
    opensimSimulationJNI.checkOrderSystemControls(Model.getCPtr(model), model);
  }

  public static void checkLabelsMatchModelStates(Model model, StdVectorString labels) {
    opensimSimulationJNI.checkLabelsMatchModelStates(Model.getCPtr(model), model, StdVectorString.getCPtr(labels), labels);
  }

  public static TimeSeriesTable analyze(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) {
    return new TimeSeriesTable(opensimSimulationJNI.analyze(Model.getCPtr(model), model, TimeSeriesTable.getCPtr(statesTable), statesTable, TimeSeriesTable.getCPtr(controlsTable), controlsTable, StdVectorString.getCPtr(outputPaths), outputPaths), true);
  }

  public static TimeSeriesTableVec3 analyzeVec3(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) {
    return new TimeSeriesTableVec3(opensimSimulationJNI.analyzeVec3(Model.getCPtr(model), model, TimeSeriesTable.getCPtr(statesTable), statesTable, TimeSeriesTable.getCPtr(controlsTable), controlsTable, StdVectorString.getCPtr(outputPaths), outputPaths), true);
  }

  public static TimeSeriesTableSpatialVec analyzeSpatialVec(Model model, TimeSeriesTable statesTable, TimeSeriesTable controlsTable, StdVectorString outputPaths) {
    return new TimeSeriesTableSpatialVec(opensimSimulationJNI.analyzeSpatialVec(Model.getCPtr(model), model, TimeSeriesTable.getCPtr(statesTable), statesTable, TimeSeriesTable.getCPtr(controlsTable), controlsTable, StdVectorString.getCPtr(outputPaths), outputPaths), true);
  }

}
