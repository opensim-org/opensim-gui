/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  The squared difference between a model frame's origin position and a<br>
 * reference position value, summed over the frames for which a reference is<br>
 * provided, and integrated over the phase. This can be used to track position<br>
 * quantities in the model that don't correspond to model degrees of freedom.<br>
 * The reference can be provided as a trajectory of SimTK::Vec3%s<br>
 * representing the translation reference data, or as a states trajectory from<br>
 * which the tracked translation reference is computed. Both translation and<br>
 * states references can be provided as a file name to a STO or CSV file (or<br>
 * other file types for which there is a FileAdapter), or programmatically as<br>
 * a TimeSeriesTableVec3 (for the translation reference) or as a scalar<br>
 * TimeSeriesTable (for the states reference).<br>
 * <br>
 * Technically, a cost function with the same effect could be achieved with the<br>
 * MocoMarkerTrackingCost class. However, this class avoids the need for adding<br>
 * markers to the frame origins and provides the convenient<br>
 * setStatesReference() and setStatesReferenceFile() methods which let the user<br>
 * set up a tracking cost given only a states trajectory.<br>
 * <br>
 * This cost requires realization to SimTK::Stage::Position.<br>
 * <br>
 * 
 */
public class MocoTranslationTrackingGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoTranslationTrackingGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoTranslationTrackingGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoTranslationTrackingGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoTranslationTrackingGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoTranslationTrackingGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoTranslationTrackingGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoTranslationTrackingGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoTranslationTrackingGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoTranslationTrackingGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoTranslationTrackingGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoTranslationTrackingGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoTranslationTrackingGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoTranslationTrackingGoal() {
    this(opensimMocoJNI.new_MocoTranslationTrackingGoal__SWIG_0(), true);
  }

  public MocoTranslationTrackingGoal(String name) {
    this(opensimMocoJNI.new_MocoTranslationTrackingGoal__SWIG_1(name), true);
  }

  public MocoTranslationTrackingGoal(String name, double weight) {
    this(opensimMocoJNI.new_MocoTranslationTrackingGoal__SWIG_2(name, weight), true);
  }

  /**
   *  Set the translation of individual frames in ground to be<br>
   *     tracked in the cost. The column labels of the provided reference must<br>
   *     be paths to frames in the model, e.g. `/bodyset/torso`. If the<br>
   *     frame_paths property is empty, all frames with data in this reference<br>
   *     will be tracked. Otherwise, only the frames specified via<br>
   *     setFramePaths() will be tracked. Calling this function clears the values<br>
   *     provided via setStatesReference(), setTranslationReference(), or the<br>
   *     `states_reference_file` property, if any. 
   */
  public void setTranslationReferenceFile(String filepath) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setTranslationReferenceFile(swigCPtr, this, filepath);
  }

  /**
   *  Each column label must be the path of a valid frame path (see<br>
   *     setTranslationReferenceFile()). Calling this function clears the<br>
   *     `states_reference_file` and `translation_reference_file` properties or<br>
   *     the table provided via setStatesReference(), if any. 
   */
  public void setTranslationReference(TimeSeriesTableVec3 ref) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setTranslationReference(swigCPtr, this, TimeSeriesTableVec3.getCPtr(ref), ref);
  }

  /**
   *  Provide a table containing values of model state<br>
   *     variables. These data are used to create a StatesTrajectory internally,<br>
   *     from which the translation data for the frames specified in<br>
   *     setFramePaths() are computed. Each column label in the reference must be<br>
   *     the path of a state variable, e.g., `/jointset/ankle_angle_r/value`.<br>
   *     Calling this function clears the table provided via<br>
   *     setTranslationReference(), or the<br>
   *     `translation_reference_file` property, if any. The table is not loaded<br>
   *     until the MocoProblem is initialized. 
   */
  public void setStatesReference(TableProcessor ref) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setStatesReference(swigCPtr, this, TableProcessor.getCPtr(ref), ref);
  }

  /**
   *  Set the paths to frames in the model that this cost term will track. The<br>
   *     names set here must correspond to OpenSim::Component%s that derive from<br>
   *     OpenSim::Frame, which includes 'position' (SimTK::Vec3) as an output.<br>
   *     Replaces the frame path set if it already exists. 
   */
  public void setFramePaths(StdVectorString paths) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setFramePaths(swigCPtr, this, StdVectorString.getCPtr(paths), paths);
  }

  /**
   *  Set the weight for an individual frame's translation tracking. If a<br>
   *     weight is already set for the requested frame, then the provided weight<br>
   *     replaces the previous weight. An exception is thrown if a weight<br>
   *     for an unknown frame is provided. 
   */
  public void setWeightForFrame(String frameName, double weight) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setWeightForFrame(swigCPtr, this, frameName, weight);
  }

  /**
   *  Provide a MocoWeightSet to weight frame translation tracking in the<br>
   *     cost. Replaces the weight set if it already exists. 
   */
  public void setWeightSet(MocoWeightSet weightSet) {
    opensimMocoJNI.MocoTranslationTrackingGoal_setWeightSet(swigCPtr, this, MocoWeightSet.getCPtr(weightSet), weightSet);
  }

  /**
   *  If no states reference has been provided, this returns an empty<br>
   *     processor. 
   */
  public TableProcessor getStatesReference() {
    return new TableProcessor(opensimMocoJNI.MocoTranslationTrackingGoal_getStatesReference(swigCPtr, this), false);
  }

  /**
   *  If no translation reference file has been provided, this returns an<br>
   *     empty string. 
   */
  public String getTranslationReferenceFile() {
    return opensimMocoJNI.MocoTranslationTrackingGoal_getTranslationReferenceFile(swigCPtr, this);
  }

}
