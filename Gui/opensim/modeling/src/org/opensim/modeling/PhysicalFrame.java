/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A PhysicalFrame is a Frame that locates a physical element of the multi-<br>
 * body system that underlies a Model. A PhysicalFrame supports physical <br>
 * connections (e.g. Joints, Constraints) and is the Frame type upon which <br>
 * forces can be applied. A concrete example of a PhysicalFrame is a Body.<br>
 * Attributes of a Body (its center-of-mass, geometry, ...) are located in the<br>
 * Body frame. Bodies are connected by Joints and Constraints and Forces are <br>
 * readily applied to them. A location that represents an offset from the Body<br>
 * frame, can also be a PhysicalFrame (e.g. a PhysicalOffsetFrame).<br>
 * <br>
 * @see PhysicalOffsetFrame<br>
 * <br>
 * @author Matt DeMers<br>
 * @author Ajay Seth
 */
public class PhysicalFrame extends Frame {
  private transient long swigCPtr;

  public PhysicalFrame(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.PhysicalFrame_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(PhysicalFrame obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_PhysicalFrame(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void addWrapObject(WrapObject wrapObject) {
      wrapObject.markAdopted();
      private_addWrapObject(wrapObject);
  }

  public static PhysicalFrame safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.PhysicalFrame_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new PhysicalFrame(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.PhysicalFrame_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.PhysicalFrame_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.PhysicalFrame_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new PhysicalFrame(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.PhysicalFrame_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_WrapObjectSet(PhysicalFrame source) {
    opensimSimulationJNI.PhysicalFrame_copyProperty_WrapObjectSet(swigCPtr, this, PhysicalFrame.getCPtr(source), source);
  }

  public WrapObjectSet get_WrapObjectSet(int i) {
    return new WrapObjectSet(opensimSimulationJNI.PhysicalFrame_get_WrapObjectSet__SWIG_0(swigCPtr, this, i), false);
  }

  public WrapObjectSet upd_WrapObjectSet(int i) {
    return new WrapObjectSet(opensimSimulationJNI.PhysicalFrame_upd_WrapObjectSet__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_WrapObjectSet(int i, WrapObjectSet value) {
    opensimSimulationJNI.PhysicalFrame_set_WrapObjectSet__SWIG_0(swigCPtr, this, i, WrapObjectSet.getCPtr(value), value);
  }

  public int append_WrapObjectSet(WrapObjectSet value) {
    return opensimSimulationJNI.PhysicalFrame_append_WrapObjectSet(swigCPtr, this, WrapObjectSet.getCPtr(value), value);
  }

  public void constructProperty_WrapObjectSet(WrapObjectSet initValue) {
    opensimSimulationJNI.PhysicalFrame_constructProperty_WrapObjectSet(swigCPtr, this, WrapObjectSet.getCPtr(initValue), initValue);
  }

  public WrapObjectSet get_WrapObjectSet() {
    return new WrapObjectSet(opensimSimulationJNI.PhysicalFrame_get_WrapObjectSet__SWIG_1(swigCPtr, this), false);
  }

  public WrapObjectSet upd_WrapObjectSet() {
    return new WrapObjectSet(opensimSimulationJNI.PhysicalFrame_upd_WrapObjectSet__SWIG_1(swigCPtr, this), false);
  }

  public void set_WrapObjectSet(WrapObjectSet value) {
    opensimSimulationJNI.PhysicalFrame_set_WrapObjectSet__SWIG_1(swigCPtr, this, WrapObjectSet.getCPtr(value), value);
  }

  /**
   * <br>
   *     This method returns the MobilizedBodyIndex of the MobilizedBody for this<br>
   *     PhysicalFrame. This index is only available after Model::initSystem() has<br>
   *     been invoked.<br>
   * <br>
   *     The MobilizedBodyIndex is necessary to access the underlying MobilizedBody<br>
   *     in the System. It allows access to physical quantities (e.g. forces)<br>
   *     associated with individual PhysicalFrames. For examples, the underlying<br>
   *     MultibodySystem's net body forces are represented as a Vector of spatial<br>
   *     forces (torque and force on each body) and it is indexed by the <br>
   *     MobilizedBodyIndex.<br>
   * <br>
   *     @return index The MobilizedBodyIndex corresponding to this PhysicalFrame's<br>
   *                underlying MobilizedBody<br>
   * <br>
   *     @see getMobilizedBody, updMobilizedBody
   */
  public int getMobilizedBodyIndex() {
    return opensimSimulationJNI.PhysicalFrame_getMobilizedBodyIndex(swigCPtr, this);
  }

  /**
   *     Access a readable SimTK::MobilizedBody that backs this PhysicalFrame.<br>
   *     The MobilizedBody is only available after Model::initSystem() has been<br>
   *     invoked.<br>
   *     @see getMobilizedBodyIndex
   */
  public SWIGTYPE_p_SimTK__MobilizedBody getMobilizedBody() {
    return new SWIGTYPE_p_SimTK__MobilizedBody(opensimSimulationJNI.PhysicalFrame_getMobilizedBody(swigCPtr, this), false);
  }

  /**
   *     Access a writable SimTK::MobilizedBody that backs this PhysicalFrame.<br>
   *     The MobilizedBody is only available after Model::initSystem() has been<br>
   *     invoked.<br>
   *     @see getMobilizedBodyIndex
   */
  public SWIGTYPE_p_SimTK__MobilizedBody updMobilizedBody() {
    return new SWIGTYPE_p_SimTK__MobilizedBody(opensimSimulationJNI.PhysicalFrame_updMobilizedBody(swigCPtr, this), false);
  }

  /**
   * <br>
   * Deprecated methods for intermediate integration of Frames  Get the named wrap object, if it exists.<br>
   * <br>
   * @param aName Name of the wrap object.<br>
   * @return const Pointer to the wrap object.
   */
  public WrapObject getWrapObject(String aName) {
    long cPtr = opensimSimulationJNI.PhysicalFrame_getWrapObject(swigCPtr, this, aName);
    return (cPtr == 0) ? null : new WrapObject(cPtr, false);
  }

  public WrapObjectSet getWrapObjectSet() {
    return new WrapObjectSet(opensimSimulationJNI.PhysicalFrame_getWrapObjectSet(swigCPtr, this), false);
  }

  /**
   *  Add a wrap object to the Body. Note that the Body takes ownership of<br>
   * the WrapObject.
   */
  private void private_addWrapObject(WrapObject wrapObject) {
    opensimSimulationJNI.PhysicalFrame_private_addWrapObject(swigCPtr, this, WrapObject.getCPtr(wrapObject), wrapObject);
  }

}
