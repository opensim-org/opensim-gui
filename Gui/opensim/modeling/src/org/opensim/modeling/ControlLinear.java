/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class that represents a piece-wise linear control curve.<br>
 * <br>
 * The curve is specified by an array of control nodes (see class<br>
 * ControlLinearNode) that occur at monotonically increasing times.<br>
 * The value of the control curve is computed by linearly interpolating<br>
 * the values of the appropriate control nodes.<br>
 * <br>
 * For this Control, <i>parameters</i> are the values of the<br>
 * ControlLinearNode's.<br>
 * <br>
 * @author Frank C. Anderson<br>
 * @version 1.0
 */
public class ControlLinear extends Control {
  private transient long swigCPtr;

  public ControlLinear(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ControlLinear_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ControlLinear obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ControlLinear(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ControlLinear safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ControlLinear_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ControlLinear(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ControlLinear_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ControlLinear_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ControlLinear_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ControlLinear(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ControlLinear_getConcreteClassName(swigCPtr, this);
  }

  public ControlLinear() {
    this(opensimSimulationJNI.new_ControlLinear__SWIG_0(), true);
  }

  public ControlLinear(ControlLinear aControl) {
    this(opensimSimulationJNI.new_ControlLinear__SWIG_1(ControlLinear.getCPtr(aControl), aControl), true);
  }

  /**
   * Copy the member variables of the specified ControlLinear over<br>
   * to this ControlLinear.
   */
  public void copyData(ControlLinear aControl) {
    opensimSimulationJNI.ControlLinear_copyData(swigCPtr, this, ControlLinear.getCPtr(aControl), aControl);
  }

  /**
   * Sets whether or not step functions are used between control nodes or<br>
   * linear interpolation.  When step functions are used, the value of the<br>
   * control curve between two nodes is the value of the node that occurs<br>
   * <b>later</b> in time.<br>
   * <br>
   * @param aTrueFalse If true, step functions will be used to determine the<br>
   * value between adjacent nodes.  If false, linear interpolation will be used.
   */
  public void setUseSteps(boolean aTrueFalse) {
    opensimSimulationJNI.ControlLinear_setUseSteps(swigCPtr, this, aTrueFalse);
  }

  /**
   * @see setUseSteps()
   */
  public boolean getUseSteps() {
    return opensimSimulationJNI.ControlLinear_getUseSteps(swigCPtr, this);
  }

  /**
   * Sets the position gain for PD follower filter.  This value is relevant<br>
   * only if the PD follower filter will be used.<br>
   * <br>
   * @see setFilterOn()<br>
   * <br>
   * @param aKp Value of position gain for the PD follower filter.
   */
  public void setKp(double aKp) {
    opensimSimulationJNI.ControlLinear_setKp(swigCPtr, this, aKp);
  }

  /**
   *  @see setKp()
   */
  public double getKp() {
    return opensimSimulationJNI.ControlLinear_getKp(swigCPtr, this);
  }

  /**
   * Sets the velocity gain for PD follower filter.  This value is relevant<br>
   * only if the PD follower filter will be used.<br>
   * <br>
   * @see setFilterOn()<br>
   * <br>
   * @param aKv Value of velocity gain for the PD follower filter.
   */
  public void setKv(double aKv) {
    opensimSimulationJNI.ControlLinear_setKv(swigCPtr, this, aKv);
  }

  /**
   *  @see setKv()
   */
  public double getKv() {
    return opensimSimulationJNI.ControlLinear_getKv(swigCPtr, this);
  }

  public int getNumParameters() {
    return opensimSimulationJNI.ControlLinear_getNumParameters(swigCPtr, this);
  }

  public void setParameterMin(int aI, double aMin) {
    opensimSimulationJNI.ControlLinear_setParameterMin(swigCPtr, this, aI, aMin);
  }

  public double getParameterMin(int aI) {
    return opensimSimulationJNI.ControlLinear_getParameterMin(swigCPtr, this, aI);
  }

  public void setParameterMax(int aI, double aMax) {
    opensimSimulationJNI.ControlLinear_setParameterMax(swigCPtr, this, aI, aMax);
  }

  public double getParameterMax(int aI) {
    return opensimSimulationJNI.ControlLinear_getParameterMax(swigCPtr, this, aI);
  }

  /**
   * Get the time at which a parameter (control curve value) is specified.<br>
   * <br>
   * Not for minimum or maximum values of parameters; only for specified<br>
   * values of the control curve, as set via setParameterValue() or<br>
   * setControlValue().<br>
   * <br>
   * @param aI Index of the parameter.<br>
   * @throws Exception if aI is invalid.
   */
  public double getParameterTime(int aI) {
    return opensimSimulationJNI.ControlLinear_getParameterTime(swigCPtr, this, aI);
  }

  /**
   * @param aI Index of the parameter.<br>
   * @param rTLower The time of parameter aI-1 or of<br>
   * aI if there is no parameter aI-1.  If there are no ControlLinearNode's<br>
   * at all or if aI is invalid, rTLower is given the value SimTK::NaN.<br>
   * @param rTUpper The time of parameter aI+1 or of<br>
   * aI if there is no parameter aI+1.  If there are no ControlLinearNode's<br>
   * at all or if aI is invalid, rTUpper is given the value SimTK::NaN.
   */
  public void getParameterNeighborhood(int aI, SWIGTYPE_p_double rTLower, SWIGTYPE_p_double rTUpper) {
    opensimSimulationJNI.ControlLinear_getParameterNeighborhood(swigCPtr, this, aI, SWIGTYPE_p_double.getCPtr(rTLower), SWIGTYPE_p_double.getCPtr(rTUpper));
  }

  /**
   * @param aT time<br>
   * @param rList If aT lies between two nodes, the indices of these<br>
   * two nodes are returned; if aT equals the time at which a node occurs, the<br>
   * index of that node is returned; if aT is less than the time of the first<br>
   * node in the array, the index of the first node (i.e., 0) is returned;<br>
   * if aT is greater than the time of the last node, the index of the last<br>
   * node (i.e., size-1) is returned.
   */
  public int getParameterList(double aT, ArrayInt rList) {
    return opensimSimulationJNI.ControlLinear_getParameterList__SWIG_0(swigCPtr, this, aT, ArrayInt.getCPtr(rList), rList);
  }

  public int getParameterList(double aT1, double aT2, ArrayInt rList) {
    return opensimSimulationJNI.ControlLinear_getParameterList__SWIG_1(swigCPtr, this, aT1, aT2, ArrayInt.getCPtr(rList), rList);
  }

  /**
   * @param aI Index of the parameter.<br>
   * @param aP The parameter value is simply the value of<br>
   * the aI-th ControlLinearNode (which is the value of the control curve).
   */
  public void setParameterValue(int aI, double aP) {
    opensimSimulationJNI.ControlLinear_setParameterValue(swigCPtr, this, aI, aP);
  }

  /**
   *  @see setParameterValue()
   */
  public double getParameterValue(int aI) {
    return opensimSimulationJNI.ControlLinear_getParameterValue(swigCPtr, this, aI);
  }

  /**
   * This method adds a set of control parameters at the specified time unless<br>
   * the specified time equals the time of an existing ControlLinearNode,<br>
   * in which case the parameters of that control node are changed.
   */
  public void setControlValue(double aT, double aX) {
    opensimSimulationJNI.ControlLinear_setControlValue(swigCPtr, this, aT, aX);
  }

  public double getControlValue(double aT) {
    return opensimSimulationJNI.ControlLinear_getControlValue(swigCPtr, this, aT);
  }

  public double getControlValueMin(double aT) {
    return opensimSimulationJNI.ControlLinear_getControlValueMin__SWIG_0(swigCPtr, this, aT);
  }

  public double getControlValueMin() {
    return opensimSimulationJNI.ControlLinear_getControlValueMin__SWIG_1(swigCPtr, this);
  }

  /**
   * This method adds a set of control parameters at the specified time unless<br>
   * the specified time equals the time of an existing control node, in which<br>
   * case the parameters of that control node are changed.
   */
  public void setControlValueMin(double aT, double aX) {
    opensimSimulationJNI.ControlLinear_setControlValueMin(swigCPtr, this, aT, aX);
  }

  public double getControlValueMax(double aT) {
    return opensimSimulationJNI.ControlLinear_getControlValueMax__SWIG_0(swigCPtr, this, aT);
  }

  public double getControlValueMax() {
    return opensimSimulationJNI.ControlLinear_getControlValueMax__SWIG_1(swigCPtr, this);
  }

  /**
   * This method adds a set of control parameters at the specified time unless<br>
   * the specified time equals the time of an existing control node, in which<br>
   * case the parameters of that control node are changed.
   */
  public void setControlValueMax(double aT, double aX) {
    opensimSimulationJNI.ControlLinear_setControlValueMax(swigCPtr, this, aT, aX);
  }

  public void clearControlNodes() {
    opensimSimulationJNI.ControlLinear_clearControlNodes(swigCPtr, this);
  }

  public SetControlNodes getControlValues() {
    return new SetControlNodes(opensimSimulationJNI.ControlLinear_getControlValues(swigCPtr, this), false);
  }

  public SetControlNodes getControlMinValues() {
    return new SetControlNodes(opensimSimulationJNI.ControlLinear_getControlMinValues(swigCPtr, this), false);
  }

  public SetControlNodes getControlMaxValues() {
    return new SetControlNodes(opensimSimulationJNI.ControlLinear_getControlMaxValues(swigCPtr, this), false);
  }

  /**
   *  Called from GUI to work around early garbage collection.
   */
  public void insertNewValueNode(int index, ControlLinearNode newNode) {
    opensimSimulationJNI.ControlLinear_insertNewValueNode(swigCPtr, this, index, ControlLinearNode.getCPtr(newNode), newNode);
  }

  /**
   *  Called from GUI to work around early garbage collection.
   */
  public void insertNewMinNode(int index, ControlLinearNode newNode) {
    opensimSimulationJNI.ControlLinear_insertNewMinNode(swigCPtr, this, index, ControlLinearNode.getCPtr(newNode), newNode);
  }

  /**
   *  Called from GUI to work around early garbage collection.
   */
  public void insertNewMaxNode(int index, ControlLinearNode newNode) {
    opensimSimulationJNI.ControlLinear_insertNewMaxNode(swigCPtr, this, index, ControlLinearNode.getCPtr(newNode), newNode);
  }

  /**
   * The time corresponding to the first ControlLinearNode.
   */
  public double getFirstTime() {
    return opensimSimulationJNI.ControlLinear_getFirstTime(swigCPtr, this);
  }

  /**
   * The time corresponding to the last ControlLinearNode
   */
  public double getLastTime() {
    return opensimSimulationJNI.ControlLinear_getLastTime(swigCPtr, this);
  }

  /**
   * The number of control nodes is reduced by first applying a lowpass filter<br>
   * to the sequence of control nodes using a specified cutoff frequency and<br>
   * then removing nodes that keep the curve within a specified distance<br>
   * to the low-pass filtered curve.<br>
   * <br>
   * The PropertySet should contain:<br>
   * <br>
   * <table><br>
   * <tr><td>TYPE</td><td>NAME</td></tr><br>
   * <tr><td>PropertyDbl</td><td>cutoff_frequency</td></tr><br>
   * <tr><td>PropertyDbl</td><td>distance</td></tr><br>
   * </table><br>
   * <br>
   * @param aProperties PropertySet containing the needed properties for<br>
   * this method.<br>
   * @throws Exception if an error is encountered.
   */
  public void simplify(SWIGTYPE_p_PropertySet aProperties) {
    opensimSimulationJNI.ControlLinear_simplify__SWIG_0(swigCPtr, this, SWIGTYPE_p_PropertySet.getCPtr(aProperties));
  }

  /**
   * Another interface to simplify that:<br>
   * (1) does not require properties, and (2) returns bool on failure<br>
   * for a more graceful batch simplification.
   */
  public boolean simplify(double cutoffFrequency, double distance) {
    return opensimSimulationJNI.ControlLinear_simplify__SWIG_1(swigCPtr, this, cutoffFrequency, distance);
  }

  /**
   * Filter the control curve at a particular time using a PD follower filter.<br>
   * <br>
   * @see setFilterOn()<br>
   * <br>
   * @param aT Time at which to compute a new, filtered control value
   */
  public void filter(double aT) {
    opensimSimulationJNI.ControlLinear_filter(swigCPtr, this, aT);
  }

  /**
   * Linearly interpolate or extrapolate given two points.<br>
   * <br>
   * @param aX1 X coordinate of point 1.<br>
   * @param aY1 Y coordinate of point 1.<br>
   * @param aX2 X coordinate of point 2.<br>
   * @param aY2 Y coordinate of point 2.<br>
   * @param aX X coordinate whose corresponding Y coordinate is desired.<br>
   * @return Y value corresponding to aX.
   */
  public static double Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) {
    return opensimSimulationJNI.ControlLinear_Interpolate(aX1, aY1, aX2, aY2, aX);
  }

}
