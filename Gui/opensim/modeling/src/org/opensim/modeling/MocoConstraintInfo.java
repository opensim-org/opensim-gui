/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Information for a given constraint in the optimal control problem. The name<br>
 * should correspond to a MocoPathConstraint in the problem.<br>
 * 
 */
public class MocoConstraintInfo extends OpenSimObject {
  private transient long swigCPtr;

  public MocoConstraintInfo(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoConstraintInfo_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoConstraintInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(MocoConstraintInfo obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoConstraintInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoConstraintInfo safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoConstraintInfo_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoConstraintInfo(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoConstraintInfo_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoConstraintInfo_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoConstraintInfo_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoConstraintInfo(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoConstraintInfo_getConcreteClassName(swigCPtr, this);
  }

  public MocoConstraintInfo() {
    this(opensimMocoJNI.new_MocoConstraintInfo(), true);
  }

  public int getNumEquations() {
    return opensimMocoJNI.MocoConstraintInfo_getNumEquations(swigCPtr, this);
  }

  /**
   *  Get the bounds on the scalar constraint equations. If the number of<br>
   *  equations have been set, but not the bounds, zero-bounds are returned<br>
   *  as a default. If nothing has been set, this returns an empty vector.<br>
   *  Note: the return value is constructed fresh on every call from<br>
   *  the internal property. Avoid repeated calls to this function.
   */
  public StdVectorMocoBounds getBounds() {
    return new StdVectorMocoBounds(opensimMocoJNI.MocoConstraintInfo_getBounds(swigCPtr, this), true);
  }

  /**
   *  Get the suffixes for the scalar constraint equations. If the suffixes<br>
   *  have not been set, this returns an empty vector.<br>
   *  Note: the return value is constructed fresh on every call from<br>
   *  the internal property. Avoid repeated calls to this function.
   */
  public StdVectorString getSuffixes() {
    return new StdVectorString(opensimMocoJNI.MocoConstraintInfo_getSuffixes(swigCPtr, this), true);
  }

  /**
   *  Note: if the number of equations has not been set, this updates<br>
   *  the internal equation count variable. If the number of equations has<br>
   *  been set and the vector passed is the incorrect size, an error is<br>
   *  thrown.
   */
  public void setBounds(StdVectorMocoBounds bounds) {
    opensimMocoJNI.MocoConstraintInfo_setBounds(swigCPtr, this, StdVectorMocoBounds.getCPtr(bounds), bounds);
  }

  /**
   *  
   */
  public void setSuffixes(StdVectorString suffixes) {
    opensimMocoJNI.MocoConstraintInfo_setSuffixes(swigCPtr, this, StdVectorString.getCPtr(suffixes), suffixes);
  }

  /**
   *  Get a list of constraint labels based on the constraint name and, if<br>
   *     specified, the list of suffixes. If no suffixes have been specified,<br>
   *     zero-indexed, numeric suffixes will be applied as a default. The length<br>
   *     of the returned vector is equal to the value returned by<br>
   *     getNumEquations(). 
   */
  public StdVectorString getConstraintLabels() {
    return new StdVectorString(opensimMocoJNI.MocoConstraintInfo_getConstraintLabels(swigCPtr, this), true);
  }

  /**
   *  Print the name, type, number of scalar equations, and bounds for this<br>
   *     constraint. 
   */
  public void printDescription() {
    opensimMocoJNI.MocoConstraintInfo_printDescription(swigCPtr, this);
  }

}
