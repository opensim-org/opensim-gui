/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * <br>
 * A controller that computes controls for a model based on a linear combination<br>
 * of a set of Input control signals and a set of synergy vectors. <br>
 * <br>
 * Each synergy vector represents a set of control weights that are multiplied <br>
 * by the Input control signals to compute the contribution to the total control<br>
 * signal for that synergy. The synergy vectors should have the same size as the<br>
 * number of actuators connected to the controller, and the controller expects<br>
 * the number Input controls to be equal to the number of synergy vectors.<br>
 * <br>
 * Added synergy vectors are named "synergy_vector_<index>", where &lt;index&gt; is<br>
 * the index of the vector in the controller (e.g., "synergy_vector_0", <br>
 * "synergy_vector_1", etc.). Similarly, the Input control labels are named<br>
 * "synergy_excitation_<index>" (e.g., "synergy_excitation_0",<br>
 * "synergy_excitation_1", etc.).<br>
 * <br>
 * Note: In Moco, SynergyController%s in a model provided to MocoProblem will<br>
 * be automatically detected. The Input controls for each SynergyController will<br>
 * be given variable names based on the path to the controller appended with the<br>
 * Input control labels (e.g., "/path/to/controller/synergy_excitation_0"). 
 */
public class SynergyController extends InputController {
  private transient long swigCPtr;

  public SynergyController(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.SynergyController_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SynergyController obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(SynergyController obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_SynergyController(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static SynergyController safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.SynergyController_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new SynergyController(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.SynergyController_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.SynergyController_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.SynergyController_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new SynergyController(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.SynergyController_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_synergy_vectors(SynergyController source) {
    opensimSimulationJNI.SynergyController_copyProperty_synergy_vectors(swigCPtr, this, SynergyController.getCPtr(source), source);
  }

  public SynergyVector get_synergy_vectors(int i) {
    return new SynergyVector(opensimSimulationJNI.SynergyController_get_synergy_vectors(swigCPtr, this, i), false);
  }

  public SynergyVector upd_synergy_vectors(int i) {
    return new SynergyVector(opensimSimulationJNI.SynergyController_upd_synergy_vectors(swigCPtr, this, i), false);
  }

  public void set_synergy_vectors(int i, SynergyVector value) {
    opensimSimulationJNI.SynergyController_set_synergy_vectors(swigCPtr, this, i, SynergyVector.getCPtr(value), value);
  }

  public int append_synergy_vectors(SynergyVector value) {
    return opensimSimulationJNI.SynergyController_append_synergy_vectors(swigCPtr, this, SynergyVector.getCPtr(value), value);
  }

  public void constructProperty_synergy_vectors() {
    opensimSimulationJNI.SynergyController_constructProperty_synergy_vectors(swigCPtr, this);
  }

  public SynergyController() {
    this(opensimSimulationJNI.new_SynergyController__SWIG_0(), true);
  }

  public SynergyController(SynergyController other) {
    this(opensimSimulationJNI.new_SynergyController__SWIG_1(SynergyController.getCPtr(other), other), true);
  }

  /**
   * Add a synergy vector to the controller. <br>
   * <br>
   * The size of the vector should be equal to the number of actuators<br>
   * connected to the controller. Adding a synergy vector increases the number<br>
   * of control inputs expected by the controller by one.
   */
  public void addSynergyVector(Vector vector) {
    opensimSimulationJNI.SynergyController_addSynergyVector(swigCPtr, this, Vector.getCPtr(vector), vector);
  }

  /**
   * Update an existing synergy vector in the controller. <br>
   * <br>
   * The size of the vector should be equal to the number of actuators<br>
   * connected to the controller. 
   */
  public void updSynergyVector(int index, Vector vector) {
    opensimSimulationJNI.SynergyController_updSynergyVector(swigCPtr, this, index, Vector.getCPtr(vector), vector);
  }

  /**
   * Get a synergy vector by index. 
   */
  public Vector getSynergyVector(int index) {
    return new Vector(opensimSimulationJNI.SynergyController_getSynergyVector(swigCPtr, this, index), false);
  }

  /**
   * Get the number of synergies vectors in the controller. <br>
   * <br>
   * The controller expects this number of control Inputs to be connected when<br>
   * the connections are finalized in the model.
   */
  public int getNumSynergies() {
    return opensimSimulationJNI.SynergyController_getNumSynergies(swigCPtr, this);
  }

  /**
   * Get all synergy vectors as a matrix. <br>
   * <br>
   * The number of rows in the matrix is equal to the number of actuators<br>
   * connected to the controller, and the number of columns is equal to the<br>
   * number of synergy vectors in the controller. <br>
   * <br>
   * 
   */
  public Matrix getSynergyVectorsAsMatrix() {
    return new Matrix(opensimSimulationJNI.SynergyController_getSynergyVectorsAsMatrix(swigCPtr, this), true);
  }

  public StdVectorString getInputControlLabels() {
    return new StdVectorString(opensimSimulationJNI.SynergyController_getInputControlLabels(swigCPtr, this), true);
  }

  public void computeControlsImpl(State s, Vector controls) {
    opensimSimulationJNI.SynergyController_computeControlsImpl(swigCPtr, this, State.getCPtr(s), s, Vector.getCPtr(controls), controls);
  }

}
