/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class for scaling a model. The default method of scaling involves<br>
 * measuring distances between pairs of markers on the model and in a<br>
 * static pose to determine scale factors.<br>
 * <br>
 * @author Peter Loan<br>
 * @version 1.0
 */
public class ModelScaler extends OpenSimObject {
  private transient long swigCPtr;

  public ModelScaler(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.ModelScaler_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ModelScaler obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_ModelScaler(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

    public void addScale(Scale scale){
        scale.markAdopted();
        private_addScale(scale);
    }

    public void addMeasurement(Measurement meas){
        meas.markAdopted();
        private_addMeasurement(meas);
    }

  public static ModelScaler safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModelScaler_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ModelScaler(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModelScaler_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ModelScaler(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getConcreteClassName(swigCPtr, this);
  }

  public ModelScaler() {
    this(opensimActuatorsAnalysesToolsJNI.new_ModelScaler__SWIG_0(), true);
  }

  public ModelScaler(ModelScaler aModelScaler) {
    this(opensimActuatorsAnalysesToolsJNI.new_ModelScaler__SWIG_1(ModelScaler.getCPtr(aModelScaler), aModelScaler), true);
  }

  public void copyData(ModelScaler aModelScaler) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_copyData(swigCPtr, this, ModelScaler.getCPtr(aModelScaler), aModelScaler);
  }

  public boolean processModel(Model aModel, String aPathToSubject, double aFinalMass) {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_processModel__SWIG_0(swigCPtr, this, Model.getCPtr(aModel), aModel, aPathToSubject, aFinalMass);
  }

  public boolean processModel(Model aModel, String aPathToSubject) {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_processModel__SWIG_1(swigCPtr, this, Model.getCPtr(aModel), aModel, aPathToSubject);
  }

  public boolean processModel(Model aModel) {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_processModel__SWIG_2(swigCPtr, this, Model.getCPtr(aModel), aModel);
  }

  public static void registerTypes() {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_registerTypes();
  }

  /**
   * add a measurement
   */
  private void private_addMeasurement(Measurement aMeasurement) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_private_addMeasurement(swigCPtr, this, Measurement.getCPtr(aMeasurement), aMeasurement);
  }

  /**
   * add a scale factor to current scaleSet
   */
  private void private_addScale(Scale aScale) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_private_addScale(swigCPtr, this, Scale.getCPtr(aScale), aScale);
  }

  public boolean getApply() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getApply(swigCPtr, this);
  }

  public void setApply(boolean aApply) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setApply(swigCPtr, this, aApply);
  }

  public MeasurementSet getMeasurementSet() {
    return new MeasurementSet(opensimActuatorsAnalysesToolsJNI.ModelScaler_getMeasurementSet(swigCPtr, this), false);
  }

  public void setMeasurementSet(MeasurementSet measurementSet) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setMeasurementSet(swigCPtr, this, MeasurementSet.getCPtr(measurementSet), measurementSet);
  }

  public ScaleSet getScaleSet() {
    return new ScaleSet(opensimActuatorsAnalysesToolsJNI.ModelScaler_getScaleSet(swigCPtr, this), false);
  }

  public void setScaleSetFile(String aScaleSetFilename) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setScaleSetFile(swigCPtr, this, aScaleSetFilename);
  }

  public ArrayDouble getTimeRange() {
    return new ArrayDouble(opensimActuatorsAnalysesToolsJNI.ModelScaler_getTimeRange(swigCPtr, this), false);
  }

  public void setTimeRange(ArrayDouble timeRange) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setTimeRange(swigCPtr, this, ArrayDouble.getCPtr(timeRange), timeRange);
  }

  public boolean getPreserveMassDist() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getPreserveMassDist(swigCPtr, this);
  }

  public void setPreserveMassDist(boolean preserveMassDist) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setPreserveMassDist(swigCPtr, this, preserveMassDist);
  }

  public ArrayStr getScalingOrder() {
    return new ArrayStr(opensimActuatorsAnalysesToolsJNI.ModelScaler_getScalingOrder(swigCPtr, this), false);
  }

  public void setScalingOrder(ArrayStr scalingOrder) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setScalingOrder(swigCPtr, this, ArrayStr.getCPtr(scalingOrder), scalingOrder);
  }

  public String getMarkerFileName() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getMarkerFileName(swigCPtr, this);
  }

  public void setMarkerFileName(String aMarkerFileName) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setMarkerFileName(swigCPtr, this, aMarkerFileName);
  }

  public String getOutputModelFileName() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getOutputModelFileName(swigCPtr, this);
  }

  public void setOutputModelFileName(String aOutputModelFileName) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setOutputModelFileName(swigCPtr, this, aOutputModelFileName);
  }

  public String getOutputScaleFileName() {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_getOutputScaleFileName(swigCPtr, this);
  }

  public void setOutputScaleFileName(String aOutputScaleFileName) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setOutputScaleFileName(swigCPtr, this, aOutputScaleFileName);
  }

  public void setPrintResultFiles(boolean aToWrite) {
    opensimActuatorsAnalysesToolsJNI.ModelScaler_setPrintResultFiles(swigCPtr, this, aToWrite);
  }

  public double computeMeasurementScaleFactor(State s, Model aModel, MarkerData aMarkerData, Measurement aMeasurement) {
    return opensimActuatorsAnalysesToolsJNI.ModelScaler_computeMeasurementScaleFactor(swigCPtr, this, State.getCPtr(s), s, Model.getCPtr(aModel), aModel, MarkerData.getCPtr(aMarkerData), aMarkerData, Measurement.getCPtr(aMeasurement), aMeasurement);
  }

}
