/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A Tool that performs an Inverse Dynamics analysis with a given model.<br>
 * Inverse Dynamics is the solution for the generalized-coordinate forces that<br>
 * generate given generalized-coordinate accelerations at a given state.<br>
 * This Tool determines the state from provided coordinate trajectories as<br>
 * functions as that are twice differentiable to estimate velocities and<br>
 * accelerations.<br>
 * <br>
 * As an additional service, the InverseDynamicsTool can provide an equivalent <br>
 * body force (torque and force) applied to the joint frame. Since generalized<br>
 * forces include scaling (due to units conversion as well as coupling between<br>
 * translations and rotations, for example) they are not necessarily joint torques<br>
 * or forces.  OpenSim employs a pseudo inverse to find the smallest applied  <br>
 * torque and/or force that will generate the equivalent generalized force.<br>
 * <br>
 * @author Ajay Seth<br>
 * @version 1.0
 */
public class InverseDynamicsTool extends DynamicsTool {
  private transient long swigCPtr;

  public InverseDynamicsTool(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(InverseDynamicsTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_InverseDynamicsTool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static InverseDynamicsTool safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new InverseDynamicsTool(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new InverseDynamicsTool(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_getConcreteClassName(swigCPtr, this);
  }

  public InverseDynamicsTool() {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseDynamicsTool__SWIG_0(), true);
  }

  public InverseDynamicsTool(String aFileName, boolean aLoadModel) throws java.io.IOException {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseDynamicsTool__SWIG_1(aFileName, aLoadModel), true);
  }

  public InverseDynamicsTool(String aFileName) throws java.io.IOException {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseDynamicsTool__SWIG_2(aFileName), true);
  }

  public InverseDynamicsTool(InverseDynamicsTool aObject) {
    this(opensimActuatorsAnalysesToolsJNI.new_InverseDynamicsTool__SWIG_3(InverseDynamicsTool.getCPtr(aObject), aObject), true);
  }

  public static void registerTypes() {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_registerTypes();
  }

  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode, int versionNumber) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_updateFromXMLNode__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode), versionNumber);
  }

  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element aNode) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_updateFromXMLNode__SWIG_1(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode));
  }

  public void setCoordinateValues(Storage aStorage) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_setCoordinateValues(swigCPtr, this, Storage.getCPtr(aStorage), aStorage);
  }

  /**
   * get/set the name of the file to be used as output from the tool
   */
  public String getOutputGenForceFileName() {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_getOutputGenForceFileName(swigCPtr, this);
  }

  public void setOutputGenForceFileName(String desiredOutputFileName) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_setOutputGenForceFileName(swigCPtr, this, desiredOutputFileName);
  }

  /**
   * get/set the name of the file containing coordinates
   */
  public String getCoordinatesFileName() {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_getCoordinatesFileName(swigCPtr, this);
  }

  /**
   *  %Set the name of the coordinatesFile to be used. This call resets <br>
   *      _coordinateValues as well. 
   */
  public void setCoordinatesFileName(String aCoordinateFile) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_setCoordinatesFileName(swigCPtr, this, aCoordinateFile);
  }

  public double getLowpassCutoffFrequency() {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_getLowpassCutoffFrequency(swigCPtr, this);
  }

  public void setLowpassCutoffFrequency(double aFrequency) {
    opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_setLowpassCutoffFrequency(swigCPtr, this, aFrequency);
  }

  public boolean run() throws java.io.IOException {
    return opensimActuatorsAnalysesToolsJNI.InverseDynamicsTool_run(swigCPtr, this);
  }

}
