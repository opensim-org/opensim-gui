/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class is identical to a Matrix_; it is used only to manage the C++ rules<br>
 *  for when copy constructors are called by introducing a separate type to<br>
 *  prevent certain allowed optimizations from occuring when we don't want them.<br>
 *  Despite the name, this may be an owner if a Matrix_ is recast to a MatrixView_.<br>
 *  However, there are no owner constructors for MatrixView_. 
 */
public class MatrixViewMat33 extends MatrixBaseMat33 {
  private transient long swigCPtr;

  public MatrixViewMat33(long cPtr, boolean cMemoryOwn) {
    super(opensimSimbodyJNI.MatrixViewMat33_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MatrixViewMat33 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimbodyJNI.delete_MatrixViewMat33(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public MatrixViewMat33(MatrixViewMat33 m) {
    this(opensimSimbodyJNI.new_MatrixViewMat33(MatrixViewMat33.getCPtr(m), m), true);
  }

}
