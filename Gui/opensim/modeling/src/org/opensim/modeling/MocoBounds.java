/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Small struct-like class to handle bounds. 
 */
public class MocoBounds extends OpenSimObject {
  private transient long swigCPtr;

  public MocoBounds(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoBounds_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoBounds obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoBounds(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoBounds safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoBounds_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoBounds(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoBounds_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoBounds_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoBounds_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoBounds(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoBounds_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  The bounds are unset (NaN).
   */
  public MocoBounds() {
    this(opensimMocoJNI.new_MocoBounds__SWIG_0(), true);
  }

  /**
   *  The lower and upper bound are equal (the variable is constrained to this<br>
   *  single value).
   */
  public MocoBounds(double value) {
    this(opensimMocoJNI.new_MocoBounds__SWIG_1(value), true);
  }

  /**
   *  The variable is constrained to be within [lower, upper].
   */
  public MocoBounds(double lower, double upper) {
    this(opensimMocoJNI.new_MocoBounds__SWIG_2(lower, upper), true);
  }

  /**
   *  Create bounds that are (-inf, inf), so the variable is unconstrained.
   */
  public static MocoBounds unconstrained() {
    return new MocoBounds(opensimMocoJNI.MocoBounds_unconstrained(), true);
  }

  /**
   *  True if the lower and upper bounds are both not NaN.
   */
  public boolean isSet() {
    return opensimMocoJNI.MocoBounds_isSet(swigCPtr, this);
  }

  /**
   *  True if the lower and upper bounds are the same, resulting in an<br>
   *  equality constraint.
   */
  public boolean isEquality() {
    return opensimMocoJNI.MocoBounds_isEquality(swigCPtr, this);
  }

  /**
   *  Returns true if the provided value is within these bounds.
   */
  public boolean isWithinBounds(double value) {
    return opensimMocoJNI.MocoBounds_isWithinBounds(swigCPtr, this, value);
  }

  public double getLower() {
    return opensimMocoJNI.MocoBounds_getLower(swigCPtr, this);
  }

  public double getUpper() {
    return opensimMocoJNI.MocoBounds_getUpper(swigCPtr, this);
  }

  /**
   *  The returned array has either 0, 1, or 2 elements.<br>
   *     - 0 elements: bounds are not set.<br>
   *     - 1 element: equality constraint<br>
   *     - 2 elements: range (inequality constraint). 
   */
  public ArrayDouble getAsArray() {
    return new ArrayDouble(opensimMocoJNI.MocoBounds_getAsArray(swigCPtr, this), true);
  }

}
