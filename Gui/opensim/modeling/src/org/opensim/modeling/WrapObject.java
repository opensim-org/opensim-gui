/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * An abstract class that specifies the interface for a wrapping<br>
 * object.<br>
 * <br>
 * @author Peter Loan<br>
 * @version 1.0
 */
public class WrapObject extends ModelComponent {
  private transient long swigCPtr;

  public WrapObject(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.WrapObject_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(WrapObject obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_WrapObject(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static WrapObject safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.WrapObject_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new WrapObject(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.WrapObject_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.WrapObject_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.WrapObject_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new WrapObject(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.WrapObject_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_active(WrapObject source) {
    opensimSimulationJNI.WrapObject_copyProperty_active(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public boolean get_active(int i) {
    return opensimSimulationJNI.WrapObject_get_active__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_active(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.WrapObject_upd_active__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_active(int i, boolean value) {
    opensimSimulationJNI.WrapObject_set_active__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_active(boolean value) {
    return opensimSimulationJNI.WrapObject_append_active(swigCPtr, this, value);
  }

  public void constructProperty_active(boolean initValue) {
    opensimSimulationJNI.WrapObject_constructProperty_active(swigCPtr, this, initValue);
  }

  public boolean get_active() {
    return opensimSimulationJNI.WrapObject_get_active__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_active() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.WrapObject_upd_active__SWIG_1(swigCPtr, this), false);
  }

  public void set_active(boolean value) {
    opensimSimulationJNI.WrapObject_set_active__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_xyz_body_rotation(WrapObject source) {
    opensimSimulationJNI.WrapObject_copyProperty_xyz_body_rotation(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public Vec3 get_xyz_body_rotation(int i) {
    return new Vec3(opensimSimulationJNI.WrapObject_get_xyz_body_rotation__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_xyz_body_rotation(int i) {
    return new Vec3(opensimSimulationJNI.WrapObject_upd_xyz_body_rotation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_xyz_body_rotation(int i, Vec3 value) {
    opensimSimulationJNI.WrapObject_set_xyz_body_rotation__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_xyz_body_rotation(Vec3 value) {
    return opensimSimulationJNI.WrapObject_append_xyz_body_rotation(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_xyz_body_rotation(Vec3 initValue) {
    opensimSimulationJNI.WrapObject_constructProperty_xyz_body_rotation(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_xyz_body_rotation() {
    return new Vec3(opensimSimulationJNI.WrapObject_get_xyz_body_rotation__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_xyz_body_rotation() {
    return new Vec3(opensimSimulationJNI.WrapObject_upd_xyz_body_rotation__SWIG_1(swigCPtr, this), false);
  }

  public void set_xyz_body_rotation(Vec3 value) {
    opensimSimulationJNI.WrapObject_set_xyz_body_rotation__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void copyProperty_translation(WrapObject source) {
    opensimSimulationJNI.WrapObject_copyProperty_translation(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public Vec3 get_translation(int i) {
    return new Vec3(opensimSimulationJNI.WrapObject_get_translation__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_translation(int i) {
    return new Vec3(opensimSimulationJNI.WrapObject_upd_translation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_translation(int i, Vec3 value) {
    opensimSimulationJNI.WrapObject_set_translation__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_translation(Vec3 value) {
    return opensimSimulationJNI.WrapObject_append_translation(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_translation(Vec3 initValue) {
    opensimSimulationJNI.WrapObject_constructProperty_translation(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_translation() {
    return new Vec3(opensimSimulationJNI.WrapObject_get_translation__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_translation() {
    return new Vec3(opensimSimulationJNI.WrapObject_upd_translation__SWIG_1(swigCPtr, this), false);
  }

  public void set_translation(Vec3 value) {
    opensimSimulationJNI.WrapObject_set_translation__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void copyProperty_Appearance(WrapObject source) {
    opensimSimulationJNI.WrapObject_copyProperty_Appearance(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public Appearance get_Appearance(int i) {
    return new Appearance(opensimSimulationJNI.WrapObject_get_Appearance__SWIG_0(swigCPtr, this, i), false);
  }

  public Appearance upd_Appearance(int i) {
    return new Appearance(opensimSimulationJNI.WrapObject_upd_Appearance__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_Appearance(int i, Appearance value) {
    opensimSimulationJNI.WrapObject_set_Appearance__SWIG_0(swigCPtr, this, i, Appearance.getCPtr(value), value);
  }

  public int append_Appearance(Appearance value) {
    return opensimSimulationJNI.WrapObject_append_Appearance(swigCPtr, this, Appearance.getCPtr(value), value);
  }

  public void constructProperty_Appearance(Appearance initValue) {
    opensimSimulationJNI.WrapObject_constructProperty_Appearance(swigCPtr, this, Appearance.getCPtr(initValue), initValue);
  }

  public Appearance get_Appearance() {
    return new Appearance(opensimSimulationJNI.WrapObject_get_Appearance__SWIG_1(swigCPtr, this), false);
  }

  public Appearance upd_Appearance() {
    return new Appearance(opensimSimulationJNI.WrapObject_upd_Appearance__SWIG_1(swigCPtr, this), false);
  }

  public void set_Appearance(Appearance value) {
    opensimSimulationJNI.WrapObject_set_Appearance__SWIG_1(swigCPtr, this, Appearance.getCPtr(value), value);
  }

  public void copyProperty_quadrant(WrapObject source) {
    opensimSimulationJNI.WrapObject_copyProperty_quadrant(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public String get_quadrant(int i) {
    return opensimSimulationJNI.WrapObject_get_quadrant__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_quadrant(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.WrapObject_upd_quadrant__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_quadrant(int i, String value) {
    opensimSimulationJNI.WrapObject_set_quadrant__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_quadrant(String value) {
    return opensimSimulationJNI.WrapObject_append_quadrant(swigCPtr, this, value);
  }

  public void constructProperty_quadrant(String initValue) {
    opensimSimulationJNI.WrapObject_constructProperty_quadrant(swigCPtr, this, initValue);
  }

  public String get_quadrant() {
    return opensimSimulationJNI.WrapObject_get_quadrant__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_quadrant() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.WrapObject_upd_quadrant__SWIG_1(swigCPtr, this), false);
  }

  public void set_quadrant(String value) {
    opensimSimulationJNI.WrapObject_set_quadrant__SWIG_1(swigCPtr, this, value);
  }

  public void extendScale(State s, ScaleSet scaleSet) {
    opensimSimulationJNI.WrapObject_extendScale(swigCPtr, this, State.getCPtr(s), s, ScaleSet.getCPtr(scaleSet), scaleSet);
  }

  public void connectToModelAndBody(Model aModel, PhysicalFrame aBody) {
    opensimSimulationJNI.WrapObject_connectToModelAndBody(swigCPtr, this, Model.getCPtr(aModel), aModel, PhysicalFrame.getCPtr(aBody), aBody);
  }

  public PhysicalFrame getFrame() {
    return new PhysicalFrame(opensimSimulationJNI.WrapObject_getFrame(swigCPtr, this), false);
  }

  public void setFrame(PhysicalFrame frame) {
    opensimSimulationJNI.WrapObject_setFrame(swigCPtr, this, PhysicalFrame.getCPtr(frame), frame);
  }

  public boolean getActiveUseDefault() {
    return opensimSimulationJNI.WrapObject_getActiveUseDefault(swigCPtr, this);
  }

  public boolean getQuadrantNameUseDefault() {
    return opensimSimulationJNI.WrapObject_getQuadrantNameUseDefault(swigCPtr, this);
  }

  public Transform getTransform() {
    return new Transform(opensimSimulationJNI.WrapObject_getTransform(swigCPtr, this), false);
  }

  public String getWrapTypeName() {
    return opensimSimulationJNI.WrapObject_getWrapTypeName(swigCPtr, this);
  }

  public String getDimensionsString() {
    return opensimSimulationJNI.WrapObject_getDimensionsString(swigCPtr, this);
  }

  /**
   * Calculate the wrapping of one path segment over one wrap object.<br>
   * @param state   The State of the model<br>
   * @param aPoint1 The first path point<br>
   * @param aPoint2 The second path point<br>
   * @param aPathWrap An object holding the parameters for this path/wrap-object pairing<br>
   * @param aWrapResult The result of the wrapping (tangent points, etc.)<br>
   * @return The status, as a WrapAction enum
   */
  public int wrapPathSegment(State state, AbstractPathPoint aPoint1, AbstractPathPoint aPoint2, PathWrap aPathWrap, SWIGTYPE_p_OpenSim__WrapResult aWrapResult) {
    return opensimSimulationJNI.WrapObject_wrapPathSegment(swigCPtr, this, State.getCPtr(state), state, AbstractPathPoint.getCPtr(aPoint1), aPoint1, AbstractPathPoint.getCPtr(aPoint2), aPoint2, PathWrap.getCPtr(aPathWrap), aPathWrap, SWIGTYPE_p_OpenSim__WrapResult.getCPtr(aWrapResult));
  }

  public final static class WrapQuadrant {
    public final static WrapObject.WrapQuadrant allQuadrants = new WrapObject.WrapQuadrant("allQuadrants");
    public final static WrapObject.WrapQuadrant negativeX = new WrapObject.WrapQuadrant("negativeX");
    public final static WrapObject.WrapQuadrant positiveX = new WrapObject.WrapQuadrant("positiveX");
    public final static WrapObject.WrapQuadrant negativeY = new WrapObject.WrapQuadrant("negativeY");
    public final static WrapObject.WrapQuadrant positiveY = new WrapObject.WrapQuadrant("positiveY");
    public final static WrapObject.WrapQuadrant negativeZ = new WrapObject.WrapQuadrant("negativeZ");
    public final static WrapObject.WrapQuadrant positiveZ = new WrapObject.WrapQuadrant("positiveZ");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapQuadrant swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapQuadrant.class + " with value " + swigValue);
    }

    private WrapQuadrant(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapQuadrant(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapQuadrant(String swigName, WrapQuadrant swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapQuadrant[] swigValues = { allQuadrants, negativeX, positiveX, negativeY, positiveY, negativeZ, positiveZ };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class WrapAction {
    public final static WrapObject.WrapAction noWrap = new WrapObject.WrapAction("noWrap");
    public final static WrapObject.WrapAction insideRadius = new WrapObject.WrapAction("insideRadius");
    public final static WrapObject.WrapAction wrapped = new WrapObject.WrapAction("wrapped");
    public final static WrapObject.WrapAction mandatoryWrap = new WrapObject.WrapAction("mandatoryWrap");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapAction swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapAction.class + " with value " + swigValue);
    }

    private WrapAction(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapAction(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapAction(String swigName, WrapAction swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapAction[] swigValues = { noWrap, insideRadius, wrapped, mandatoryWrap };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
