/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MocoControlTrackingGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoControlTrackingGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoControlTrackingGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoControlTrackingGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoControlTrackingGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoControlTrackingGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoControlTrackingGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoControlTrackingGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoControlTrackingGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoControlTrackingGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoControlTrackingGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoControlTrackingGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoControlTrackingGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoControlTrackingGoal() {
    this(opensimMocoJNI.new_MocoControlTrackingGoal__SWIG_0(), true);
  }

  public MocoControlTrackingGoal(String name) {
    this(opensimMocoJNI.new_MocoControlTrackingGoal__SWIG_1(name), true);
  }

  public MocoControlTrackingGoal(String name, double weight) {
    this(opensimMocoJNI.new_MocoControlTrackingGoal__SWIG_2(name, weight), true);
  }

  public void setReference(TableProcessor ref) {
    opensimMocoJNI.MocoControlTrackingGoal_setReference(swigCPtr, this, TableProcessor.getCPtr(ref), ref);
  }

  public void setWeightForControl(String controlName, double weight) {
    opensimMocoJNI.MocoControlTrackingGoal_setWeightForControl(swigCPtr, this, controlName, weight);
  }

  public void setWeightSet(MocoWeightSet weightSet) {
    opensimMocoJNI.MocoControlTrackingGoal_setWeightSet(swigCPtr, this, MocoWeightSet.getCPtr(weightSet), weightSet);
  }

  public void setReferenceLabel(String control, String label) {
    opensimMocoJNI.MocoControlTrackingGoal_setReferenceLabel(swigCPtr, this, control, label);
  }

  public void clearReferenceLabels() {
    opensimMocoJNI.MocoControlTrackingGoal_clearReferenceLabels(swigCPtr, this);
  }

  public void setAllowUnusedReferences(boolean tf) {
    opensimMocoJNI.MocoControlTrackingGoal_setAllowUnusedReferences(swigCPtr, this, tf);
  }

  public TableProcessor getReference() {
    return new TableProcessor(opensimMocoJNI.MocoControlTrackingGoal_getReference(swigCPtr, this), false);
  }

  public boolean hasReferenceLabel(String control) {
    return opensimMocoJNI.MocoControlTrackingGoal_hasReferenceLabel(swigCPtr, this, control);
  }

  public String getReferenceLabel(String control) {
    return opensimMocoJNI.MocoControlTrackingGoal_getReferenceLabel(swigCPtr, this, control);
  }

  public boolean getAllowUnusedReferences() {
    return opensimMocoJNI.MocoControlTrackingGoal_getAllowUnusedReferences(swigCPtr, this);
  }

}
