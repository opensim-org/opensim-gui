/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A helper class for specifying the minimum and maximum bounds for the<br>
 * coordinate at `coordinate_path` during path fitting.<br>
 * <br>
 * The bounds are specified as a `SimTK::Vec2` in the property `bounds`, where<br>
 * the first element is the minimum bound and the second element is the maximum<br>
 * bound.
 */
public class PolynomialPathFitterBounds extends OpenSimObject {
  private transient long swigCPtr;

  public PolynomialPathFitterBounds(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(PolynomialPathFitterBounds obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(PolynomialPathFitterBounds obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_PolynomialPathFitterBounds(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static PolynomialPathFitterBounds safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new PolynomialPathFitterBounds(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new PolynomialPathFitterBounds(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_coordinate_path(PolynomialPathFitterBounds source) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_copyProperty_coordinate_path(swigCPtr, this, PolynomialPathFitterBounds.getCPtr(source), source);
  }

  public String get_coordinate_path(int i) {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_get_coordinate_path__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_coordinate_path(int i) {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_upd_coordinate_path__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_coordinate_path(int i, String value) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_set_coordinate_path__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_coordinate_path(String value) {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_append_coordinate_path(swigCPtr, this, value);
  }

  public void constructProperty_coordinate_path(String initValue) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_constructProperty_coordinate_path(swigCPtr, this, initValue);
  }

  public String get_coordinate_path() {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_get_coordinate_path__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_coordinate_path() {
    return new SWIGTYPE_p_std__string(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_upd_coordinate_path__SWIG_1(swigCPtr, this), false);
  }

  public void set_coordinate_path(String value) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_set_coordinate_path__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_bounds(PolynomialPathFitterBounds source) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_copyProperty_bounds(swigCPtr, this, PolynomialPathFitterBounds.getCPtr(source), source);
  }

  public Vec2 get_bounds(int i) {
    return new Vec2(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_get_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec2 upd_bounds(int i) {
    return new Vec2(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_upd_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_bounds(int i, Vec2 value) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_set_bounds__SWIG_0(swigCPtr, this, i, Vec2.getCPtr(value), value);
  }

  public int append_bounds(Vec2 value) {
    return opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_append_bounds(swigCPtr, this, Vec2.getCPtr(value), value);
  }

  public void constructProperty_bounds(Vec2 initValue) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_constructProperty_bounds(swigCPtr, this, Vec2.getCPtr(initValue), initValue);
  }

  public Vec2 get_bounds() {
    return new Vec2(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_get_bounds__SWIG_1(swigCPtr, this), false);
  }

  public Vec2 upd_bounds() {
    return new Vec2(opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_upd_bounds__SWIG_1(swigCPtr, this), false);
  }

  public void set_bounds(Vec2 value) {
    opensimActuatorsAnalysesToolsJNI.PolynomialPathFitterBounds_set_bounds__SWIG_1(swigCPtr, this, Vec2.getCPtr(value), value);
  }

  public PolynomialPathFitterBounds() {
    this(opensimActuatorsAnalysesToolsJNI.new_PolynomialPathFitterBounds__SWIG_0(), true);
  }

  public PolynomialPathFitterBounds(String coordinatePath, Vec2 bounds) {
    this(opensimActuatorsAnalysesToolsJNI.new_PolynomialPathFitterBounds__SWIG_1(coordinatePath, Vec2.getCPtr(bounds), bounds), true);
  }

}
