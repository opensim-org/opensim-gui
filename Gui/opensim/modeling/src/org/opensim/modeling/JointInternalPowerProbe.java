/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * JointInternalPowerProbe is a ModelComponent Probe for computing an operation on <br>
 * internal joint power or sum of joint powers in the model during a simulation.<br>
 * E.g. Joint internal work is the integral of joint internal power with respect to time, <br>
 * so by using the JointInternalPowerProbe with the 'integrate' operation, Joint internal<br>
 * work may be computed.<br>
 * <br>
 * @author Tim Dorn<br>
 * @version 1.0
 */
public class JointInternalPowerProbe extends Probe {
  private transient long swigCPtr;

  public JointInternalPowerProbe(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.JointInternalPowerProbe_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(JointInternalPowerProbe obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_JointInternalPowerProbe(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static JointInternalPowerProbe safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.JointInternalPowerProbe_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new JointInternalPowerProbe(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.JointInternalPowerProbe_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.JointInternalPowerProbe_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.JointInternalPowerProbe_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new JointInternalPowerProbe(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.JointInternalPowerProbe_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  List of Joints to probe.  *
   */
  public void copyProperty_joint_names(JointInternalPowerProbe source) {
    opensimSimulationJNI.JointInternalPowerProbe_copyProperty_joint_names(swigCPtr, this, JointInternalPowerProbe.getCPtr(source), source);
  }

  public String get_joint_names(int i) {
    return opensimSimulationJNI.JointInternalPowerProbe_get_joint_names(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_joint_names(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.JointInternalPowerProbe_upd_joint_names(swigCPtr, this, i), false);
  }

  public void set_joint_names(int i, String value) {
    opensimSimulationJNI.JointInternalPowerProbe_set_joint_names(swigCPtr, this, i, value);
  }

  public int append_joint_names(String value) {
    return opensimSimulationJNI.JointInternalPowerProbe_append_joint_names(swigCPtr, this, value);
  }

  public void constructProperty_joint_names() {
    opensimSimulationJNI.JointInternalPowerProbe_constructProperty_joint_names(swigCPtr, this);
  }

  /**
   *  Flag to specify whether to report the sum of all powers,<br>
   *         or report each power value separately.  *
   */
  public void copyProperty_sum_powers_together(JointInternalPowerProbe source) {
    opensimSimulationJNI.JointInternalPowerProbe_copyProperty_sum_powers_together(swigCPtr, this, JointInternalPowerProbe.getCPtr(source), source);
  }

  public boolean get_sum_powers_together(int i) {
    return opensimSimulationJNI.JointInternalPowerProbe_get_sum_powers_together__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_sum_powers_together(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.JointInternalPowerProbe_upd_sum_powers_together__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_sum_powers_together(int i, boolean value) {
    opensimSimulationJNI.JointInternalPowerProbe_set_sum_powers_together__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_sum_powers_together(boolean value) {
    return opensimSimulationJNI.JointInternalPowerProbe_append_sum_powers_together(swigCPtr, this, value);
  }

  public void constructProperty_sum_powers_together(boolean initValue) {
    opensimSimulationJNI.JointInternalPowerProbe_constructProperty_sum_powers_together(swigCPtr, this, initValue);
  }

  public boolean get_sum_powers_together() {
    return opensimSimulationJNI.JointInternalPowerProbe_get_sum_powers_together__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_sum_powers_together() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.JointInternalPowerProbe_upd_sum_powers_together__SWIG_1(swigCPtr, this), false);
  }

  public void set_sum_powers_together(boolean value) {
    opensimSimulationJNI.JointInternalPowerProbe_set_sum_powers_together__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Element-wise power exponent to apply to each joint power prior to the Probe operation. <br>
   *     For example, if two joints J1 and J2 are given in joint_names, then the<br>
   *     Probe value will be equal to JointPower_J1^exponent + JointPower_J2^exponent.  *
   */
  public void copyProperty_exponent(JointInternalPowerProbe source) {
    opensimSimulationJNI.JointInternalPowerProbe_copyProperty_exponent(swigCPtr, this, JointInternalPowerProbe.getCPtr(source), source);
  }

  public double get_exponent(int i) {
    return opensimSimulationJNI.JointInternalPowerProbe_get_exponent__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_exponent(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.JointInternalPowerProbe_upd_exponent__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_exponent(int i, double value) {
    opensimSimulationJNI.JointInternalPowerProbe_set_exponent__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_exponent(double value) {
    return opensimSimulationJNI.JointInternalPowerProbe_append_exponent(swigCPtr, this, value);
  }

  public void constructProperty_exponent(double initValue) {
    opensimSimulationJNI.JointInternalPowerProbe_constructProperty_exponent(swigCPtr, this, initValue);
  }

  public double get_exponent() {
    return opensimSimulationJNI.JointInternalPowerProbe_get_exponent__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_exponent() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.JointInternalPowerProbe_upd_exponent__SWIG_1(swigCPtr, this), false);
  }

  public void set_exponent(double value) {
    opensimSimulationJNI.JointInternalPowerProbe_set_exponent__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default constructor 
   */
  public JointInternalPowerProbe() {
    this(opensimSimulationJNI.new_JointInternalPowerProbe__SWIG_0(), true);
  }

  /**
   *  Convenience constructor 
   */
  public JointInternalPowerProbe(ArrayStr joint_names, boolean sum_powers_together, double exponent) {
    this(opensimSimulationJNI.new_JointInternalPowerProbe__SWIG_1(ArrayStr.getCPtr(joint_names), joint_names, sum_powers_together, exponent), true);
  }

  /**
   *  Returns the names of the Joints being probed. 
   */
  public PropertyStringList getJointNames() {
    return new PropertyStringList(opensimSimulationJNI.JointInternalPowerProbe_getJointNames(swigCPtr, this), false);
  }

  /**
   *  Returns whether to report sum of all joint powers together<br>
   *         or report the joint powers individually. 
   */
  public boolean getSumPowersTogether() {
    return opensimSimulationJNI.JointInternalPowerProbe_getSumPowersTogether(swigCPtr, this);
  }

  /**
   *  Returns the exponent to apply to each joint power. 
   */
  public double getExponent() {
    return opensimSimulationJNI.JointInternalPowerProbe_getExponent(swigCPtr, this);
  }

  /**
   *  Sets the names of the Joints being probed. 
   */
  public void setJointNames(ArrayStr aJointNames) {
    opensimSimulationJNI.JointInternalPowerProbe_setJointNames(swigCPtr, this, ArrayStr.getCPtr(aJointNames), aJointNames);
  }

  /**
   *  Sets whether to report sum of all joint powers together<br>
   *         or report the joint powers individually. 
   */
  public void setSumPowersTogether(boolean sum_powers_together) {
    opensimSimulationJNI.JointInternalPowerProbe_setSumPowersTogether(swigCPtr, this, sum_powers_together);
  }

  /**
   *  Sets the exponent to apply to each joint power. 
   */
  public void setExponent(double exponent) {
    opensimSimulationJNI.JointInternalPowerProbe_setExponent(swigCPtr, this, exponent);
  }

  /**
   *  Compute the Joint power. *
   */
  public Vector computeProbeInputs(State state) {
    return new Vector(opensimSimulationJNI.JointInternalPowerProbe_computeProbeInputs(swigCPtr, this, State.getCPtr(state), state), true);
  }

  /**
   *  Returns the number of probe inputs in the vector returned by computeProbeInputs(). 
   */
  public int getNumProbeInputs() {
    return opensimSimulationJNI.JointInternalPowerProbe_getNumProbeInputs(swigCPtr, this);
  }

  /**
   *  Returns the column labels of the probe values for reporting. <br>
   *         Currently uses the Probe name as the column label, so be sure<br>
   *         to name your probe appropriately! 
   */
  public ArrayStr getProbeOutputLabels() {
    return new ArrayStr(opensimSimulationJNI.JointInternalPowerProbe_getProbeOutputLabels(swigCPtr, this), true);
  }

}
