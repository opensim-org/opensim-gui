/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  An abstract property is a serializable (name,value) pair, for which we<br>
 * do not know the type of the value. Values may be simple types like int or <br>
 * string, or may be serializable objects derived from the %OpenSim Object class.<br>
 * <br>
 * %AbstractProperty is an abstract base class that provides the functionality<br>
 * common to all properties that does not involve knowledge of the value<br>
 * type. Property&lt;T&gt; derives from %AbstractProperty to represent properties <br>
 * where the type is known.<br>
 * <br>
 * @see Property, Object<br>
 * <br>
 * @author Cassidy Kelly, Ajay Seth, Michael Sherman
 */
public class AbstractProperty {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public AbstractProperty(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(AbstractProperty obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_AbstractProperty(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  Require that the number of values n in the value list of this property<br>
   *     be in the range aMin &lt;= n &lt;= aMax. 
   */
  public void setAllowableListSize(int aMin, int aMax) {
    opensimCommonJNI.AbstractProperty_setAllowableListSize__SWIG_0(swigCPtr, this, aMin, aMax);
  }

  /**
   *  Require that the number of values n in the value list of this property<br>
   *     be exactly n=aNum values. *
   */
  public void setAllowableListSize(int aNum) {
    opensimCommonJNI.AbstractProperty_setAllowableListSize__SWIG_1(swigCPtr, this, aNum);
  }

  /**
   *  Return a new instance of this concrete property object, containing<br>
   *     new copies of this property's values. The new property object is<br>
   *     allocated on the heap and it is up to the caller to delete it when done. *
   */
  public AbstractProperty clone() {
    long cPtr = opensimCommonJNI.AbstractProperty_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractProperty(cPtr, true);
  }

  /**
   *  For relatively simple types, return the current value of this property<br>
   *     in a string suitable for displaying to a user in the GUI (i.e., this number<br>
   *     may be rounded and not an exact representation of the actual value being<br>
   *     used). Objects just return something like "(Object)".<br>
   *     For `Property`s, This function calls `toStringForDisplay()` with <br>
   *     `precision = 6`.*
   */
  public String toString() {
    return opensimCommonJNI.AbstractProperty_toString(swigCPtr, this);
  }

  /**
   *  For relatively simple types, return the current value of this property<br>
   *     in a string suitable for displaying to a user in the GUI (i.e., this number<br>
   *     may be rounded and not an exact representation of the actual value being <br>
   *     used). Objects just return something like "(Object)". This differs from <br>
   *     `toString()` as it has an argument, `precision`, for controlling the number<br>
   *     of digits printed to string for floats. If this function is not overridden<br>
   *     in a derived class, this function uses `toString()` and the `precision` <br>
   *     argument is ignored. <br>
   *     For `Property`s, in general, this means that floats will<br>
   *     be represented with the number of significant digits denoted by the<br>
   *     `precision` argument, and the default formatting of `stringstream`<br>
   *     determines whether or not exponential notation is used. *
   */
  public String toStringForDisplay(int precision) {
    return opensimCommonJNI.AbstractProperty_toStringForDisplay(swigCPtr, this, precision);
  }

  /**
   *  This returns a string representation of this property's value type <br>
   *     which will be the same as T::getClassName() for Object-derived types T, and<br>
   *     some reasonably nice name for simple types, including at least "bool",<br>
   *     "int", "double", "string", "Vec3", "Vector", and "Transform". *
   */
  public String getTypeName() {
    return opensimCommonJNI.AbstractProperty_getTypeName(swigCPtr, this);
  }

  /**
   *  Return true if this is an "object property", meaning that its values<br>
   *     are all concrete objects of types that ultimately derive from the %OpenSim<br>
   *     serializable base class Object. If this returns true then it is safe to <br>
   *     call getValueAsObject(). Otherwise this property contains only simple types<br>
   *     like "int" or "std::string", and you'll need to know the actual type in<br>
   *     order to access the values. *
   */
  public boolean isObjectProperty() {
    return opensimCommonJNI.AbstractProperty_isObjectProperty(swigCPtr, this);
  }

  /**
   *  An unnamed property is a one-object property whose name was given as<br>
   *     null or as the contained object's type tag. In that case getName() will<br>
   *     return the object type tag, and the XML representation will just be the<br>
   *     object, with name attribute ignored if there is one. *
   */
  public boolean isUnnamedProperty() {
    return opensimCommonJNI.AbstractProperty_isUnnamedProperty(swigCPtr, this);
  }

  /**
   *  Compare this property with another one; this is primarily used <br>
   *     for testing. The properties must be of the identical concrete type, and<br>
   *     their names and other base class attributes must<br>
   *     be identical (including the comment). If they both have the "use default"<br>
   *     flag set then we consider the values identical without looking. Otherwise,<br>
   *     we delegate to the concrete property to determine if the values are equal; <br>
   *     the meaning is determined by the concrete property depending on its type. <br>
   *     Floating point values should be compared to a tolerance, and should be <br>
   *     considered equal if both are the same infinity or both are NaN (the latter<br>
   *     in contrast to normal IEEE floating point behavior, where NaN!=NaN). *
   */
  public boolean equals(AbstractProperty other) {
    return opensimCommonJNI.AbstractProperty_equals(swigCPtr, this, AbstractProperty.getCPtr(other), other);
  }

  /**
   *  Return true if the <i>other</i> property is an object of exactly the same <br>
   *     concrete class as this one. *
   */
  public boolean isSamePropertyClass(AbstractProperty other) {
    return opensimCommonJNI.AbstractProperty_isSamePropertyClass(swigCPtr, this, AbstractProperty.getCPtr(other), other);
  }

  /**
   *     A property can be viewed as a random-access container of values. These<br>
   *     methods provide a subset of the usual container methods modeled after<br>
   *     std::vector. Note that any methods involving the actual property value type<br>
   *     T must be templatized; they will be delegated to the concrete Property&lt;T&gt;<br>
   *     for resolution. ** Return the number of values currently in this property's value list. *
   */
  public int size() {
    return opensimCommonJNI.AbstractProperty_size(swigCPtr, this);
  }

  /**
   *  Return true if this property's value list is currently empty. *
   */
  public boolean empty() {
    return opensimCommonJNI.AbstractProperty_empty(swigCPtr, this);
  }

  /**
   *  Empty the value list for this property; fails if zero is not an <br>
   *     allowable size for this property. *
   */
  public void clear() {
    opensimCommonJNI.AbstractProperty_clear(swigCPtr, this);
  }

  /**
   *  For an object property, the values can be obtained as references to<br>
   *     the abstract base class Object from which all the objects derive. If the<br>
   *     property can hold a list of values you must provide an index to select<br>
   *     the value, otherwise it is optional but if supplied must be 0. This will<br>
   *     throw an exception if this is not an object property, that is, if it is<br>
   *     a simple property, because its values can't be represented as an Object in<br>
   *     that case.<br>
   * <br>
   *     @param index    If supplied must be 0 &lt;= index &lt; getNumValues().<br>
   *     @return const reference to the value as an Object <br>
   *     @see updValueAsObject(), getValueT>() *
   */
  public OpenSimObject getValueAsObject(int index) {
    return new OpenSimObject(opensimCommonJNI.AbstractProperty_getValueAsObject__SWIG_0(swigCPtr, this, index), false);
  }

  /**
   *  For an object property, the values can be obtained as references to<br>
   *     the abstract base class Object from which all the objects derive. If the<br>
   *     property can hold a list of values you must provide an index to select<br>
   *     the value, otherwise it is optional but if supplied must be 0. This will<br>
   *     throw an exception if this is not an object property, that is, if it is<br>
   *     a simple property, because its values can't be represented as an Object in<br>
   *     that case.<br>
   * <br>
   *     @return const reference to the value as an Object <br>
   *     @see updValueAsObject(), getValueT>() *
   */
  public OpenSimObject getValueAsObject() {
    return new OpenSimObject(opensimCommonJNI.AbstractProperty_getValueAsObject__SWIG_1(swigCPtr, this), false);
  }

  /**
   *  Get writable access to an existing object value. Note that you can't <br>
   *     use this to install a different concrete object; see setValueAsObject()<br>
   *     if you want to do that. <br>
   *     @param index    If supplied must be 0 &lt;= index &lt; getNumValues().<br>
   *     @return writable reference to the value as an Object<br>
   *     @see getValueAsObject(), updValueT>() *
   */
  public OpenSimObject updValueAsObject(int index) {
    return new OpenSimObject(opensimCommonJNI.AbstractProperty_updValueAsObject__SWIG_0(swigCPtr, this, index), false);
  }

  /**
   *  Get writable access to an existing object value. Note that you can't <br>
   *     use this to install a different concrete object; see setValueAsObject()<br>
   *     if you want to do that. <br>
   *     @return writable reference to the value as an Object<br>
   *     @see getValueAsObject(), updValueT>() *
   */
  public OpenSimObject updValueAsObject() {
    return new OpenSimObject(opensimCommonJNI.AbstractProperty_updValueAsObject__SWIG_1(swigCPtr, this), false);
  }

  /**
   *  %Set the indicated value element to a new copy of the supplied object.<br>
   *     If you already have a heap-allocated object you're willing to give up and<br>
   *     want to avoid the extra copy, use adoptValueObject(). *
   */
  public void setValueAsObject(OpenSimObject obj, int index) {
    opensimCommonJNI.AbstractProperty_setValueAsObject__SWIG_0(swigCPtr, this, OpenSimObject.getCPtr(obj), obj, index);
  }

  /**
   *  %Set the indicated value element to a new copy of the supplied object.<br>
   *     If you already have a heap-allocated object you're willing to give up and<br>
   *     want to avoid the extra copy, use adoptValueObject(). *
   */
  public void setValueAsObject(OpenSimObject obj) {
    opensimCommonJNI.AbstractProperty_setValueAsObject__SWIG_1(swigCPtr, this, OpenSimObject.getCPtr(obj), obj);
  }

  /**
   *  Assign (copy) property *that* to this object. 
   */
  public void assign(AbstractProperty that) {
    opensimCommonJNI.AbstractProperty_assign(swigCPtr, this, AbstractProperty.getCPtr(that), that);
  }

  /**
   * * This method sets the "use default" flag for this property and the <br>
   *     properties of any objects it contains to the given value. *
   */
  public void setAllPropertiesUseDefault(boolean shouldUseDefault) {
    opensimCommonJNI.AbstractProperty_setAllPropertiesUseDefault(swigCPtr, this, shouldUseDefault);
  }

  /**
   *  Given an XML parent element expected to contain a value for this<br>
   *     property as an immediate child element, find that property element and set<br>
   *     the property value from it. If no such property element can be found, the<br>
   *     "use default value" attribute of this property will be set on return; that<br>
   *     is not an error. However, if the property element is found but is <br>
   *     malformed or unsuitable in some way, an exception will be thrown with<br>
   *     a message explaining what is wrong. *
   */
  public void readFromXMLParentElement(SWIGTYPE_p_SimTK__Xml__Element parent, int versionNumber) {
    opensimCommonJNI.AbstractProperty_readFromXMLParentElement(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(parent), versionNumber);
  }

  /**
   *  Given an XML parent element, append a single child element representing<br>
   *     the serialized form of this property. *
   */
  public void writeToXMLParentElement(SWIGTYPE_p_SimTK__Xml__Element parent) {
    opensimCommonJNI.AbstractProperty_writeToXMLParentElement(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(parent));
  }

  /**
   *  %Set the property name. *
   */
  public void setName(String name) {
    opensimCommonJNI.AbstractProperty_setName(swigCPtr, this, name);
  }

  /**
   *  %Set a user-friendly comment to be associated with property. This will<br>
   *     be displayed in XML and in "help" output for %OpenSim Objects. *
   */
  public void setComment(String aComment) {
    opensimCommonJNI.AbstractProperty_setComment(swigCPtr, this, aComment);
  }

  /**
   *  %Set flag indicating whether the value of this property was simply<br>
   *     taken from a default object and thus should not be written out when<br>
   *     serializing. *
   */
  public void setValueIsDefault(boolean isDefault) {
    opensimCommonJNI.AbstractProperty_setValueIsDefault(swigCPtr, this, isDefault);
  }

  /**
   *  Get the property name. *
   */
  public String getName() {
    return opensimCommonJNI.AbstractProperty_getName(swigCPtr, this);
  }

  /**
   *  Get the comment associated with this property. *
   */
  public String getComment() {
    return opensimCommonJNI.AbstractProperty_getComment(swigCPtr, this);
  }

  /**
   *  Get the flag indicating whether the current value is just the default<br>
   *     value for this property (in which case it doesn't need to be written<br>
   *     out). *
   */
  public boolean getValueIsDefault() {
    return opensimCommonJNI.AbstractProperty_getValueIsDefault(swigCPtr, this);
  }

  /**
   *  Get the minimum number of values allowed in this property's value<br>
   *     list. Will be zero for optional properties, zero for list properties <br>
   *     (unless explicitly changed), and one for one-value properties. *
   */
  public int getMinListSize() {
    return opensimCommonJNI.AbstractProperty_getMinListSize(swigCPtr, this);
  }

  /**
   *  Get the maximum number of values allowed in this property's value<br>
   *     list. Will be unlimited for list properties (unless explicitly changed), <br>
   *     and one for optional and one-value properties. *
   */
  public int getMaxListSize() {
    return opensimCommonJNI.AbstractProperty_getMaxListSize(swigCPtr, this);
  }

  /**
   *  This is an "optional" property if its value list can contain at most<br>
   *     one value. This is the kind of property created by the<br>
   *     Object::addOptionalProperty&lt;T&gt; method, for any type T. *
   */
  public boolean isOptionalProperty() {
    return opensimCommonJNI.AbstractProperty_isOptionalProperty(swigCPtr, this);
  }

  /**
   *  This is a "list" property if its value list can contain more than<br>
   *     one value. This is the kind of property created by the<br>
   *     Object::addListProperty&lt;T&gt; method, for any type T. *
   */
  public boolean isListProperty() {
    return opensimCommonJNI.AbstractProperty_isListProperty(swigCPtr, this);
  }

  /**
   *  This is a "one-value" property if its value list must always contain<br>
   *     exactly one value. This is the kind of property created by the<br>
   *     Object::addProperty&lt;T&gt; method, for any type T. *
   */
  public boolean isOneValueProperty() {
    return opensimCommonJNI.AbstractProperty_isOneValueProperty(swigCPtr, this);
  }

  /**
   *  This is a "one-object" property if it is a "one-value" property and<br>
   *     it contains an Object-derived value. This is the kind of property created<br>
   *     by the Object::addProperty&lt;T&gt; method when T is a type derived from<br>
   *     %OpenSim's Object serializable base class. One-object properties have<br>
   *     a special, compact representation in XML. *
   */
  public boolean isOneObjectProperty() {
    return opensimCommonJNI.AbstractProperty_isOneObjectProperty(swigCPtr, this);
  }

}
