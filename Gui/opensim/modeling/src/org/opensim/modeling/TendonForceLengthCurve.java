/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class serves as a serializable TendonForceLengthCurve for use in muscle<br>
 *     models. The tendon-force-length curve is dimensionless: force is normalized<br>
 *     to maximum isometric force and length is normalized to tendon slack length.<br>
 *     The user can adjust the strain the tendon undergoes at 1 unit load (e0), its<br>
 *     stiffness at a strain of e0, and the shape of the tendon curve (its<br>
 *     'curviness'):<br>
 * <br>
 *     <br>
 * <br>
 *     Note that we use the Cauchy or engineering definition of strain throughout:<br>
 *     strain = (l-l0)/l0, where l is the current tendon length and l0 is its slack<br>
 *     length.<br>
 * <br>
 *     <b>Required Parameters</b><br>
 *     <li>strainAtOneNormForce</li><br>
 * <br>
 *     <b>Optional Parameters</b><br>
 *     <li>stiffnessAtOneNormForce<br>
 *</li>     <li>normForceAtToeEnd<br>
 *</li>     <li>curviness</li><br>
 * <br>
 *     <img src=fig_TendonForceLengthCurve.png/><br>
 * <br>
 *     <b>Conditions</b><br>
 *     {@literal 
    strainAtOneNormForce > 0
    stiffnessAtOneNormForce > 1/strainAtOneNormForce
    0 < normForceAtToeEnd < 1
    0 <= curviness <= 1
    }<br>
 * <br>
 *     All parameters but the strain of the tendon at 1 unit load (e0) are<br>
 *     optional. Note that filling in one optional parameter but not the others<br>
 *     will throw an exception when the curve is built. The optional parameters can<br>
 *     be used to vary the shape of the curve from a close approximation of a line<br>
 *     to a sharply-bent curve.<br>
 * <br>
 *     This curve has the advantage of being C2-continuous, which results in faster<br>
 *     simulations when compared to the popular method of using a linearly<br>
 *     extrapolated exponential (C0-continuous) curve to parameterize the<br>
 *     tendon-force-length relationship. See Millard et al. (2013) for details.<br>
 * <br>
 *     <b>Default Parameter Values</b><br>
 *     If the optional parameters are not specified, the curve is fit to match the<br>
 *     average dimensionless in-vivo tendon curve reported by Maganaris et al. and<br>
 *     Magnusson et al. In addition, the generated curve will have a characteristic<br>
 *     toe region that is fit to the in-vivo literature. Note that this curve is<br>
 *     not being fit to the commonly used linearly extrapolated exponential curve<br>
 *     documented by Thelen, as it makes the toe region about half as stiff as both<br>
 *     the in-vitro and in-vivo data indicate is reasonable. Additionally, the<br>
 *     linear section of the curve would be nearly twice as stiff as the data<br>
 *     indicates is reasonable.<br>
 * <br>
 *     {@literal 
    strainAtOneNormForce ....... 0.049
    stiffnessAtOneNormForce .... 1.375/strainAtOneNormForce
    normForceAtToeEnd .......... 2.0/3.0
    curviness .................. 0.5
    }<br>
 * <br>
 *     <b>Example</b><br>
 *     {@code 
        TendonForceLengthCurve fseCurve(0.049, 28.1, 0.67, 0.5);
        double fseVal   = fseCurve.calcValue(0.02);
        double dfselVal = fseCurve.calcDerivative(0.02, 1);
    }<br>
 * <br>
 *     Note that this object should be updated through the set methods provided.<br>
 *     These set methods will take care of rebuilding the curve correctly. If you<br>
 *     modify the properties directly, the curve will not be rebuilt, and upon<br>
 *     calling a function like calcValue, calcDerivative, or printCurveToCSVFile,<br>
 *     an exception will be thrown because the curve is out-of-date with its<br>
 *     properties.<br>
 * <br>
 *     <b>References</b><br>
 *     <li>Lewis, G., Shaw, K.M. (1997) Tensile properties of human tendo Achillis:<br>
 *         effect of donor age and strain rate. The Journal of Foot and Ankle<br>
 *         Surgery 36:435--445.<br>
 *</li>     <li>Maganaris, C.N., Paul, J.P. (2002) Tensile properties of the in vivo<br>
 *         gastrocnemius tendon. Journal of Biomechanics 35:1639--1646.<br>
 *</li>     <li>Magnusson, S.P., Aagaard, P., Rosager, S., Dyhre-Poulsen, P., Kjaer, M.<br>
 *         (2001) Load-displacement properties of the human triceps surae<br>
 *         aponeurosis in vivo. Journal of Physiology 531:277--288.<br>
 *</li>     <li>Thelen, D.G. (2003) Adjustment of muscle mechanics model parameters to<br>
 *         simulate dynamic contractions in older adults. ASME Journal of<br>
 *         Biomechanical Engineering 125:70--77.</li><br>
 * <br>
 *     @author Matt Millard
 */
public class TendonForceLengthCurve extends Function {
  private transient long swigCPtr;

  public TendonForceLengthCurve(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.TendonForceLengthCurve_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(TendonForceLengthCurve obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_TendonForceLengthCurve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static TendonForceLengthCurve safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.TendonForceLengthCurve_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new TendonForceLengthCurve(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.TendonForceLengthCurve_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.TendonForceLengthCurve_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.TendonForceLengthCurve_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new TendonForceLengthCurve(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.TendonForceLengthCurve_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_strain_at_one_norm_force(TendonForceLengthCurve source) {
    opensimSimulationJNI.TendonForceLengthCurve_copyProperty_strain_at_one_norm_force(swigCPtr, this, TendonForceLengthCurve.getCPtr(source), source);
  }

  public double get_strain_at_one_norm_force(int i) {
    return opensimSimulationJNI.TendonForceLengthCurve_get_strain_at_one_norm_force__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_strain_at_one_norm_force(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_strain_at_one_norm_force__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_strain_at_one_norm_force(int i, double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_strain_at_one_norm_force__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_strain_at_one_norm_force(double value) {
    return opensimSimulationJNI.TendonForceLengthCurve_append_strain_at_one_norm_force(swigCPtr, this, value);
  }

  public void constructProperty_strain_at_one_norm_force(double initValue) {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_strain_at_one_norm_force(swigCPtr, this, initValue);
  }

  public double get_strain_at_one_norm_force() {
    return opensimSimulationJNI.TendonForceLengthCurve_get_strain_at_one_norm_force__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_strain_at_one_norm_force() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_strain_at_one_norm_force__SWIG_1(swigCPtr, this), false);
  }

  public void set_strain_at_one_norm_force(double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_strain_at_one_norm_force__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_stiffness_at_one_norm_force(TendonForceLengthCurve source) {
    opensimSimulationJNI.TendonForceLengthCurve_copyProperty_stiffness_at_one_norm_force(swigCPtr, this, TendonForceLengthCurve.getCPtr(source), source);
  }

  public double get_stiffness_at_one_norm_force(int i) {
    return opensimSimulationJNI.TendonForceLengthCurve_get_stiffness_at_one_norm_force__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_stiffness_at_one_norm_force(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_stiffness_at_one_norm_force__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_stiffness_at_one_norm_force(int i, double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_stiffness_at_one_norm_force__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_stiffness_at_one_norm_force(double value) {
    return opensimSimulationJNI.TendonForceLengthCurve_append_stiffness_at_one_norm_force(swigCPtr, this, value);
  }

  public void constructProperty_stiffness_at_one_norm_force() {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_stiffness_at_one_norm_force__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_stiffness_at_one_norm_force(double initValue) {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_stiffness_at_one_norm_force__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_stiffness_at_one_norm_force() {
    return opensimSimulationJNI.TendonForceLengthCurve_get_stiffness_at_one_norm_force__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_stiffness_at_one_norm_force() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_stiffness_at_one_norm_force__SWIG_1(swigCPtr, this), false);
  }

  public void set_stiffness_at_one_norm_force(double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_stiffness_at_one_norm_force__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_norm_force_at_toe_end(TendonForceLengthCurve source) {
    opensimSimulationJNI.TendonForceLengthCurve_copyProperty_norm_force_at_toe_end(swigCPtr, this, TendonForceLengthCurve.getCPtr(source), source);
  }

  public double get_norm_force_at_toe_end(int i) {
    return opensimSimulationJNI.TendonForceLengthCurve_get_norm_force_at_toe_end__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_norm_force_at_toe_end(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_norm_force_at_toe_end__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_norm_force_at_toe_end(int i, double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_norm_force_at_toe_end__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_norm_force_at_toe_end(double value) {
    return opensimSimulationJNI.TendonForceLengthCurve_append_norm_force_at_toe_end(swigCPtr, this, value);
  }

  public void constructProperty_norm_force_at_toe_end() {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_norm_force_at_toe_end__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_norm_force_at_toe_end(double initValue) {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_norm_force_at_toe_end__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_norm_force_at_toe_end() {
    return opensimSimulationJNI.TendonForceLengthCurve_get_norm_force_at_toe_end__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_norm_force_at_toe_end() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_norm_force_at_toe_end__SWIG_1(swigCPtr, this), false);
  }

  public void set_norm_force_at_toe_end(double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_norm_force_at_toe_end__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_curviness(TendonForceLengthCurve source) {
    opensimSimulationJNI.TendonForceLengthCurve_copyProperty_curviness(swigCPtr, this, TendonForceLengthCurve.getCPtr(source), source);
  }

  public double get_curviness(int i) {
    return opensimSimulationJNI.TendonForceLengthCurve_get_curviness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_curviness(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_curviness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_curviness(int i, double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_curviness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_curviness(double value) {
    return opensimSimulationJNI.TendonForceLengthCurve_append_curviness(swigCPtr, this, value);
  }

  public void constructProperty_curviness() {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_curviness__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_curviness(double initValue) {
    opensimSimulationJNI.TendonForceLengthCurve_constructProperty_curviness__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_curviness() {
    return opensimSimulationJNI.TendonForceLengthCurve_get_curviness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_curviness() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.TendonForceLengthCurve_upd_curviness__SWIG_1(swigCPtr, this), false);
  }

  public void set_curviness(double value) {
    opensimSimulationJNI.TendonForceLengthCurve_set_curviness__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  The default constructor creates a tendon-force-length curve using the<br>
   *     default property values and assigns a default name. 
   */
  public TendonForceLengthCurve() {
    this(opensimSimulationJNI.new_TendonForceLengthCurve__SWIG_0(), true);
  }

  /**
   *  Constructs a tendon-force-length curve using the provided parameters and<br>
   *     assigns a default name. 
   */
  public TendonForceLengthCurve(double strainAtOneNormForce, double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness) {
    this(opensimSimulationJNI.new_TendonForceLengthCurve__SWIG_1(strainAtOneNormForce, stiffnessAtOneNormForce, normForceAtToeEnd, curviness), true);
  }

  /**
   *  This constructor will create a C2-continuous tendon-force-length curve<br>
   *     that is fit to match the average dimensionless in-vivo tendon curve reported<br>
   *     by Maganaris et al. and Magnusson et al. In addition, the generated curve<br>
   *     will have a characteristic toe region that is fit to the in-vivo literature.<br>
   *     @param strainAtOneNormForce<br>
   *         The tendon strain at which the tendon develops 1 unit of normalized<br>
   *         force. strainAtOneNormForce = 0.04 means that the tendon will develop a<br>
   *         tension of 1 normalized force when it is strained by 4% of its slack<br>
   *         length or, equivalently, is stretched to 1.04 times its resting length.<br>
   * <br>
   *     <b>Conditions</b><br>
   *     {@literal 
      strainAtOneNormForce > 0
      }
   */
  public TendonForceLengthCurve(double strainAtOneNormForce) {
    this(opensimSimulationJNI.new_TendonForceLengthCurve__SWIG_2(strainAtOneNormForce), true);
  }

  /**
   *  @return The tendon strain at which the tendon develops 1 unit of<br>
   *     normalized force. strainAtOneNormForce = 0.04 means that the tendon will<br>
   *     develop a tension of 1 normalized force when it is strained by 4% of its<br>
   *     slack length or, equivalently, is stretched to 1.04 times its resting<br>
   *     length. This property is set to 0.049 by default. 
   */
  public double getStrainAtOneNormForce() {
    return opensimSimulationJNI.TendonForceLengthCurve_getStrainAtOneNormForce(swigCPtr, this);
  }

  /**
   *  @return The normalized stiffness (slope of the tendon curve) when the<br>
   *     tendon is strained by strainAtOneNormForce under a load of 1 normalized unit<br>
   *     of force. This property is set to 1.375/strainAtOneNormForce by default. 
   */
  public double getStiffnessAtOneNormForceInUse() {
    return opensimSimulationJNI.TendonForceLengthCurve_getStiffnessAtOneNormForceInUse(swigCPtr, this);
  }

  /**
   *  @return The normalized force developed at the end of the 'toe' region.<br>
   *     The toe region lies between 0 strain and some intermediate strain less than<br>
   *     the strain required to develop 1 unit of normalized force. The toe region is<br>
   *     nonlinear and more compliant than the rest of the tendon curve. This<br>
   *     property is set to 2.0/3.0 by default. 
   */
  public double getNormForceAtToeEndInUse() {
    return opensimSimulationJNI.TendonForceLengthCurve_getNormForceAtToeEndInUse(swigCPtr, this);
  }

  /**
   *  @return A dimensionless parameter between 0 and 1 that describes the<br>
   *     shape of the curve: a value of 0 indicates that the curve is very close to a<br>
   *     straight line segment and a value of 1 indicates a curve that smoothly fills<br>
   *     the corner formed by the linear extrapolation of 'stiffnessAtOneNormForce'<br>
   *     and the x-axis, as shown in the figure in the class description. This<br>
   *     property is set to 0.5 by default. 
   */
  public double getCurvinessInUse() {
    return opensimSimulationJNI.TendonForceLengthCurve_getCurvinessInUse(swigCPtr, this);
  }

  /**
   *  @return True if the optional properties are empty and the fitted curve<br>
   *     is being used, false if the optional properties are filled and are being<br>
   *     used to construct the curve. 
   */
  public boolean isFittedCurveBeingUsed() {
    return opensimSimulationJNI.TendonForceLengthCurve_isFittedCurveBeingUsed(swigCPtr, this);
  }

  /**
   *     @param aStrainAtOneNormForce<br>
   *         The tendon strain at which the tendon develops 1 unit of normalized<br>
   *         force. strainAtOneNormForce = 0.04 means that the tendon will develop a<br>
   *         tension of 1 normalized force when it is strained by 4% of its slack<br>
   *         length or, equivalently, is stretched to 1.04 times its resting length.
   */
  public void setStrainAtOneNormForce(double aStrainAtOneNormForce) {
    opensimSimulationJNI.TendonForceLengthCurve_setStrainAtOneNormForce(swigCPtr, this, aStrainAtOneNormForce);
  }

  /**
   *     @param stiffnessAtOneNormForce<br>
   *         The normalized stiffness (slope of the tendon curve) when the tendon is<br>
   *         strained by strainAtOneNormForce under a load of 1 normalized unit of<br>
   *         force.<br>
   *     @param normForceAtToeEnd<br>
   *         The normalized force developed at the end of the 'toe' region. The toe<br>
   *         region lies between 0 strain and some intermediate strain less than the<br>
   *         strain required to develop 1 unit of normalized force. The toe region is<br>
   *         nonlinear and more compliant than the rest of the tendon curve.<br>
   *     @param curviness<br>
   *         A dimensionless parameter between 0 and 1 that describes the shape of<br>
   *         the curve: a value of 0 indicates that the curve is very close to a<br>
   *         straight line segment and a value of 1 indicates a curve that smoothly<br>
   *         fills the corner formed by the linear extrapolation of<br>
   *         'stiffnessAtOneNormForce' and the x-axis, as shown in the figure in the<br>
   *         class description.
   */
  public void setOptionalProperties(double stiffnessAtOneNormForce, double normForceAtToeEnd, double curviness) {
    opensimSimulationJNI.TendonForceLengthCurve_setOptionalProperties(swigCPtr, this, stiffnessAtOneNormForce, normForceAtToeEnd, curviness);
  }

  /**
   *  Implement the generic OpenSim::Function interface *
   */
  public double calcValue(Vector x) {
    return opensimSimulationJNI.TendonForceLengthCurve_calcValue__SWIG_0(swigCPtr, this, Vector.getCPtr(x), x);
  }

  /**
   *  Evaluates the tendon-force-length curve at a normalized tendon length of<br>
   *     'aNormLength'. 
   */
  public double calcValue(double aNormLength) {
    return opensimSimulationJNI.TendonForceLengthCurve_calcValue__SWIG_1(swigCPtr, this, aNormLength);
  }

  /**
   *  Calculates the derivative of the tendon-force-length multiplier with<br>
   *     respect to the normalized tendon length.<br>
   *     @param aNormLength<br>
   *         The normalized length of the tendon.<br>
   *     @param order<br>
   *         The order of the derivative. Only values of 0, 1, and 2 are acceptable.<br>
   *     @return <br>
   *         The derivative of the tendon-force-length curve with respect to the<br>
   *         normalized tendon length.
   */
  public double calcDerivative(double aNormLength, int order) {
    return opensimSimulationJNI.TendonForceLengthCurve_calcDerivative__SWIG_0(swigCPtr, this, aNormLength, order);
  }

  /**
   *  If possible, use the simpler overload above.
   */
  public double calcDerivative(StdVectorInt derivComponents, Vector x) {
    return opensimSimulationJNI.TendonForceLengthCurve_calcDerivative__SWIG_1(swigCPtr, this, StdVectorInt.getCPtr(derivComponents), derivComponents, Vector.getCPtr(x), x);
  }

  /**
   *  Calculates the normalized area under the curve. Since it is expensive to<br>
   *     construct, the curve is built only when necessary.<br>
   *     @param aNormLength<br>
   *         The normalized length of the tendon.<br>
   *     @return The normalized area under the curve, which corresponds to the<br>
   *         normalized potential energy stored in the tendon. To calculate the<br>
   *         potential energy stored in the tendon in units of Joules, multiply the<br>
   *         returned quantity by normForce*normLength (where normForce is the number<br>
   *         of Newtons represented by a normalized force of 1.0 and normLength is<br>
   *         the number of meters represented by a normalized length of 1.0).
   */
  public double calcIntegral(double aNormLength) {
    return opensimSimulationJNI.TendonForceLengthCurve_calcIntegral(swigCPtr, this, aNormLength);
  }

  /**
   *  Returns a SimTK::Vec2 containing the lower (0th element) and upper (1st<br>
   *     element) bounds on the domain of the curve. Outside this domain, the curve<br>
   *     is approximated using linear extrapolation.<br>
   *     @return <br>
   *         The minimum and maximum value of the domain, x, of the curve y(x).<br>
   *         Within this range, y(x) is a curve; outside this range, the function<br>
   *         y(x) is a C2-continuous linear extrapolation.
   */
  public Vec2 getCurveDomain() {
    return new Vec2(opensimSimulationJNI.TendonForceLengthCurve_getCurveDomain(swigCPtr, this), true);
  }

  /**
   *  Generates a .csv file with a name that matches the curve name (e.g.,<br>
   *     "bicepsfemoris_TendonForceLengthCurve.csv"). This function is not const to<br>
   *     permit the curve to be rebuilt if it is out-of-date with its properties.<br>
   *     @param path<br>
   *         The full destination path. Note that forward slashes ('/') must be used<br>
   *         and there should not be a slash after the last folder.<br>
   * <br>
   *     The file will contain the following data:<br>
   *     {@literal 
      column: 1 | 2 |     3 |       4
        data: x | y | dy/dx | d2y/dx2
      }<br>
   * <br>
   *     Samples will be taken from the zero-force region, through the curve, out to<br>
   *     strains beyond which the tendon generates normalized forces greater than 1.<br>
   *     The curve is sampled quite densely: the tendon-force-length .csv file will<br>
   *     have 200+20 rows.<br>
   * <br>
   *     <b>Example</b><br>
   *     To read the .csv file into Matlab, you need to set csvread to ignore the<br>
   *     header row. Since csvread is 0-indexed, the following example will begin<br>
   *     reading the .csv file from the first column of the second row:<br>
   *     {@literal 
      data = csvread('bicepsfemoris_TendonForceLengthCurve.csv', 1, 0);
      }
   */
  public void printMuscleCurveToCSVFile(String path) {
    opensimSimulationJNI.TendonForceLengthCurve_printMuscleCurveToCSVFile(swigCPtr, this, path);
  }

  public void ensureCurveUpToDate() {
    opensimSimulationJNI.TendonForceLengthCurve_ensureCurveUpToDate(swigCPtr, this);
  }

}
