/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This is a singleton class (single instance) for logging messages and<br>
 *  controlling how those messages are presented to the user.
 */
public class Logger {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public Logger(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Logger obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_Logger(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void addSink(LogSink sink) {
      sink.markAdopted();
      private_addSink(sink);
  }

  /**
   *  Log messages of importance `level` and greater.<br>
   *  For example, if the level is set to Info, then Critical, Error, Warn,<br>
   *  and Info messages are logged, while Debug and Trace messages are not<br>
   *  logged.
   */
  public static void setLevel(Logger.Level level) {
    opensimCommonJNI.Logger_setLevel(level.swigValue());
  }

  public static Logger.Level getLevel() {
    return Logger.Level.swigToEnum(opensimCommonJNI.Logger_getLevel());
  }

  /**
   *  Set the logging level using one of the following strings<br>
   *  (case-insensitive):<br>
   *  - Off<br>
   *  - Critical<br>
   *  - Error<br>
   *  - Warn<br>
   *  - Info<br>
   *  - Debug<br>
   *  - Trace<br>
   *  This variant of setLevel() is for use in Matlab.<br>
   *  @see Level.
   */
  public static void setLevelString(String level) {
    opensimCommonJNI.Logger_setLevelString(level);
  }

  public static String getLevelString() {
    return opensimCommonJNI.Logger_getLevelString();
  }

  /**
   *  Returns true if messages at the provided level should be logged,<br>
   *  based on the set logging level. The following code will produce output:<br>
   *  {@code 
   Log::setLevel(Log::Level::Warn);
   if (shouldLog(Log::Level::Error)) {
       std::cout << "Error encountered." << std::endl;
   }
   }
   */
  public static boolean shouldLog(Logger.Level level) {
    return opensimCommonJNI.Logger_shouldLog(level.swigValue());
  }

  /**
   *  <br>
   *  Log messages to a file at the level getLevel().<br>
   *  OpenSim logs messages to the file opensim.log by default.<br>
   *  If we are already logging messages to a file, then this<br>
   *  function issues a warning and returns; invoke removeFileSink() first.<br>
   *  Note: This function is not thread-safe. Do not invoke this function<br>
   *  concurrently, or concurrently with addSink() or removeSink().<br>
   *  Note: If filepath can't be opened, no log file is created.
   */
  public static void addFileSink(String filepath) {
    opensimCommonJNI.Logger_addFileSink__SWIG_0(filepath);
  }

  /**
   *  <br>
   *  Log messages to a file at the level getLevel().<br>
   *  OpenSim logs messages to the file opensim.log by default.<br>
   *  If we are already logging messages to a file, then this<br>
   *  function issues a warning and returns; invoke removeFileSink() first.<br>
   *  Note: This function is not thread-safe. Do not invoke this function<br>
   *  concurrently, or concurrently with addSink() or removeSink().<br>
   *  Note: If filepath can't be opened, no log file is created.
   */
  public static void addFileSink() {
    opensimCommonJNI.Logger_addFileSink__SWIG_1();
  }

  /**
   *  Remove the filesink if it exists.<br>
   *  If the filesink was already removed, then this does nothing.<br>
   *  Note: This function is not thread-safe. Do not invoke this function<br>
   *  concurrently, or concurrently with addSink() or removeSink().
   */
  public static void removeFileSink() {
    opensimCommonJNI.Logger_removeFileSink();
  }

  /**
   *  Start reporting messages to the provided sink.<br>
   *  Note: This function is not thread-safe. Do not invoke this function<br>
   *  concurrently, or concurrently with addLogFile() or removeSink().
   */
  private static void private_addSink(LogSink sink) {
    opensimCommonJNI.Logger_private_addSink(LogSink.getCPtr(sink), sink);
  }

  /**
   *  Remove a sink. If it doesn't exist, do nothing.<br>
   *  Note: This function is not thread-safe. Do not invoke this function<br>
   *  concurrently, or concurrently with addLogFile() or addSink().
   */
  public static void removeSink(LogSink sink) {
    opensimCommonJNI.Logger_removeSink(LogSink.getCPtr(sink), sink);
  }

  /**
   *  This enum lists the types of messages that should be logged. These<br>
   *  levels match those of the spdlog logging library that OpenSim uses for<br>
   *  logging.
   */
  public final static class Level {
    /**
     *  Do not log any messages. Useful when running an optimization or<br>
     *  automated pipeline.
     */
    public final static Logger.Level Off = new Logger.Level("Off", opensimCommonJNI.Logger_Level_Off_get());
    /**
     *  Only log critical errors.
     */
    public final static Logger.Level Critical = new Logger.Level("Critical", opensimCommonJNI.Logger_Level_Critical_get());
    /**
     *  Log all messages that require user intervention.
     */
    public final static Logger.Level Error = new Logger.Level("Error", opensimCommonJNI.Logger_Level_Error_get());
    /**
     *  Log warnings. Warnings are generated when the software will proceed<br>
     *  but the user should check their input.
     */
    public final static Logger.Level Warn = new Logger.Level("Warn", opensimCommonJNI.Logger_Level_Warn_get());
    /**
     *  Default.
     */
    public final static Logger.Level Info = new Logger.Level("Info", opensimCommonJNI.Logger_Level_Info_get());
    /**
     *  Log information that may be useful when debugging the operation of<br>
     *  the<br>
     *  software to investigate unexpected results.
     */
    public final static Logger.Level Debug = new Logger.Level("Debug", opensimCommonJNI.Logger_Level_Debug_get());
    /**
     *  Log as much as possible, including messages that describe the<br>
     *  software's<br>
     *  behavior step by step. Note: OpenSim has very few Trace-level<br>
     *  messages.
     */
    public final static Logger.Level Trace = new Logger.Level("Trace", opensimCommonJNI.Logger_Level_Trace_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Level swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Level.class + " with value " + swigValue);
    }

    private Level(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Level(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Level(String swigName, Level swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Level[] swigValues = { Off, Critical, Error, Warn, Info, Debug, Trace };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
