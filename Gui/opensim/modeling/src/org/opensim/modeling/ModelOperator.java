/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This abstract base class describes *any* operation that modifies a Model<br>
 * as part of a ModelProcessor. 
 */
public class ModelOperator extends OpenSimObject {
  private transient long swigCPtr;

  public ModelOperator(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.ModelOperator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ModelOperator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_ModelOperator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ModelOperator safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModelOperator_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ModelOperator(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.ModelOperator_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModelOperator_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModelOperator_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ModelOperator(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModelOperator_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Perform an operation on the model, using `relativeToDirectory` to locate<br>
   *     any files that this operator reads. 
   */
  public void operate(Model model, String relativeToDirectory) {
    opensimActuatorsAnalysesToolsJNI.ModelOperator_operate(swigCPtr, this, Model.getCPtr(model), model, relativeToDirectory);
  }

}
