/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Tool extends OpenSimObject {
  private transient long swigCPtr;

  protected Tool(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.Tool_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Tool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_Tool(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Tool safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.Tool_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Tool(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.Tool_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.Tool_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.Tool_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Tool(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.Tool_getConcreteClassName(swigCPtr, this);
  }

  public boolean run() throws java.io.IOException {
    return opensimActuatorsAnalysesToolsJNI.Tool_run(swigCPtr, this);
  }

  public String getInputsDir() {
    return opensimActuatorsAnalysesToolsJNI.Tool_getInputsDir(swigCPtr, this);
  }

  public void setInputsDir(String aString) {
    opensimActuatorsAnalysesToolsJNI.Tool_setInputsDir(swigCPtr, this, aString);
  }

  public String getResultsDir() {
    return opensimActuatorsAnalysesToolsJNI.Tool_getResultsDir(swigCPtr, this);
  }

  public void setResultsDir(String aString) {
    opensimActuatorsAnalysesToolsJNI.Tool_setResultsDir(swigCPtr, this, aString);
  }

  public Tool.VerboseLevel getVerboseLevel() {
    return Tool.VerboseLevel.swigToEnum(opensimActuatorsAnalysesToolsJNI.Tool_getVerboseLevel(swigCPtr, this));
  }

  public void setVerboseLevel(Tool.VerboseLevel aVerboseLevel) {
    opensimActuatorsAnalysesToolsJNI.Tool_setVerboseLevel(swigCPtr, this, aVerboseLevel.swigValue());
  }

  public final static class VerboseLevel {
    public final static Tool.VerboseLevel Quiet = new Tool.VerboseLevel("Quiet", opensimActuatorsAnalysesToolsJNI.Tool_Quiet_get());
    public final static Tool.VerboseLevel Progress = new Tool.VerboseLevel("Progress", opensimActuatorsAnalysesToolsJNI.Tool_Progress_get());
    public final static Tool.VerboseLevel DetailedProgress = new Tool.VerboseLevel("DetailedProgress", opensimActuatorsAnalysesToolsJNI.Tool_DetailedProgress_get());
    public final static Tool.VerboseLevel Debug = new Tool.VerboseLevel("Debug", opensimActuatorsAnalysesToolsJNI.Tool_Debug_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static VerboseLevel swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + VerboseLevel.class + " with value " + swigValue);
    }

    private VerboseLevel(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private VerboseLevel(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private VerboseLevel(String swigName, VerboseLevel swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static VerboseLevel[] swigValues = { Quiet, Progress, DetailedProgress, Debug };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
