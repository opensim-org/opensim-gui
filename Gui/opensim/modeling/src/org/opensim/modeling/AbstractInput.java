/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  A specialized Socket that connects to an Output signal is an Input.<br>
 * An AbstractInput enables maintenance of a list of unconnected Inputs. <br>
 * An Input can either be a single-value Input or a list Input. A list Input<br>
 * can connect to multiple (Output) Channels.<br>
 * <br>
 * #### XML Syntax of a connectee path<br>
 * <br>
 * For every %Input that a component has, the XML representation of the component<br>
 * contains an element named `input_&lt;input_name&gt;`. For example, a component<br>
 * that has an Input named `desired_angle` might look like the following in XML:<br>
 * {@code 
    <MyComponent name="my_comp">
        <input_desired_angle>
            ../foo/angle
        </input_desired_angle>
        ...
    </MyComponent>
}<br>
 * You use this field to specify the outputs/channels that should be connected to<br>
 * this input (that is, the connectees). The syntax for the connectee path<br>
 * property is as follows:<br>
 * {@code 
<path/to/component>|<output_name>[:<channel_name>][(<alias>)]
}<br>
 * Angle brackets indicate fields that one would fill in, and square brackets<br>
 * indicate optional fields. The `&lt;path/to/component&gt;` can be relative or<br>
 * absolute, and describes the location of the Component that contains the <br>
 * desired Output relative to the location of the Component that contains this<br>
 * Input. The `&lt;path/to/component&gt;` and `&lt;output_name&gt;` must always be specified.<br>
 * The `&lt;channel_name&gt;` should only be specified if the %Output is a list output<br>
 * (i.e., it has multiple channels). The `&lt;alias&gt;` is a name for the<br>
 * output/channel that is specific to this input, and it is optional.<br>
 * All fields should contain only letters, numbers, and underscores (the path<br>
 * to the component can contain slashes and periods); fields must *not* contain<br>
 * spaces.<br>
 * Here are some examples:<br>
 *  - `../marker_data|column:left_ankle`: The TableSourceVec3 component<br>
 *    `../marker_data` has a list output `column`, and we want to connect to its<br>
 *    `left_ankle` channel.<br>
 *  - `../averager|output(knee_joint_center)`: The component `../averager`<br>
 *    (presumably a component that averages its inputs) has an output named<br>
 *    `output`, and we are aliasing this output as `knee_joint_center`.<br>
 *  - `/leg_model/soleus|activation`: This connectee path uses the absolute path<br>
 *    to component `soleus`, which has an output named `activation`.<br>
 * <br>
 * List inputs can contain multiple entries in its connectee path, with the<br>
 * entries separated by a space. For example:<br>
 * {@code 
<input_experimental_markers>
    ../marker_data|column:left_ankle ../marker_data|column:right_ankle ../averager|output(knee_joint_center)
</input_experimental_markers>
}
 */
public class AbstractInput extends AbstractSocket {
  private transient long swigCPtr;

  public AbstractInput(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.AbstractInput_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(AbstractInput obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_AbstractInput(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public AbstractSocket clone() {
    long cPtr = opensimCommonJNI.AbstractInput_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractInput(cPtr, true);
  }

  public void connect(OpenSimObject object) {
    opensimCommonJNI.AbstractInput_connect__SWIG_0(swigCPtr, this, OpenSimObject.getCPtr(object), object);
  }

  /**
   *  TODO  Connect this Input to a single-valued (single-channel) Output or, if<br>
   *     this is a list %Input and the %Output is a list %Output, connect to all the<br>
   *     channels of the %Output. You can optionally provide an alias that will be<br>
   *     used by the Component owning this %Input to refer to the %Output. If this<br>
   *     method connects to multiple channels, the alias will be used for all<br>
   *     channels. 
   */
  public void connect(AbstractOutput output, String alias) {
    opensimCommonJNI.AbstractInput_connect__SWIG_1(swigCPtr, this, AbstractOutput.getCPtr(output), output, alias);
  }

  /**
   *  TODO  Connect this Input to a single-valued (single-channel) Output or, if<br>
   *     this is a list %Input and the %Output is a list %Output, connect to all the<br>
   *     channels of the %Output. You can optionally provide an alias that will be<br>
   *     used by the Component owning this %Input to refer to the %Output. If this<br>
   *     method connects to multiple channels, the alias will be used for all<br>
   *     channels. 
   */
  public void connect(AbstractOutput output) {
    opensimCommonJNI.AbstractInput_connect__SWIG_2(swigCPtr, this, AbstractOutput.getCPtr(output), output);
  }

  /**
   *  Connect this Input to a single output channel. This<br>
   *     method can be used with both single-valued and list %Inputs. You can<br>
   *     optionally provide an alias that will be used by the Component owning this<br>
   *     %Input to refer to the %Channel. 
   */
  public void connect(AbstractChannel channel, String alias) {
    opensimCommonJNI.AbstractInput_connect__SWIG_3(swigCPtr, this, AbstractChannel.getCPtr(channel), channel, alias);
  }

  /**
   *  Connect this Input to a single output channel. This<br>
   *     method can be used with both single-valued and list %Inputs. You can<br>
   *     optionally provide an alias that will be used by the Component owning this<br>
   *     %Input to refer to the %Channel. 
   */
  public void connect(AbstractChannel channel) {
    opensimCommonJNI.AbstractInput_connect__SWIG_4(swigCPtr, this, AbstractChannel.getCPtr(channel), channel);
  }

  /**
   *  Get the alias for a Channel. An alias is a description for a %Channel<br>
   *     that is specific to how the Input will use the %Channel. For example, the<br>
   *     Component that owns this %Input might expect the aliases to be the names of<br>
   *     markers in the model. This method can be used only for non-list %Inputs; for<br>
   *     list %Inputs, use the overload that takes an index.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public String getAlias() {
    return opensimCommonJNI.AbstractInput_getAlias__SWIG_0(swigCPtr, this);
  }

  /**
   *  Get the alias for the Channel indicated by the provided index. An alias<br>
   *     is a description for a %Channel that is specific to how the Input will use<br>
   *     the %Channel. For example, the Component that owns this %Input might expect<br>
   *     the aliases to be the names of markers in the model.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public String getAlias(long index) {
    return opensimCommonJNI.AbstractInput_getAlias__SWIG_1(swigCPtr, this, index);
  }

  /**
   *  %Set the alias for a Channel. If this is a list Input, the aliases of all<br>
   *     %Channels will be set to the provided string. If you wish to set the alias<br>
   *     of only one %Channel, use the two-argument overload.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public void setAlias(String alias) {
    opensimCommonJNI.AbstractInput_setAlias__SWIG_0(swigCPtr, this, alias);
  }

  /**
   *  %Set the alias for the Channel indicated by the provided index.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public void setAlias(long index, String alias) {
    opensimCommonJNI.AbstractInput_setAlias__SWIG_1(swigCPtr, this, index, alias);
  }

  /**
   *  Get the label for this Channel. If an alias has been set, the label is<br>
   *     the alias; otherwise, the label is the full path of the Output that has been<br>
   *     connected to this Input. This method can be used only for non-list %Inputs;<br>
   *     for list %Inputs, use the single-argument overload.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public String getLabel() {
    return opensimCommonJNI.AbstractInput_getLabel__SWIG_0(swigCPtr, this);
  }

  /**
   *  Get the label for the Channel indicated by the provided index. If an<br>
   *     alias has been set, the label is the alias; otherwise, the label is the full<br>
   *     path of the %Channel that has been connected to this Input.<br>
   *     You must finalize connections (Component::finalizeConnections()) first. 
   */
  public String getLabel(long index) {
    return opensimCommonJNI.AbstractInput_getLabel__SWIG_1(swigCPtr, this, index);
  }

  /**
   *  Break up a connectee path into its output path, channel name<br>
   *      (empty for single-value outputs), and alias. This function writes<br>
   *      to the passed-in outputPath, channelName, and alias.<br>
   * <br>
   *      Examples:<br>
   *      {@literal 
  foo/bar|output
       outputPath is "/foo/bar/output"
       channelName is ""
       alias is ""
  
  foo/bar|output:channel
       outputPath is "/foo/bar/output"
       channelName is "channel"
       alias is ""
  
  foo/bar|output(baz)
       outputPath is "/foo/bar/output"
       channelName is ""
       alias is "baz"
  
  foo/bar|output:channel(baz)
       outputPath is "/foo/bar|output"
       channelName is "channel"
       alias is "baz"
       }
   */
  public static boolean parseConnecteePath(String connecteePath, SWIGTYPE_p_std__string componentPath, SWIGTYPE_p_std__string outputName, SWIGTYPE_p_std__string channelName, SWIGTYPE_p_std__string alias) {
    return opensimCommonJNI.AbstractInput_parseConnecteePath(connecteePath, SWIGTYPE_p_std__string.getCPtr(componentPath), SWIGTYPE_p_std__string.getCPtr(outputName), SWIGTYPE_p_std__string.getCPtr(channelName), SWIGTYPE_p_std__string.getCPtr(alias));
  }

  /**
   *  Compose the connectee path from its constituents. This is the opposite<br>
   *     operation of parseConnecteePath().<br>
   *     Example:<br>
   *     {@literal 
       if inputs are
         componentPath --> "/foo/bar"
         outputName    --> "output"
         channelName   --> "channel"
         alias         --> "baz"
       then result --> /foo/bar|output:channel(baz)
      }
   */
  public static String composeConnecteePath(String componentPath, String outputName, String channelName, String alias) {
    return opensimCommonJNI.AbstractInput_composeConnecteePath(componentPath, outputName, channelName, alias);
  }

}
