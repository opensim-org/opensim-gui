/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Return type for MocoStudy::solve(). Use success() to check if the solver<br>
 *  succeeded. You can also use this object as a boolean in an if-statement:<br>
 *  {@code 
 auto solution = study.solve();
 if (solution) {
     std::cout << solution.getStatus() << std::endl;
 }
 }<br>
 *  You can use getStatus() to get more details about the return status of<br>
 *  the optimizer.<br>
 *  If the solver was not successful, then this object is "sealed", which<br>
 *  means you cannot do anything with it until calling `unseal()`. This<br>
 *  prevents you from silently proceeding with a failed solution.<br>
 *  In the file written by write(), the header contains solver success, the<br>
 *  objective, the individual terms in the objective (including the weight),<br>
 *  the breakdown of the objective, and other quantities.
 */
public class MocoSolution extends MocoTrajectory {
  private transient long swigCPtr;

  public MocoSolution(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoSolution_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoSolution obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoSolution(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  Returns a dynamically-allocated copy of this solution. You must manage<br>
   *  the memory for return value.<br>
   *  Note: This works even if the trajectory is sealed.
   */
  public MocoTrajectory clone() {
    long cPtr = opensimMocoJNI.MocoSolution_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoSolution(cPtr, true);
  }

  /**
   *  Was the problem solved successfully? If not, then you cannot access<br>
   *  the solution until you call unlock().
   */
  public boolean success() {
    return opensimMocoJNI.MocoSolution_success(swigCPtr, this);
  }

  public double getObjective() {
    return opensimMocoJNI.MocoSolution_getObjective(swigCPtr, this);
  }

  /**
   *  Obtain a solver-dependent string describing the return status of the<br>
   *  optimization.
   */
  public String getStatus() {
    return opensimMocoJNI.MocoSolution_getStatus(swigCPtr, this);
  }

  /**
   *  Number of solver iterations at which this solution was obtained<br>
   *  (-1 if not set).
   */
  public int getNumIterations() {
    return opensimMocoJNI.MocoSolution_getNumIterations(swigCPtr, this);
  }

  /**
   *  Get the amount of time (clock time, not CPU time) spent within solve().<br>
   *  Units: seconds.
   */
  public double getSolverDuration() {
    return opensimMocoJNI.MocoSolution_getSolverDuration(swigCPtr, this);
  }

  /**
   *  Some solvers provide a breakdown of the terms in the objective. Use<br>
   *  these functions to access this breakdown. Some terms may come from<br>
   *  MocoGoals in the problem, while other terms may be added by the solver.<br>
   *  <br>
   *  Returns the number of terms in the objective. If the solver did not<br>
   *  provide this breakdown, then this returns 0.
   */
  public int getNumObjectiveTerms() {
    return opensimMocoJNI.MocoSolution_getNumObjectiveTerms(swigCPtr, this);
  }

  /**
   *  Get the names of all terms in the objective (either from MocoGoals in<br>
   *  the problem or added by the solver). Terms from MocoGoals are named with<br>
   *  the name of the associated MocoGoal. If the solver did not provide this<br>
   *  breakdown, then this returns an empty vector.
   */
  public StdVectorString getObjectiveTermNames() {
    return new StdVectorString(opensimMocoJNI.MocoSolution_getObjectiveTermNames(swigCPtr, this), true);
  }

  /**
   *  Get the value of a term in the objective by name. See<br>
   *  getObjectiveTermNames().<br>
   *  The value includes the weight on the term.
   */
  public double getObjectiveTerm(String name) {
    return opensimMocoJNI.MocoSolution_getObjectiveTerm(swigCPtr, this, name);
  }

  /**
   *  Get the value of a term in the objective, using an index. The order of<br>
   *  terms is the same as in getObjectiveTermNames().<br>
   *  The value includes the weight on the term.
   */
  public double getObjectiveTermByIndex(int index) {
    return opensimMocoJNI.MocoSolution_getObjectiveTermByIndex(swigCPtr, this, index);
  }

  /**
   *  Print to the console the terms in the objective and their values.
   */
  public void printObjectiveBreakdown() {
    opensimMocoJNI.MocoSolution_printObjectiveBreakdown(swigCPtr, this);
  }

  /**
   *  <br>
   *  <br>
   *  If the solver did not succeed, call this to enable read and write<br>
   *  access to the (failed) solution. If the solver succeeded, then the<br>
   *  solution is already unsealed.<br>
   *  Note: In Python, you must invoke this function on a separate line:<br>
   *  {@code 
   solution = moco.solve()
   solution.unseal()
   }<br>
   *  Otherwise, Moco will cause a crash.
   */
  public MocoSolution unseal() {
    return new MocoSolution(opensimMocoJNI.MocoSolution_unseal(swigCPtr, this), false);
  }

  public MocoSolution seal() {
    return new MocoSolution(opensimMocoJNI.MocoSolution_seal(swigCPtr, this), false);
  }

  public boolean isSealed() {
    return opensimMocoJNI.MocoSolution_isSealed(swigCPtr, this);
  }

  public MocoSolution() {
    this(opensimMocoJNI.new_MocoSolution(), true);
  }

}
