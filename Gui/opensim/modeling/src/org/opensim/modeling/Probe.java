/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * This class represents a Probe which is designed to query a Vector of model<br>
 * values given system state. This model quantity is specified as a<br>
 * SimTK::Vector by the pure virtual method computeProbeInputs(), which must be<br>
 * specified for each child Probe.  In addition, the Probe model component<br>
 * interface allows <i> operations </i> to be performed on this value<br>
 * (specified by the property: probe_operation), and then have this result<br>
 * scaled (by the scalar property: 'scale_factor'). <br>
 * <br>
 * The data flow of the Probe is shown below:<br>
 *   {@code 

  ===========================
  |  SimTK::Vector          |       DEVELOPER NEEDS TO IMPLEMENT THIS
  |  computeProbeInputs(s)  |
  ===========================
               |
               |
               |                    THIS FUNCTIONALITY BELOW IS
               |                    PROVIDED BY THE PROBE INTERFACE
  |------------|---------------------------------------------------------|
  |            V                                                         |
  |   =========================         ======================           |
  |   |  Apply the operation  |  ---->  |  Scale the output  |           |
  |   |   'probe_operation'   |         |      'gain'        |           |
  |   =========================         ======================           |
  |                                               |                      |
  |                                               V                      |
  |                                     ========================         |  
  |                                     |  SimTK::Vector       |         |
  |                                     |  getProbeOutputs(s)  |---------------->
  |                                     ========================         |
  |                                    This method is called by the      |
  |                                   ProbeReporter, or alternatively    |
  |                                        by the API developer          |
  |----------------------------------------------------------------------|

  }<br>
 * The model query is performed at Stage::Report, so that model values are up<br>
 * to date and is based on the specific Probe's overridden method<br>
 * computeProbeInputs(s).  The final output of the probe is available by<br>
 * accessing getProbeOutputs(s).  Note that all queries, operations, and<br>
 * scaling are performed by SimTK::Measures.  Note also that to define a new<br>
 * child Probe class, three methods which are declared as pure virtual in this<br>
 * Probe abstract class need to be overridden:<br>
 * <br>
 * - computeProbeInputs()     ---   returns the input probe values (i.e., model<br>
 *                                  queries).<br>
 * - getNumProbeInputs()      ---   returns the size of the vector of input<br>
 *                                  probe values (i.e., model queries).<br>
 * - getProbeOutputLabels()   ---   returns the labels that correspond to each<br>
 *                                  probe value.<br>
 * <br>
 * <b> Available probe operations: </b><br>
 * - 'value' (default): returns the probe input value.<br>
 * - 'integrate'      : returns the integral of the probe input value.<br>
 * - 'differentiate'  : returns the derivative of the probe input value.<br>
 * - 'minimum'        : returns the minimum of the probe input value.<br>
 * - 'minabs'         : returns the absolute minimum of the probe input value<br>
 *                      (always positive).<br>
 * - 'maximum'        : returns the maximum of the probe input value.<br>
 * - 'maxabs'         : returns the absolute maximum of the probe input value<br>
 *                      (always positive).<br>
 * <br>
 * The Probe interface differs from the Analysis interface in two fundamental<br>
 * ways:<br>
 * -  (1) Operations can be performed on probes (i.e., in addition to simply<br>
 *        reporting a model value, model values (probe input values) may have<br>
 *        operations performed on them such as integration and<br>
 *        differentiation).<br>
 * <br>
 * -  (2) Analyses are not formally part of the model structure (i.e. they are<br>
 *        not ModelComponents), and because of this, analysis results can not<br>
 *        be accessed with the model and state value -- they can only be<br>
 *        accessed by file at the end of a simulation. Probes, on the other<br>
 *        hand, are ModelComponents and therefore can be accessed at any time<br>
 *        during a simulation from the API, and can also be used to compute<br>
 *        model values that are fed back into the system via custom<br>
 *        designed Controllers. Note that Probe values can also be reported to<br>
 *        file at the end of a simulation by attaching a ProbeReporter analysis<br>
 *        to the simulation.<br>
 * <br>
 * <br>
 * @author Tim Dorn
 */
public class Probe extends ModelComponent {
  private transient long swigCPtr;

  public Probe(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Probe_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Probe obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Probe(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Probe safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Probe_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Probe(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Probe_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Probe_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Probe_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Probe(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Probe_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Enabled (true) by default. *
   */
  public void copyProperty_enabled(Probe source) {
    opensimSimulationJNI.Probe_copyProperty_enabled(swigCPtr, this, Probe.getCPtr(source), source);
  }

  public boolean get_enabled(int i) {
    return opensimSimulationJNI.Probe_get_enabled__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_enabled(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Probe_upd_enabled__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_enabled(int i, boolean value) {
    opensimSimulationJNI.Probe_set_enabled__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_enabled(boolean value) {
    return opensimSimulationJNI.Probe_append_enabled(swigCPtr, this, value);
  }

  public void constructProperty_enabled(boolean initValue) {
    opensimSimulationJNI.Probe_constructProperty_enabled(swigCPtr, this, initValue);
  }

  public boolean get_enabled() {
    return opensimSimulationJNI.Probe_get_enabled__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_enabled() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.Probe_upd_enabled__SWIG_1(swigCPtr, this), false);
  }

  public void set_enabled(boolean value) {
    opensimSimulationJNI.Probe_set_enabled__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_probe_operation(Probe source) {
    opensimSimulationJNI.Probe_copyProperty_probe_operation(swigCPtr, this, Probe.getCPtr(source), source);
  }

  public String get_probe_operation(int i) {
    return opensimSimulationJNI.Probe_get_probe_operation__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_probe_operation(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Probe_upd_probe_operation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_probe_operation(int i, String value) {
    opensimSimulationJNI.Probe_set_probe_operation__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_probe_operation(String value) {
    return opensimSimulationJNI.Probe_append_probe_operation(swigCPtr, this, value);
  }

  public void constructProperty_probe_operation(String initValue) {
    opensimSimulationJNI.Probe_constructProperty_probe_operation(swigCPtr, this, initValue);
  }

  public String get_probe_operation() {
    return opensimSimulationJNI.Probe_get_probe_operation__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_probe_operation() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.Probe_upd_probe_operation__SWIG_1(swigCPtr, this), false);
  }

  public void set_probe_operation(String value) {
    opensimSimulationJNI.Probe_set_probe_operation__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_initial_conditions_for_integration(Probe source) {
    opensimSimulationJNI.Probe_copyProperty_initial_conditions_for_integration(swigCPtr, this, Probe.getCPtr(source), source);
  }

  public double get_initial_conditions_for_integration(int i) {
    return opensimSimulationJNI.Probe_get_initial_conditions_for_integration(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_initial_conditions_for_integration(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Probe_upd_initial_conditions_for_integration(swigCPtr, this, i), false);
  }

  public void set_initial_conditions_for_integration(int i, double value) {
    opensimSimulationJNI.Probe_set_initial_conditions_for_integration(swigCPtr, this, i, value);
  }

  public int append_initial_conditions_for_integration(double value) {
    return opensimSimulationJNI.Probe_append_initial_conditions_for_integration(swigCPtr, this, value);
  }

  public void constructProperty_initial_conditions_for_integration() {
    opensimSimulationJNI.Probe_constructProperty_initial_conditions_for_integration(swigCPtr, this);
  }

  public void copyProperty_gain(Probe source) {
    opensimSimulationJNI.Probe_copyProperty_gain(swigCPtr, this, Probe.getCPtr(source), source);
  }

  public double get_gain(int i) {
    return opensimSimulationJNI.Probe_get_gain__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_gain(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Probe_upd_gain__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_gain(int i, double value) {
    opensimSimulationJNI.Probe_set_gain__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_gain(double value) {
    return opensimSimulationJNI.Probe_append_gain(swigCPtr, this, value);
  }

  public void constructProperty_gain(double initValue) {
    opensimSimulationJNI.Probe_constructProperty_gain(swigCPtr, this, initValue);
  }

  public double get_gain() {
    return opensimSimulationJNI.Probe_get_gain__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_gain() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Probe_upd_gain__SWIG_1(swigCPtr, this), false);
  }

  public void set_gain(double value) {
    opensimSimulationJNI.Probe_set_gain__SWIG_1(swigCPtr, this, value);
  }

  public void set_has_output_probe_outputs(boolean value) {
    opensimSimulationJNI.Probe__has_output_probe_outputs_set(swigCPtr, this, value);
  }

  public boolean get_has_output_probe_outputs() {
    return opensimSimulationJNI.Probe__has_output_probe_outputs_get(swigCPtr, this);
  }

  /**
   *  Reset (initialize) the underlying Probe SimTK::Measure. 
   */
  public void reset(State s) {
    opensimSimulationJNI.Probe_reset(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   *  Get the number of states in the underlying SimTK::Measure. 
   */
  public int getNumInternalMeasureStates() {
    return opensimSimulationJNI.Probe_getNumInternalMeasureStates(swigCPtr, this);
  }

  /**
   *  Returns true if the Probe is enabled and false if the probe is <br>
   *         disabled. 
   */
  public boolean isEnabled() {
    return opensimSimulationJNI.Probe_isEnabled(swigCPtr, this);
  }

  /**
   *  %Set the Probe as enabled (true) or disabled (false). 
   */
  public void setEnabled(boolean enabled) {
    opensimSimulationJNI.Probe_setEnabled(swigCPtr, this, enabled);
  }

  /**
   *  Return the operation being performed on the probe value. 
   */
  public String getOperation() {
    return opensimSimulationJNI.Probe_getOperation(swigCPtr, this);
  }

  /**
   *  %Set the operation being performed on the probe value. 
   */
  public void setOperation(String probe_operation) {
    opensimSimulationJNI.Probe_setOperation(swigCPtr, this, probe_operation);
  }

  /**
   *  Return the initial conditions (when the probe_operation is set to 'integrate'). 
   */
  public Vector getInitialConditions() {
    return new Vector(opensimSimulationJNI.Probe_getInitialConditions(swigCPtr, this), true);
  }

  /**
   *  %Set the initial conditions (when the probe_operation is set to 'integrate'). 
   */
  public void setInitialConditions(Vector initial_conditions_for_integration) {
    opensimSimulationJNI.Probe_setInitialConditions(swigCPtr, this, Vector.getCPtr(initial_conditions_for_integration), initial_conditions_for_integration);
  }

  /**
   *  Return the gain to apply to the probe output. 
   */
  public double getGain() {
    return opensimSimulationJNI.Probe_getGain(swigCPtr, this);
  }

  /**
   *  %Set the gain to apply to the probe output. 
   */
  public void setGain(double gain) {
    opensimSimulationJNI.Probe_setGain(swigCPtr, this, gain);
  }

  /**
   *  Returns the values of the probe after the operation has been performed.<br>
   * <br>
   *     @param state   System state from which value is computed.  <br>
   *     @return The SimTK::Vector of probe output values.*
   */
  public Vector getProbeOutputs(State state) {
    return new Vector(opensimSimulationJNI.Probe_getProbeOutputs(swigCPtr, this, State.getCPtr(state), state), true);
  }

  public void updateFromXMLNode(SWIGTYPE_p_SimTK__Xml__Element node, int versionNumber) {
    opensimSimulationJNI.Probe_updateFromXMLNode(swigCPtr, this, SWIGTYPE_p_SimTK__Xml__Element.getCPtr(node), versionNumber);
  }

}
