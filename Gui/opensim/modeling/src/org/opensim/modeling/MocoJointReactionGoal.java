/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Minimize the sum of squares of specified reaction moment and force<br>
 * measures for a given joint, integrated over the phase. If the magnitude of<br>
 * the gravity acceleration vector (Model::get_gravity()) is non-zero, then the<br>
 * goal is normalized by the model's weight; otherwise, the goal is normalized<br>
 * by the model's mass. We assume the system's mass is constant (that is,<br>
 * MocoParameters do not affect mass).<br>
 * <br>
 * In addition to specifying the joint and reaction measures, the user may<br>
 * also specify the frame the loads are computed from ("parent" or "child"),<br>
 * and the frame the loads are expressed in (any valid frame in the model).<br>
 * <br>
 * Minimizing the y-direction reaction force on the child frame of the right<br>
 * knee joint expressed in the right tibia frame:<br>
 * {@code 
auto* cost = problem.addGoal<MocoJointReactionCost>();
cost->setName("tibiofemoral_compressive_force");
cost->setJointPath("/jointset/knee_r");
cost->setLoadsFrame("child");
cost->setExpressedInFramePath("/bodyset/tibia_r");
cost->setReactionMeasures({"force-y"});
}<br>
 * <br>
 * This cost requires realizing to the Acceleration stage.<br>
 * 
 */
public class MocoJointReactionGoal extends MocoGoal {
  private transient long swigCPtr;

  public MocoJointReactionGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoJointReactionGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoJointReactionGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoJointReactionGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoJointReactionGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoJointReactionGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoJointReactionGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoJointReactionGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoJointReactionGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoJointReactionGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoJointReactionGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoJointReactionGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoJointReactionGoal() {
    this(opensimMocoJNI.new_MocoJointReactionGoal__SWIG_0(), true);
  }

  public MocoJointReactionGoal(String name) {
    this(opensimMocoJNI.new_MocoJointReactionGoal__SWIG_1(name), true);
  }

  public MocoJointReactionGoal(String name, double weight) {
    this(opensimMocoJNI.new_MocoJointReactionGoal__SWIG_2(name, weight), true);
  }

  /**
   *  Set the model path to the joint whose reaction load(s) will be<br>
   *     minimized. 
   */
  public void setJointPath(String jointPath) {
    opensimMocoJNI.MocoJointReactionGoal_setJointPath(swigCPtr, this, jointPath);
  }

  /**
   *  Set the frame from which the reaction loads are computed. Options:<br>
   *     "parent" or "child" (default: "parent"). 
   */
  public void setLoadsFrame(String frame) {
    opensimMocoJNI.MocoJointReactionGoal_setLoadsFrame(swigCPtr, this, frame);
  }

  /**
   *  Set the frame in which the minimized reaction load is expressed. By<br>
   *     default, it is set to the parent or child frame depending on the<br>
   *     'loads_frame' property value. 
   */
  public void setExpressedInFramePath(String framePath) {
    opensimMocoJNI.MocoJointReactionGoal_setExpressedInFramePath(swigCPtr, this, framePath);
  }

  /**
   *  Set a specific set of reaction measures to be minimized. Options:<br>
   *     "moment-x", "moment-y", "moment-z", "force-x", "force-y", and "force-z".<br>
   *     All reaction measures are minimized by default.<br>
   *     Replaces the reaction measure set if it already exists. 
   */
  public void setReactionMeasures(StdVectorString measures) {
    opensimMocoJNI.MocoJointReactionGoal_setReactionMeasures(swigCPtr, this, StdVectorString.getCPtr(measures), measures);
  }

  /**
   *  Set the weight for an individual reaction measure. If a weight is<br>
   *     already set for the requested measure, then the provided weight<br>
   *     replaces the previous weight. An exception is thrown during<br>
   *     initialization if a weight for an unknown measure is provided. 
   */
  public void setWeight(String stateName, double weight) {
    opensimMocoJNI.MocoJointReactionGoal_setWeight(swigCPtr, this, stateName, weight);
  }

  /**
   *  Provide a MocoWeightSet to weight the reaction measures in the cost.<br>
   *     Replaces the weight set if it already exists. 
   */
  public void setWeightSet(MocoWeightSet weightSet) {
    opensimMocoJNI.MocoJointReactionGoal_setWeightSet(swigCPtr, this, MocoWeightSet.getCPtr(weightSet), weightSet);
  }

}
