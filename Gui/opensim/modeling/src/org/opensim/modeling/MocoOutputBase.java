/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This abstract base class provides convenience methods and common interfaces<br>
 * for all Output-related MocoGoal's. All MocoGoal's deriving from this class<br>
 * include the 'setOutputPath()', 'setOutputIndex()', and 'setExponent()' methods<br>
 * and their corresponding Object properties. The convenience method<br>
 * 'initializeOnModelBase()' should be called at the top of<br>
 * 'initializeOnModelImpl()' within each derived class. Similarly,<br>
 * 'calcOutputValue()' can be used to retrieve the Output value with<br>
 * 'calcGoalImpl()' and/or 'calcIntegrandImpl()', as needed for each derived class.<br>
 * The method 'getDependsOnStage()' returns the SimTK::Stage that should be realized<br>
 * to to calculate Output values. The method 'setValueToExponent()' can be used to<br>
 * raise a value to the exponent provided via 'setExponent()'.<br>
 * <br>
 * We support the following Output types:<br>
 * - double<br>
 * - SimTK::Vec3<br>
 * - SimTK::SpatialVec<br>
 * <br>
 * When using vector types, 'setOutputIndex()' may be used to select a specific<br>
 * element of the Output vector. If not specified, the norm of the vector is<br>
 * returned when calling 'calcOutputValue()'.<br>
 * <br>
 * 
 */
public class MocoOutputBase extends MocoGoal {
  private transient long swigCPtr;

  public MocoOutputBase(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoOutputBase_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoOutputBase obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoOutputBase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoOutputBase safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoOutputBase_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoOutputBase(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoOutputBase_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoOutputBase_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoOutputBase_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoOutputBase(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoOutputBase_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Set the absolute path to the output in the model to use as the integrand<br>
   *     for this goal. The format is "/path/to/component|output_name". 
   */
  public void setOutputPath(String path) {
    opensimMocoJNI.MocoOutputBase_setOutputPath(swigCPtr, this, path);
  }

  public String getOutputPath() {
    return opensimMocoJNI.MocoOutputBase_getOutputPath(swigCPtr, this);
  }

  /**
   *  Set the exponent applied to the output value in the integrand. This<br>
   *     exponent is applied when minimizing the norm of a vector type output. The<br>
   *     default exponent is set to 1, meaning that the output can take on negative<br>
   *     values in the integrand. When the exponent is set to a value greater than<br>
   *     1, the absolute value function is applied to the output (before the<br>
   *     exponent is applied), meaning that odd numbered exponents (greater than 1)<br>
   *     do not take on negative values. 
   */
  public void setExponent(int exponent) {
    opensimMocoJNI.MocoOutputBase_setExponent(swigCPtr, this, exponent);
  }

  public int getExponent() {
    return opensimMocoJNI.MocoOutputBase_getExponent(swigCPtr, this);
  }

  /**
   *  Set the index to the value to be minimized when a vector type Output is<br>
   *     specified. For SpatialVec Outputs, indices 0, 1, and 2 refer to the<br>
   *     rotational components and indices 3, 4, and 5 refer to the translational<br>
   *     components. A value of -1 indicates to minimize the vector norm (which is the<br>
   *     default setting). If an index for a type double Output is provided, an<br>
   *     exception is thrown. 
   */
  public void setOutputIndex(int index) {
    opensimMocoJNI.MocoOutputBase_setOutputIndex(swigCPtr, this, index);
  }

  public int getOutputIndex() {
    return opensimMocoJNI.MocoOutputBase_getOutputIndex(swigCPtr, this);
  }

}
