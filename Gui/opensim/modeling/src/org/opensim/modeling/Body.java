/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * An OpenSim::Body is a PhysicalFrame (reference frame) with associated <br>
 * inertia specified by its mass, center-of-mass located in the PhysicalFrame,<br>
 * and its moment of inertia tensor about the center-of-mass.<br>
 * <br>
 * @author Ajay Seth
 */
public class Body extends PhysicalFrame {
  private transient long swigCPtr;

  public Body(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Body_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Body obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Body(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Body safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Body_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Body(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Body_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Body_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Body_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Body(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Body_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_mass(Body source) {
    opensimSimulationJNI.Body_copyProperty_mass(swigCPtr, this, Body.getCPtr(source), source);
  }

  public double get_mass(int i) {
    return opensimSimulationJNI.Body_get_mass__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_mass(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Body_upd_mass__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_mass(int i, double value) {
    opensimSimulationJNI.Body_set_mass__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_mass(double value) {
    return opensimSimulationJNI.Body_append_mass(swigCPtr, this, value);
  }

  public void constructProperty_mass(double initValue) {
    opensimSimulationJNI.Body_constructProperty_mass(swigCPtr, this, initValue);
  }

  public double get_mass() {
    return opensimSimulationJNI.Body_get_mass__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_mass() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Body_upd_mass__SWIG_1(swigCPtr, this), false);
  }

  public void set_mass(double value) {
    opensimSimulationJNI.Body_set_mass__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_mass_center(Body source) {
    opensimSimulationJNI.Body_copyProperty_mass_center(swigCPtr, this, Body.getCPtr(source), source);
  }

  public Vec3 get_mass_center(int i) {
    return new Vec3(opensimSimulationJNI.Body_get_mass_center__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_mass_center(int i) {
    return new Vec3(opensimSimulationJNI.Body_upd_mass_center__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_mass_center(int i, Vec3 value) {
    opensimSimulationJNI.Body_set_mass_center__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_mass_center(Vec3 value) {
    return opensimSimulationJNI.Body_append_mass_center(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_mass_center(Vec3 initValue) {
    opensimSimulationJNI.Body_constructProperty_mass_center(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_mass_center() {
    return new Vec3(opensimSimulationJNI.Body_get_mass_center__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_mass_center() {
    return new Vec3(opensimSimulationJNI.Body_upd_mass_center__SWIG_1(swigCPtr, this), false);
  }

  public void set_mass_center(Vec3 value) {
    opensimSimulationJNI.Body_set_mass_center__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void copyProperty_inertia(Body source) {
    opensimSimulationJNI.Body_copyProperty_inertia(swigCPtr, this, Body.getCPtr(source), source);
  }

  public Vec6 get_inertia(int i) {
    return new Vec6(opensimSimulationJNI.Body_get_inertia__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec6 upd_inertia(int i) {
    return new Vec6(opensimSimulationJNI.Body_upd_inertia__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_inertia(int i, Vec6 value) {
    opensimSimulationJNI.Body_set_inertia__SWIG_0(swigCPtr, this, i, Vec6.getCPtr(value), value);
  }

  public int append_inertia(Vec6 value) {
    return opensimSimulationJNI.Body_append_inertia(swigCPtr, this, Vec6.getCPtr(value), value);
  }

  public void constructProperty_inertia(Vec6 initValue) {
    opensimSimulationJNI.Body_constructProperty_inertia(swigCPtr, this, Vec6.getCPtr(initValue), initValue);
  }

  public Vec6 get_inertia() {
    return new Vec6(opensimSimulationJNI.Body_get_inertia__SWIG_1(swigCPtr, this), false);
  }

  public Vec6 upd_inertia() {
    return new Vec6(opensimSimulationJNI.Body_upd_inertia__SWIG_1(swigCPtr, this), false);
  }

  public void set_inertia(Vec6 value) {
    opensimSimulationJNI.Body_set_inertia__SWIG_1(swigCPtr, this, Vec6.getCPtr(value), value);
  }

  /**
   *  default constructor
   */
  public Body() {
    this(opensimSimulationJNI.new_Body__SWIG_0(), true);
  }

  /**
   *  Convenience constructor 
   */
  public Body(String aName, double aMass, Vec3 aMassCenter, Inertia aInertia) {
    this(opensimSimulationJNI.new_Body__SWIG_1(aName, aMass, Vec3.getCPtr(aMassCenter), aMassCenter, Inertia.getCPtr(aInertia), aInertia), true);
  }

  /**
   *  Access Properties of the Body  The mass of the body in kg 
   */
  public double getMass() {
    return opensimSimulationJNI.Body_getMass(swigCPtr, this);
  }

  public void setMass(double mass) {
    opensimSimulationJNI.Body_setMass(swigCPtr, this, mass);
  }

  /**
   *  The body center of mass location (Vec3) in the Body frame. 
   */
  public Vec3 getMassCenter() {
    return new Vec3(opensimSimulationJNI.Body_getMassCenter(swigCPtr, this), false);
  }

  public void setMassCenter(Vec3 com) {
    opensimSimulationJNI.Body_setMassCenter(swigCPtr, this, Vec3.getCPtr(com), com);
  }

  /**
   *  The body's inertia about the center of mass location. 
   */
  public Inertia getInertia() {
    return new Inertia(opensimSimulationJNI.Body_getInertia__SWIG_0(swigCPtr, this), false);
  }

  public void setInertia(Inertia aInertia) {
    opensimSimulationJNI.Body_setInertia__SWIG_0(swigCPtr, this, Inertia.getCPtr(aInertia), aInertia);
  }

  /**
   *  Assemble body inertial properties: mass, center of mass location, moment <br>
   *         of inertia about the origin of the body and return as<br>
   *         SimTK::MassProperties.
   */
  public MassProperties getMassProperties() {
    return new MassProperties(opensimSimulationJNI.Body_getMassProperties(swigCPtr, this), true);
  }

  /**
   *  Scale the Body's center of mass location and its inertial properties. 
   */
  public void scale(Vec3 scaleFactors, boolean scaleMass) {
    opensimSimulationJNI.Body_scale__SWIG_0(swigCPtr, this, Vec3.getCPtr(scaleFactors), scaleFactors, scaleMass);
  }

  /**
   *  Scale the Body's center of mass location and its inertial properties. 
   */
  public void scale(Vec3 scaleFactors) {
    opensimSimulationJNI.Body_scale__SWIG_1(swigCPtr, this, Vec3.getCPtr(scaleFactors), scaleFactors);
  }

  /**
   *  Scale the Body's center of mass location only. Note that<br>
   *         scaleInertialProperties() must be called after this method to update the<br>
   *         Body's mass and inertia tensor. 
   */
  public void extendScale(State s, ScaleSet scaleSet) {
    opensimSimulationJNI.Body_extendScale(swigCPtr, this, State.getCPtr(s), s, ScaleSet.getCPtr(scaleSet), scaleSet);
  }

  /**
   *  Scale the Body's mass and inertia tensor. 
   */
  public void scaleInertialProperties(ScaleSet scaleSet, boolean scaleMass) {
    opensimSimulationJNI.Body_scaleInertialProperties__SWIG_0(swigCPtr, this, ScaleSet.getCPtr(scaleSet), scaleSet, scaleMass);
  }

  /**
   *  Scale the Body's mass and inertia tensor. 
   */
  public void scaleInertialProperties(ScaleSet scaleSet) {
    opensimSimulationJNI.Body_scaleInertialProperties__SWIG_1(swigCPtr, this, ScaleSet.getCPtr(scaleSet), scaleSet);
  }

  public void scaleInertialProperties(Vec3 scaleFactors, boolean scaleMass) {
    opensimSimulationJNI.Body_scaleInertialProperties__SWIG_2(swigCPtr, this, Vec3.getCPtr(scaleFactors), scaleFactors, scaleMass);
  }

  public void scaleInertialProperties(Vec3 scaleFactors) {
    opensimSimulationJNI.Body_scaleInertialProperties__SWIG_3(swigCPtr, this, Vec3.getCPtr(scaleFactors), scaleFactors);
  }

  public void scaleMass(double aScaleFactor) {
    opensimSimulationJNI.Body_scaleMass(swigCPtr, this, aScaleFactor);
  }

  public void getInertia(ArrayDouble rInertia) {
    opensimSimulationJNI.Body_getInertia__SWIG_1(swigCPtr, this, ArrayDouble.getCPtr(rInertia), rInertia);
  }

  public void setInertia(ArrayDouble aInertia) {
    opensimSimulationJNI.Body_setInertia__SWIG_1(swigCPtr, this, ArrayDouble.getCPtr(aInertia), aInertia);
  }

}
