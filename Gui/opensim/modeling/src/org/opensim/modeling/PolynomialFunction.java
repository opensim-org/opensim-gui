/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class for representing a Polynomial of x.<br>
 * <br>
 * f(x) = a*x^n + b*x^(n-1) + ... + c<br>
 * <br>
 * Order of the coefficients corresponds to decreasing powers.<br>
 * <br>
 * @author Carmichael Ong
 */
public class PolynomialFunction extends Function {
  private transient long swigCPtr;

  public PolynomialFunction(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.PolynomialFunction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(PolynomialFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_PolynomialFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static PolynomialFunction safeDownCast(OpenSimObject obj) {
    long cPtr = opensimCommonJNI.PolynomialFunction_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new PolynomialFunction(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimCommonJNI.PolynomialFunction_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimCommonJNI.PolynomialFunction_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimCommonJNI.PolynomialFunction_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new PolynomialFunction(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimCommonJNI.PolynomialFunction_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Construct a polynomial with default coefficients of {1}
   */
  public PolynomialFunction() {
    this(opensimCommonJNI.new_PolynomialFunction__SWIG_0(), true);
  }

  /**
   *  Construct a polynomial with provided Vector of coefficients <br>
   * {a, b, ..., c} where the polynomial order, n = size-1
   */
  public PolynomialFunction(Vector coefficients) {
    this(opensimCommonJNI.new_PolynomialFunction__SWIG_1(Vector.getCPtr(coefficients), coefficients), true);
  }

  /**
   *  %Set coefficients for the polynomial f of variable x:<br>
   * f(x) = a*x^n + b*x^(n-1) + ... + c <br>
   * The size of the coefficient vector determines the order of the polynomial.<br>
   * n = size-1;<br>
   * @param coefficients      Vector of polynomial coefficients
   */
  public void setCoefficients(Vector coefficients) {
    opensimCommonJNI.PolynomialFunction_setCoefficients(swigCPtr, this, Vector.getCPtr(coefficients), coefficients);
  }

  /**
   *  Get the polynomial function coefficients 
   */
  public Vector getCoefficients() {
    return new Vector(opensimCommonJNI.PolynomialFunction_getCoefficients(swigCPtr, this), true);
  }

  /**
   *  Return the underlying SimTK::Function::Polynomial for direct use<br>
   *   at the SimTK::System level <br>
   * @return Pointer to the underlying SimTK::Function
   */
  public SWIGTYPE_p_SimTK__Function createSimTKFunction() {
    long cPtr = opensimCommonJNI.PolynomialFunction_createSimTKFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SimTK__Function(cPtr, false);
  }

}
