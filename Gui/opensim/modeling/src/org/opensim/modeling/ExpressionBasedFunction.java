/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A function based on a user-defined mathematical expression.<br>
 * <br>
 * This class allows users to define a function based on a mathematical<br>
 * expression (e.g., "x*sqrt(y-8)"). The expression can be a function of any <br>
 * number of independent variables. The expression is parsed and evaluated using <br>
 * the Lepton library.<br>
 * <br>
 * Set the expression using setExpression(). Any variables used in the <br>
 * expression must be explicitly defined using setVariables(). This <br>
 * implementation allows computation of first-order derivatives only.<br>
 * <br>
 * # Creating Expressions<br>
 * <br>
 * Expressions can contain variables, constants, operations, parentheses, commas, <br>
 * spaces, and scientific "e" notation. The full list of supported operations is: <br>
 * sqrt, exp, log, sin, cos, sec, csc, tan, cot, asin, acos, atan, sinh, cosh, <br>
 * tanh, erf, erfc, step, delta, square, cube, recip, min, max, abs, +, -, *, /, <br>
 * and ^. 
 */
public class ExpressionBasedFunction extends Function {
  private transient long swigCPtr;

  public ExpressionBasedFunction(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.ExpressionBasedFunction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ExpressionBasedFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(ExpressionBasedFunction obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_ExpressionBasedFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ExpressionBasedFunction safeDownCast(OpenSimObject obj) {
    long cPtr = opensimCommonJNI.ExpressionBasedFunction_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ExpressionBasedFunction(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimCommonJNI.ExpressionBasedFunction_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimCommonJNI.ExpressionBasedFunction_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimCommonJNI.ExpressionBasedFunction_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ExpressionBasedFunction(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimCommonJNI.ExpressionBasedFunction_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_expression(ExpressionBasedFunction source) {
    opensimCommonJNI.ExpressionBasedFunction_copyProperty_expression(swigCPtr, this, ExpressionBasedFunction.getCPtr(source), source);
  }

  public String get_expression(int i) {
    return opensimCommonJNI.ExpressionBasedFunction_get_expression__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_expression(int i) {
    return new SWIGTYPE_p_std__string(opensimCommonJNI.ExpressionBasedFunction_upd_expression__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_expression(int i, String value) {
    opensimCommonJNI.ExpressionBasedFunction_set_expression__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_expression(String value) {
    return opensimCommonJNI.ExpressionBasedFunction_append_expression(swigCPtr, this, value);
  }

  public void constructProperty_expression(String initValue) {
    opensimCommonJNI.ExpressionBasedFunction_constructProperty_expression(swigCPtr, this, initValue);
  }

  public String get_expression() {
    return opensimCommonJNI.ExpressionBasedFunction_get_expression__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_expression() {
    return new SWIGTYPE_p_std__string(opensimCommonJNI.ExpressionBasedFunction_upd_expression__SWIG_1(swigCPtr, this), false);
  }

  public void set_expression(String value) {
    opensimCommonJNI.ExpressionBasedFunction_set_expression__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_variables(ExpressionBasedFunction source) {
    opensimCommonJNI.ExpressionBasedFunction_copyProperty_variables(swigCPtr, this, ExpressionBasedFunction.getCPtr(source), source);
  }

  public String get_variables(int i) {
    return opensimCommonJNI.ExpressionBasedFunction_get_variables(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_variables(int i) {
    return new SWIGTYPE_p_std__string(opensimCommonJNI.ExpressionBasedFunction_upd_variables(swigCPtr, this, i), false);
  }

  public void set_variables(int i, String value) {
    opensimCommonJNI.ExpressionBasedFunction_set_variables(swigCPtr, this, i, value);
  }

  public int append_variables(String value) {
    return opensimCommonJNI.ExpressionBasedFunction_append_variables(swigCPtr, this, value);
  }

  public void constructProperty_variables() {
    opensimCommonJNI.ExpressionBasedFunction_constructProperty_variables(swigCPtr, this);
  }

  /**
   *  Default constructor. 
   */
  public ExpressionBasedFunction() {
    this(opensimCommonJNI.new_ExpressionBasedFunction__SWIG_0(), true);
  }

  /**
   *  Convenience constructor.<br>
   * <br>
   * @param expression The expression that defines this Function.<br>
   * @param variables The independent variable names of this expression.
   */
  public ExpressionBasedFunction(String expression, StdVectorString variables) {
    this(opensimCommonJNI.new_ExpressionBasedFunction__SWIG_1(expression, StdVectorString.getCPtr(variables), variables), true);
  }

  /**
   * The mathematical expression that defines this Function. The expression <br>
   * should be a function of the variables defined via setVariables().<br>
   * <br>
   * Note: The expression cannot contain any whitespace characters.
   */
  public void setExpression(String expression) {
    opensimCommonJNI.ExpressionBasedFunction_setExpression(swigCPtr, this, expression);
  }

  /**
   *  
   */
  public String getExpression() {
    return opensimCommonJNI.ExpressionBasedFunction_getExpression(swigCPtr, this);
  }

  /**
   * The independent variable names of this expression. The variables names <br>
   * should be unique and should be comprised of alphabetic characters or any <br>
   * characters not reserved by Lepton (i.e., +, -, *, /, and ^). Variable<br>
   * names can contain numbers as long they do not come first in the name<br>
   * (e.g., "var0"). The input vector passed to calcValue() and <br>
   * calcDerivative() should be in the same order as the variables defined<br>
   * here.
   */
  public void setVariables(StdVectorString variables) {
    opensimCommonJNI.ExpressionBasedFunction_setVariables(swigCPtr, this, StdVectorString.getCPtr(variables), variables);
  }

  /**
   *  
   */
  public StdVectorString getVariables() {
    return new StdVectorString(opensimCommonJNI.ExpressionBasedFunction_getVariables(swigCPtr, this), true);
  }

  /**
   * Return a pointer to a SimTK::Function object that implements this<br>
   * function.
   */
  public SWIGTYPE_p_SimTK__Function createSimTKFunction() {
    long cPtr = opensimCommonJNI.ExpressionBasedFunction_createSimTKFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SimTK__Function(cPtr, false);
  }

}
