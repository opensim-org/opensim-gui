/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This macro checks the given condition and throws the given exception if the<br>
 * condition is true. Here's an example that throws an exception if some result is<br>
 * incorrect, and passes `result` and `5` to the constructor of the<br>
 * `ResultIsIncorrect` exception:<br>
 * {@code 
auto result = getSomeResult();
OPENSIM_THROW_IF(result != 5, ResultIsIncorrect, result, 5);
}<br>
 *                                                     Macro to throw from within an Object. This macro picks up implicit pointer<br>
 * to the object and uses it to print information.                                Macro to throw from within an Object if a condition evaluates to TRUE. This <br>
 * macro picks up implicit pointer to the object and uses it to print <br>
 * information.                                                                   <br>
 * A class for basic exception functionality.<br>
 * If: developer {<br>
 * To create exception classes in OpenSim, use the following guidelines.<br>
 * If the intention is to derive from an exception named, for example,<br>
 * BaseException that is part of OpenSim, use the following blueprint:<br>
 * {@code 
    class MyNewException : public BaseException {
    public:
        MyNewException(const std::string& file,
                       size_t line,
                       const std::string& func,
                       <more parameters as appropriate>) :
        BaseException(file, line, func) {
            std::string message = <create the desired message>;
            addMessage(message);
        }
    };
}<br>
 * Exception class manages the concatenation of error messages from all the <br>
 * derived classes. When creating new exceptions, remember to call addMessage()<br>
 * as shown above if the exception class does have any error message.}
 */
public class OpenSimException {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public OpenSimException(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(OpenSimException obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_OpenSimException(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  This constructor is for backward compatibility. Use the constructor<br>
   *     taking file, line, func.                                                  
   */
  public OpenSimException(String aMsg, String aFile, int aLine) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_0(aMsg, aFile, aLine), true);
  }

  /**
   *  This constructor is for backward compatibility. Use the constructor<br>
   *     taking file, line, func.                                                  
   */
  public OpenSimException(String aMsg, String aFile) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_1(aMsg, aFile), true);
  }

  /**
   *  This constructor is for backward compatibility. Use the constructor<br>
   *     taking file, line, func.                                                  
   */
  public OpenSimException(String aMsg) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_2(aMsg), true);
  }

  /**
   *  This constructor is for backward compatibility. Use the constructor<br>
   *     taking file, line, func.                                                  
   */
  public OpenSimException() {
    this(opensimCommonJNI.new_OpenSimException__SWIG_3(), true);
  }

  /**
   *  Call this constructor from derived classes to add file, line and <br>
   *     function information to the error message. Use this when throwing<br>
   *     Derived classes. Use OPENSIM_THROW_&lt;&gt; macros at throw sites.              
   */
  public OpenSimException(String file, long line, String func) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_4(file, line, func), true);
  }

  /**
   *  Use this when you want to throw an Exception (with OPENSIM_THROW or<br>
   *     OPENSIM_THROW_IF) and also provide a message.                             
   */
  public OpenSimException(String file, long line, String func, String msg) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_5(file, line, func, msg), true);
  }

  /**
   *  The message created by this constructor will contain the class name and<br>
   *     instance name of the provided Object. Use this when throwing derived<br>
   *     classes. Use OPENSIM_THROW_&lt;&gt; macros at throw sites.                      
   */
  public OpenSimException(String file, long line, String func, OpenSimObject obj) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_6(file, line, func, OpenSimObject.getCPtr(obj), obj), true);
  }

  /**
   *  The message created by this constructor will contain the class name and<br>
   *     instance name of the provided Object, and also accepts a message. Use this<br>
   *     when throwing Exception directly. Use OPENSIM_THROW_&lt;&gt; macros at throw <br>
   *     sites.                                                                    
   */
  public OpenSimException(String file, long line, String func, OpenSimObject obj, String msg) {
    this(opensimCommonJNI.new_OpenSimException__SWIG_7(file, line, func, OpenSimObject.getCPtr(obj), obj, msg), true);
  }

  public void setMessage(String aMsg) {
    opensimCommonJNI.OpenSimException_setMessage(swigCPtr, this, aMsg);
  }

  public String getMessage() {
    return opensimCommonJNI.OpenSimException_getMessage(swigCPtr, this);
  }

  public String what() {
    return opensimCommonJNI.OpenSimException_what(swigCPtr, this);
  }

}
