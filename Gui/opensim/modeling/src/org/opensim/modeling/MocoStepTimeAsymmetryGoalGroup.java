/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  A contact group includes a list of contact force component paths in the<br>
 * model. One of these force elements is designated to locate the position of the<br>
 * foot (via the 'foot_position_contact_force_path' property) which is necessary to<br>
 * compute step time asymmetry. The MocoStepTimeAsymmetryGoal determines when a foot<br>
 * is in contact with the ground when the total contact force from the sum of the<br>
 * elements in this group exceeds a user provided threshold.<br>
 * <br>
 * @see MocoStepTimeAsymmetryGoal 
 */
public class MocoStepTimeAsymmetryGoalGroup extends OpenSimObject {
  private transient long swigCPtr;

  public MocoStepTimeAsymmetryGoalGroup(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoStepTimeAsymmetryGoalGroup obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoStepTimeAsymmetryGoalGroup(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoStepTimeAsymmetryGoalGroup safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoStepTimeAsymmetryGoalGroup(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoStepTimeAsymmetryGoalGroup(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_contact_force_paths(MocoStepTimeAsymmetryGoalGroup source) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_copyProperty_contact_force_paths(swigCPtr, this, MocoStepTimeAsymmetryGoalGroup.getCPtr(source), source);
  }

  public String get_contact_force_paths(int i) {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_get_contact_force_paths(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_contact_force_paths(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_upd_contact_force_paths(swigCPtr, this, i), false);
  }

  public void set_contact_force_paths(int i, String value) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_set_contact_force_paths(swigCPtr, this, i, value);
  }

  public int append_contact_force_paths(String value) {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_append_contact_force_paths(swigCPtr, this, value);
  }

  public void constructProperty_contact_force_paths() {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_constructProperty_contact_force_paths(swigCPtr, this);
  }

  public void copyProperty_foot_position_contact_force_path(MocoStepTimeAsymmetryGoalGroup source) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_copyProperty_foot_position_contact_force_path(swigCPtr, this, MocoStepTimeAsymmetryGoalGroup.getCPtr(source), source);
  }

  public String get_foot_position_contact_force_path(int i) {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_get_foot_position_contact_force_path__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_foot_position_contact_force_path(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_upd_foot_position_contact_force_path__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_foot_position_contact_force_path(int i, String value) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_set_foot_position_contact_force_path__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_foot_position_contact_force_path(String value) {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_append_foot_position_contact_force_path(swigCPtr, this, value);
  }

  public void constructProperty_foot_position_contact_force_path(String initValue) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_constructProperty_foot_position_contact_force_path(swigCPtr, this, initValue);
  }

  public String get_foot_position_contact_force_path() {
    return opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_get_foot_position_contact_force_path__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_foot_position_contact_force_path() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_upd_foot_position_contact_force_path__SWIG_1(swigCPtr, this), false);
  }

  public void set_foot_position_contact_force_path(String value) {
    opensimMocoJNI.MocoStepTimeAsymmetryGoalGroup_set_foot_position_contact_force_path__SWIG_1(swigCPtr, this, value);
  }

  public MocoStepTimeAsymmetryGoalGroup() {
    this(opensimMocoJNI.new_MocoStepTimeAsymmetryGoalGroup__SWIG_0(), true);
  }

  public MocoStepTimeAsymmetryGoalGroup(StdVectorString contactForcePaths, String footPositionForcePath) {
    this(opensimMocoJNI.new_MocoStepTimeAsymmetryGoalGroup__SWIG_1(StdVectorString.getCPtr(contactForcePaths), contactForcePaths, footPositionForcePath), true);
  }

}
