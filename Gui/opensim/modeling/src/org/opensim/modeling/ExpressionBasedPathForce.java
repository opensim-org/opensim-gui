/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A massless, path-based Force whose force magnitude is determined by a <br>
 * user-defined expression, with the path stretch (`s = l-l0`) and the path <br>
 * speed (`ldot`) as variables, where `l` is the path length and `l0` is the <br>
 * rest length. The path of the ExpressionBasedPathForce is determined by an <br>
 * object derived from AbstractGeometryPath. <br>
 * <br>
 * "s" and "ldot" are the variables names expected by the expression parser.<br>
 * Common C math library functions such as: exp(), pow(), sqrt(), sin(), ...<br>
 * are permitted. See Lepton/Operation.h for a complete list.<br>
 * <br>
 * By default, the ExpressionBasedPathForce will not apply tension when the <br>
 * path stretch is negative (i.e., when the path is shorter than its resting <br>
 * length). This behavior can be modified by setting the `clamp_stretch`<br>
 * property via `setClampStretch()`. Clamping the path stretch creates a <br>
 * discontinuity in the force profile, which may not be desired during gradient<br>
 * based optimization. <br>
 * <br>
 * For example: string expression = "-1.5*exp(10*(d-0.25)^2)*(1 + 2.0*ddot)"<br>
 *              provides a model of a path force with non-linear stiffness <br>
 *              and damping.
 */
public class ExpressionBasedPathForce extends ForceProducer {
  private transient long swigCPtr;

  public ExpressionBasedPathForce(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ExpressionBasedPathForce_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ExpressionBasedPathForce obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(ExpressionBasedPathForce obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ExpressionBasedPathForce(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ExpressionBasedPathForce safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ExpressionBasedPathForce_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ExpressionBasedPathForce(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ExpressionBasedPathForce_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ExpressionBasedPathForce_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ExpressionBasedPathForce_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ExpressionBasedPathForce(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ExpressionBasedPathForce_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_resting_length(ExpressionBasedPathForce source) {
    opensimSimulationJNI.ExpressionBasedPathForce_copyProperty_resting_length(swigCPtr, this, ExpressionBasedPathForce.getCPtr(source), source);
  }

  public double get_resting_length(int i) {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_resting_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_resting_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ExpressionBasedPathForce_upd_resting_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_resting_length(int i, double value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_resting_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_resting_length(double value) {
    return opensimSimulationJNI.ExpressionBasedPathForce_append_resting_length(swigCPtr, this, value);
  }

  public void constructProperty_resting_length(double initValue) {
    opensimSimulationJNI.ExpressionBasedPathForce_constructProperty_resting_length(swigCPtr, this, initValue);
  }

  public double get_resting_length() {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_resting_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_resting_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ExpressionBasedPathForce_upd_resting_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_resting_length(double value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_resting_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_expression(ExpressionBasedPathForce source) {
    opensimSimulationJNI.ExpressionBasedPathForce_copyProperty_expression(swigCPtr, this, ExpressionBasedPathForce.getCPtr(source), source);
  }

  public String get_expression(int i) {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_expression__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_expression(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.ExpressionBasedPathForce_upd_expression__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_expression(int i, String value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_expression__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_expression(String value) {
    return opensimSimulationJNI.ExpressionBasedPathForce_append_expression(swigCPtr, this, value);
  }

  public void constructProperty_expression(String initValue) {
    opensimSimulationJNI.ExpressionBasedPathForce_constructProperty_expression(swigCPtr, this, initValue);
  }

  public String get_expression() {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_expression__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_expression() {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.ExpressionBasedPathForce_upd_expression__SWIG_1(swigCPtr, this), false);
  }

  public void set_expression(String value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_expression__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_path(ExpressionBasedPathForce source) {
    opensimSimulationJNI.ExpressionBasedPathForce_copyProperty_path(swigCPtr, this, ExpressionBasedPathForce.getCPtr(source), source);
  }

  public AbstractGeometryPath get_path(int i) {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_get_path__SWIG_0(swigCPtr, this, i), false);
  }

  public AbstractGeometryPath upd_path(int i) {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_upd_path__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_path(int i, AbstractGeometryPath value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_path__SWIG_0(swigCPtr, this, i, AbstractGeometryPath.getCPtr(value), value);
  }

  public int append_path(AbstractGeometryPath value) {
    return opensimSimulationJNI.ExpressionBasedPathForce_append_path(swigCPtr, this, AbstractGeometryPath.getCPtr(value), value);
  }

  public void constructProperty_path(AbstractGeometryPath initValue) {
    opensimSimulationJNI.ExpressionBasedPathForce_constructProperty_path(swigCPtr, this, AbstractGeometryPath.getCPtr(initValue), initValue);
  }

  public AbstractGeometryPath get_path() {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_get_path__SWIG_1(swigCPtr, this), false);
  }

  public AbstractGeometryPath upd_path() {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_upd_path__SWIG_1(swigCPtr, this), false);
  }

  public void set_path(AbstractGeometryPath value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_path__SWIG_1(swigCPtr, this, AbstractGeometryPath.getCPtr(value), value);
  }

  public void copyProperty_clamp_stretch(ExpressionBasedPathForce source) {
    opensimSimulationJNI.ExpressionBasedPathForce_copyProperty_clamp_stretch(swigCPtr, this, ExpressionBasedPathForce.getCPtr(source), source);
  }

  public boolean get_clamp_stretch(int i) {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_clamp_stretch__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_clamp_stretch(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.ExpressionBasedPathForce_upd_clamp_stretch__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_clamp_stretch(int i, boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_clamp_stretch__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_clamp_stretch(boolean value) {
    return opensimSimulationJNI.ExpressionBasedPathForce_append_clamp_stretch(swigCPtr, this, value);
  }

  public void constructProperty_clamp_stretch(boolean initValue) {
    opensimSimulationJNI.ExpressionBasedPathForce_constructProperty_clamp_stretch(swigCPtr, this, initValue);
  }

  public boolean get_clamp_stretch() {
    return opensimSimulationJNI.ExpressionBasedPathForce_get_clamp_stretch__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_clamp_stretch() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.ExpressionBasedPathForce_upd_clamp_stretch__SWIG_1(swigCPtr, this), false);
  }

  public void set_clamp_stretch(boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce_set_clamp_stretch__SWIG_1(swigCPtr, this, value);
  }

  public void set_has_output_length(boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce__has_output_length_set(swigCPtr, this, value);
  }

  public boolean get_has_output_length() {
    return opensimSimulationJNI.ExpressionBasedPathForce__has_output_length_get(swigCPtr, this);
  }

  public void set_has_output_stretch(boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce__has_output_stretch_set(swigCPtr, this, value);
  }

  public boolean get_has_output_stretch() {
    return opensimSimulationJNI.ExpressionBasedPathForce__has_output_stretch_get(swigCPtr, this);
  }

  public void set_has_output_lengthening_speed(boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce__has_output_lengthening_speed_set(swigCPtr, this, value);
  }

  public boolean get_has_output_lengthening_speed() {
    return opensimSimulationJNI.ExpressionBasedPathForce__has_output_lengthening_speed_get(swigCPtr, this);
  }

  public void set_has_output_tension(boolean value) {
    opensimSimulationJNI.ExpressionBasedPathForce__has_output_tension_set(swigCPtr, this, value);
  }

  public boolean get_has_output_tension() {
    return opensimSimulationJNI.ExpressionBasedPathForce__has_output_tension_get(swigCPtr, this);
  }

  /**
   *  Default constructor. 
   */
  public ExpressionBasedPathForce() {
    this(opensimSimulationJNI.new_ExpressionBasedPathForce__SWIG_0(), true);
  }

  /**
   *  Convenience constructor.<br>
   * @param name          name of this %ExpressionBasedPathForce Object<br>
   * @param restLength    the force's resting length<br>
   * @param expression    the expression used to compute force tension <br>
   * @param clampStretch  if true, the force will not apply tension when the<br>
   *                      path is shorter than its resting length 
   */
  public ExpressionBasedPathForce(String name, double restLength, String expression, boolean clampStretch) {
    this(opensimSimulationJNI.new_ExpressionBasedPathForce__SWIG_1(name, restLength, expression, clampStretch), true);
  }

  /**
   *  Convenience constructor.<br>
   * @param name          name of this %ExpressionBasedPathForce Object<br>
   * @param restLength    the force's resting length<br>
   * @param expression    the expression used to compute force tension <br>
   * 
   */
  public ExpressionBasedPathForce(String name, double restLength, String expression) {
    this(opensimSimulationJNI.new_ExpressionBasedPathForce__SWIG_2(name, restLength, expression), true);
  }

  /**
   * The resting length of the path force. The default value is 0. 
   */
  public double getRestingLength() {
    return opensimSimulationJNI.ExpressionBasedPathForce_getRestingLength(swigCPtr, this);
  }

  /**
   *  
   */
  public void setRestingLength(double restingLength) {
    opensimSimulationJNI.ExpressionBasedPathForce_setRestingLength(swigCPtr, this, restingLength);
  }

  /**
   * The expression that defines the path force tension. <br>
   * Note: The expression must not contain any whitespace separating <br>
   *       characters.
   */
  public void setExpression(String expression) {
    opensimSimulationJNI.ExpressionBasedPathForce_setExpression(swigCPtr, this, expression);
  }

  /**
   *  
   */
  public String getExpression() {
    return opensimSimulationJNI.ExpressionBasedPathForce_getExpression(swigCPtr, this);
  }

  /**
   * If true, the force will not apply tension when the path is shorter than <br>
   * its resting length. Default: true.
   */
  public boolean getClampStretch() {
    return opensimSimulationJNI.ExpressionBasedPathForce_getClampStretch(swigCPtr, this);
  }

  /**
   *  
   */
  public void setClampStretch(boolean clampStretch) {
    opensimSimulationJNI.ExpressionBasedPathForce_setClampStretch(swigCPtr, this, clampStretch);
  }

  /**
   * The path object. 
   */
  public AbstractGeometryPath updPath() {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_updPath(swigCPtr, this), false);
  }

  public AbstractGeometryPath getPath() {
    return new AbstractGeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_getPath(swigCPtr, this), false);
  }

  public GeometryPath updGeometryPath() {
    return new GeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_updGeometryPath(swigCPtr, this), false);
  }

  public GeometryPath getGeometryPath() {
    return new GeometryPath(opensimSimulationJNI.ExpressionBasedPathForce_getGeometryPath(swigCPtr, this), false);
  }

  public boolean hasVisualPath() {
    return opensimSimulationJNI.ExpressionBasedPathForce_hasVisualPath(swigCPtr, this);
  }

  /**
   * Get the length of the ExpressionBasedPathForce. <br>
   * <br>
   * Note: Accessible at SimTK::Stage::Position. 
   */
  public double getLength(State s) {
    return opensimSimulationJNI.ExpressionBasedPathForce_getLength(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   * Get the stretch in the ExpressionBasedPathForce. <br>
   * <br>
   * Note: Accessible at SimTK::Stage::Position. 
   */
  public double getStretch(State s) {
    return opensimSimulationJNI.ExpressionBasedPathForce_getStretch(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   * Get the lengthening speed of the ExpressionBasedPathForce. <br>
   * <br>
   * Note: Accessible at SimTK::Stage::Velocity. 
   */
  public double getLengtheningSpeed(State s) {
    return opensimSimulationJNI.ExpressionBasedPathForce_getLengtheningSpeed(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   * Get the tension generated by the ExpressionBasedPathForce. <br>
   * <br>
   * Note: Accessible at SimTK::Stage::Dynamics. 
   */
  public double getTension(State s) {
    return opensimSimulationJNI.ExpressionBasedPathForce_getTension(swigCPtr, this, State.getCPtr(s), s);
  }

  /**
   * Compute the moment arm of the path with respect to a given coordinate.
   */
  public double computeMomentArm(State s, Coordinate aCoord) {
    return opensimSimulationJNI.ExpressionBasedPathForce_computeMomentArm(swigCPtr, this, State.getCPtr(s), s, Coordinate.getCPtr(aCoord), aCoord);
  }

  /**
   *  Adjust the resting length of the path force after the model has been<br>
   * scaled. The `resting_length` property is multiplied by the quotient of<br>
   * the current path length and the path length before scaling. 
   */
  public void extendPostScale(State s, ScaleSet scaleSet) {
    opensimSimulationJNI.ExpressionBasedPathForce_extendPostScale(swigCPtr, this, State.getCPtr(s), s, ScaleSet.getCPtr(scaleSet), scaleSet);
  }

}
