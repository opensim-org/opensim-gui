/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  C3DFileAdapter reads a C3D file into markers and forces tables of type<br>
 * TimeSeriesTableVec3. The markers table has each column labeled by its<br>
 * corresponding marker name. For the forces table, the data are grouped<br>
 * by sensor (force-plate #) in force, point and moment order, with the<br>
 * respective *f#*, *p#* and *m#* column labels. C3DFileAdpater provides<br>
 * options for expressing the force-plate measurements either as the<br>
 * net force and moments expressed at the ForcePlateOrigin, the<br>
 * CenterOfPressure, or the PointOfWrenchApplication. 
 */
public class C3DFileAdapter extends FileAdapter {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected C3DFileAdapter(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.C3DFileAdapter_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(C3DFileAdapter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        opensimCommonJNI.delete_C3DFileAdapter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DataAdapter clone() {
    long cPtr = opensimCommonJNI.C3DFileAdapter_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new C3DFileAdapter(cPtr, true);
  }

  /**
   *   C3DFileAdpater provides options for expressing the force-plate <br>
   *         measurements either as the net force and moments expressed at the <br>
   *         ForcePlateOrigin, the CenterOfPressure, or the <br>
   *         PointOfWrenchApplication.  This function sets the option. 
   */
  public void setLocationForForceExpression(C3DFileAdapter.ForceLocation location) {
    opensimCommonJNI.C3DFileAdapter_setLocationForForceExpression__SWIG_0(swigCPtr, this, location.swigValue());
  }

  /**
   *  Retrieve the option for location for force expression 
   */
  public C3DFileAdapter.ForceLocation getLocationForForceExpression() {
    return C3DFileAdapter.ForceLocation.swigToEnum(opensimCommonJNI.C3DFileAdapter_getLocationForForceExpression(swigCPtr, this));
  }

  /**
   *  Retrieve the TimeSeriesTableVec3 of Markers 
   */
  public TimeSeriesTableVec3 getMarkersTable(StdMapStringAbstractDataTable tables) {
    long cPtr = opensimCommonJNI.C3DFileAdapter_getMarkersTable(swigCPtr, this, StdMapStringAbstractDataTable.getCPtr(tables), tables);
    return (cPtr == 0) ? null : new TimeSeriesTableVec3(cPtr, true);
  }

  /**
   *  Retrieve the TimeSeriesTableVec3 of Forces 
   */
  public TimeSeriesTableVec3 getForcesTable(StdMapStringAbstractDataTable tables) {
    long cPtr = opensimCommonJNI.C3DFileAdapter_getForcesTable(swigCPtr, this, StdMapStringAbstractDataTable.getCPtr(tables), tables);
    return (cPtr == 0) ? null : new TimeSeriesTableVec3(cPtr, true);
  }

  public static String get_markers() {
    return opensimCommonJNI.C3DFileAdapter__markers_get();
  }

  public static String get_forces() {
    return opensimCommonJNI.C3DFileAdapter__forces_get();
  }

  public void setLocationForForceExpression(long wrt) {
    opensimCommonJNI.C3DFileAdapter_setLocationForForceExpression__SWIG_1(swigCPtr, this, wrt);
  }

  public C3DFileAdapter() {
    this(opensimCommonJNI.new_C3DFileAdapter(), true);
  }

  /**
   *  Enumerated list of locations in which read in forces are expressed.<br>
   *         %Measurement from force plates can be expressed by the C3DFileAdapter<br>
   *         either at the OriginOfForcePlate (the default), CenterOfPressure, or<br>
   *         the PointOfWrenchApplication. You need to call  setLocationForForceExpression<br>
   *         before invoking C3DFileAdapter::read(), otherwise the default location<br>
   *         (OriginOfForcePlate) is assumed.<br>
   * <br>
   *         In the case of the CenterOfPressure (COP), the underlying assumptions<br>
   *         are that the ground plane (in which COP is defined) passes through the<br>
   *         lab origin (0,0,0) with the Z-axis as its normal vector.<br>
   * <br>
   *         The PointOfWrenchApplication (PWA) does not assume a plane of contact.<br>
   *         The PWA is an equivalent wrench in the lab frame and computed according<br>
   *         to Shimba 1984.<br>
   *         Takeshi Shimba, An estimation of center of gravity from force platform<br>
   *         data, Journal of Biomechanics, 17(1), pp53-60, 1984.<br>
   * <br>
   *         <b>C++ example</b><br>
   *         {@code 
          C3DFileAdapter c3dFileAdapter;
          c3dFileAdapter.setLocationForForceExpression(C3DFileAdapter::ForceLocation::CenterOfPressure);
          auto tables  =  c3dFileAdapter.read("myData.c3d");
          auto markersTable = c3dFileAdapter.getMarkersTable(tables);
          auto forcesTable = c3dFileAdapter.getForcesTable(tables);
          }<br>
   * <br>
   *         <b>Python example</b><br>
   *         {@code 
          import opensim
          c3dFileAdapter = opensim.C3DFileAdapter()
          c3dFileAdapter.setLocationForForceExpression(opensim.C3DFileAdapter.ForceLocation_CenterOfPressure);
          tables = c3dFileAdapter.read("myData.c3d")
          markersTable = c3dFileAdapter.getMarkersTable(tables)
          forcesTable = c3dFileAdapter.getForcesTable(tables)
          }<br>
   * <br>
   *         <b>Java example</b><br>
   *         {@code 
          C3DFileAdapter c3dFileAdapter = new C3DFileAdapter();
          c3dFileAdapter.setLocationForForceExpression(C3DFileAdapter.ForceLocation.CenterOfPressure);
          tables = c3dFileAdapter.read("myData.c3d");
          TimeSeriesTableVec3 markersTable = c3dFileAdapter.getMarkersTable(tables);
          TimeSeriesTableVec3 forcesTable = c3dFileAdapter.getForcesTable(tables);

          }<br>
   * <br>
   *         <b>MATLAB example</b><br>
   *         {@code 
           c3dFileAdapter = C3DFileAdapter();
           c3dFileAdapter.setLocationForForceExpression(1);
           tables = c3dFileAdapter.read('myData.c3d');
           markersTable = c3dFileAdapter.getMarkersTable(tables);
           forcesTable = c3dFileAdapter.getForcesTable(tables);
          }
   */
  public final static class ForceLocation {
    /**
     *  0 : the origin of the force-plate
     */
    public final static C3DFileAdapter.ForceLocation OriginOfForcePlate = new C3DFileAdapter.ForceLocation("OriginOfForcePlate", opensimCommonJNI.C3DFileAdapter_ForceLocation_OriginOfForcePlate_get());
    /**
     *  1 : the center of pressure
     */
    public final static C3DFileAdapter.ForceLocation CenterOfPressure = new C3DFileAdapter.ForceLocation("CenterOfPressure", opensimCommonJNI.C3DFileAdapter_ForceLocation_CenterOfPressure_get());
    /**
     *  2 : PWA as defined by Shimba, 1984
     */
    public final static C3DFileAdapter.ForceLocation PointOfWrenchApplication = new C3DFileAdapter.ForceLocation("PointOfWrenchApplication", opensimCommonJNI.C3DFileAdapter_ForceLocation_PointOfWrenchApplication_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ForceLocation swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ForceLocation.class + " with value " + swigValue);
    }

    private ForceLocation(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ForceLocation(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ForceLocation(String swigName, ForceLocation swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ForceLocation[] swigValues = { OriginOfForcePlate, CenterOfPressure, PointOfWrenchApplication };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
