/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class provides utilities for creating OpenSim models.
 */
public class ModelFactory {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ModelFactory(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ModelFactory obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_ModelFactory(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  <br>
   *  Create a pendulum with the provided number of links.<br>
   *  For each link, there is a body `/bodyset/b#` (where `#` is the link<br>
   *  index starting at 0), a PinJoint `/jointset/j#` with coordinate<br>
   *  `/jointset/j#/q#`, a CoordinateActuator `/tau#`, a Marker<br>
   *  `/markerset/marker#` at the origin of the link's body, and a<br>
   *  PhysicalOffsetFrame <code>/b</code>#center at the center of the link.
   */
  public static Model createNLinkPendulum(int numLinks) {
    return new Model(opensimActuatorsAnalysesToolsJNI.ModelFactory_createNLinkPendulum(numLinks), true);
  }

  /**
   *  This is a convenience for `createNLinkPendulum(1)`.
   */
  public static Model createPendulum() {
    return new Model(opensimActuatorsAnalysesToolsJNI.ModelFactory_createPendulum(), true);
  }

  /**
   *  This is a convenience for `createNLinkPendulum(2)`.
   */
  public static Model createDoublePendulum() {
    return new Model(opensimActuatorsAnalysesToolsJNI.ModelFactory_createDoublePendulum(), true);
  }

  /**
   *  This model contains:<br>
   *  - 1 body: mass 1.0 kg, `/bodyset/body`.<br>
   *  - 1 joint: SliderJoint along x axis, `/jointset/slider`, with<br>
   *             coordinate `/jointset/slider/position`.<br>
   *  - 1 actuator: CoordinateActuator, controls [-10, 10], `/actuator`.<br>
   *  Gravity is default; that is, (0, -g, 0).
   */
  public static Model createSlidingPointMass() {
    return new Model(opensimActuatorsAnalysesToolsJNI.ModelFactory_createSlidingPointMass(), true);
  }

  /**
   *  This model contains:<br>
   *  - 2 bodies: a massless body "intermed", and "body" with mass 1.<br>
   *  - 2 slider joints: "tx" and "ty" (coordinates "tx" and "ty").<br>
   *  - 2 coordinate actuators: "force_x" and "force_y".<br>
   *  Gravity is default; that is, (0, -g, 0).
   */
  public static Model createPlanarPointMass() {
    return new Model(opensimActuatorsAnalysesToolsJNI.ModelFactory_createPlanarPointMass(), true);
  }

  /**
   *  <br>
   *  <br>
   *  Replace muscles in a model with a PathActuator of the same GeometryPath,<br>
   *  optimal force, and min/max control defaults.<br>
   *  Note: This only replaces muscles within the model's ForceSet.
   */
  public static void replaceMusclesWithPathActuators(Model model) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_replaceMusclesWithPathActuators(Model.getCPtr(model), model);
  }

  /**
   *  Remove muscles from the model.<br>
   *  Note: This only removes muscles within the model's ForceSet.
   */
  public static void removeMuscles(Model model) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_removeMuscles(Model.getCPtr(model), model);
  }

  /**
   *  Replace a joint in the model with a WeldJoint.<br>
   *  Note: This assumes the joint is in the JointSet and that the joint's<br>
   *        connectees are PhysicalOffsetFrames.
   */
  public static void replaceJointWithWeldJoint(Model model, String jointName) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_replaceJointWithWeldJoint(Model.getCPtr(model), model, jointName);
  }

  /**
   *  Add CoordinateActuator%s for each unconstrained coordinate (e.g.,<br>
   *  `! Coordinate::isConstrained()`) in the model, using the provided optimal<br>
   *  force. Increasing the optimal force decreases the required control<br>
   *  signal to generate a given actuation level. The actuators are added to<br>
   *  the model's ForceSet and are named "reserve_<coordinate-path>" with<br>
   *  forward slashes converted to underscores. The `bound` argument, if<br>
   *  supplied, sets the min and max controls to `-bound` and `bound`,<br>
   *  respectively.<br>
   *  The fourth (optional) argument<br>
   *  specifies whether or not to skip coordinates that already have<br>
   *  CoordinateActuator%s associated with them (default: true).
   */
  public static void createReserveActuators(Model model, double optimalForce, double bound, boolean skipCoordinatesWithExistingActuators) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_createReserveActuators__SWIG_0(Model.getCPtr(model), model, optimalForce, bound, skipCoordinatesWithExistingActuators);
  }

  /**
   *  Add CoordinateActuator%s for each unconstrained coordinate (e.g.,<br>
   *  `! Coordinate::isConstrained()`) in the model, using the provided optimal<br>
   *  force. Increasing the optimal force decreases the required control<br>
   *  signal to generate a given actuation level. The actuators are added to<br>
   *  the model's ForceSet and are named "reserve_<coordinate-path>" with<br>
   *  forward slashes converted to underscores. The `bound` argument, if<br>
   *  supplied, sets the min and max controls to `-bound` and `bound`,<br>
   *  respectively.<br>
   *  The fourth (optional) argument<br>
   *  specifies whether or not to skip coordinates that already have<br>
   *  CoordinateActuator%s associated with them (default: true).
   */
  public static void createReserveActuators(Model model, double optimalForce, double bound) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_createReserveActuators__SWIG_1(Model.getCPtr(model), model, optimalForce, bound);
  }

  /**
   *  Add CoordinateActuator%s for each unconstrained coordinate (e.g.,<br>
   *  `! Coordinate::isConstrained()`) in the model, using the provided optimal<br>
   *  force. Increasing the optimal force decreases the required control<br>
   *  signal to generate a given actuation level. The actuators are added to<br>
   *  the model's ForceSet and are named "reserve_<coordinate-path>" with<br>
   *  forward slashes converted to underscores. The `bound` argument, if<br>
   *  supplied, sets the min and max controls to `-bound` and `bound`,<br>
   *  respectively.<br>
   *  The fourth (optional) argument<br>
   *  specifies whether or not to skip coordinates that already have<br>
   *  CoordinateActuator%s associated with them (default: true).
   */
  public static void createReserveActuators(Model model, double optimalForce) {
    opensimActuatorsAnalysesToolsJNI.ModelFactory_createReserveActuators__SWIG_2(Model.getCPtr(model), model, optimalForce);
  }

  public ModelFactory() {
    this(opensimActuatorsAnalysesToolsJNI.new_ModelFactory(), true);
  }

}
