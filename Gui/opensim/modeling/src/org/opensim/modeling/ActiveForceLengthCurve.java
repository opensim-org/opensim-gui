/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class serves as a serializable ActiveForceLengthCurve, commonly used<br>
 *     to model the active element in muscle models. The active-force-length curve<br>
 *     is dimensionless: force is normalized to maximum isometric force and length<br>
 *     is normalized to resting fiber length. Five properties are used to construct<br>
 *     a curve:<br>
 * <br>
 *     <br>
 * <br>
 *     <img src=fig_ActiveForceLengthCurve.png/><br>
 * <br>
 *     <b>Conditions</b><br>
 *     {@literal 
    0 < minActiveNormFiberLength < transitionNormFiberLength < 1 < maxActiveNormFiberLength
    0 <= shallowAscendingSlope < 1/(1-transitionNormFiberLength)
    0 <= minimumValue
    }<br>
 * <br>
 *     <b>Default Parameter Values</b><br>
 *     The default parameters have been chosen so that the resulting curve closely<br>
 *     matches the active-force-length curve for human sarcomeres, as documented by<br>
 *     Nigg and Herzog (1994). The descending limb has been adjusted to match the<br>
 *     in-vitro human fiber data reported by Gollapudi and Lin (2009). The default<br>
 *     shoulder value is set to 0.1. This relatively large value is used to ensure<br>
 *     that muscle model dynamic equations with an active-force-length singularity<br>
 *     do not take an unreasonable amount of time to simulate (simulation time<br>
 *     grows as the value of the active-force-length curve approaches 0). %Muscle<br>
 *     model formulations that do not have this singularity (e.g., the<br>
 *     Millard2012AccelerationMuscle model) can use a minimumValue of 0.<br>
 * <br>
 *     {@literal 
    minActiveNormFiberLength ..... 0.4441
    transitionNormFiberLength .... 0.73
    maxActiveNormFiberLength ..... 1.8123
    shallowAscendingSlope ........ 0.8616
    minimumValue ................. 0.1
    }<br>
 * <br>
 *     <b>Example</b><br>
 *     {@code 
    ActiveForceLengthCurve falCurve1(0.44, 0.73, 1.8, 0.86, 0.1);
    double falVal  = falCurve1.calcValue(1.0);
    double dfalVal = falCurve1.calcDerivative(1.0, 1);
    }<br>
 * <br>
 *     Note that this object should be updated through the set methods provided.<br>
 *     These set methods will take care of rebuilding the curve correctly. If you<br>
 *     modify the properties directly, the curve will not be rebuilt, and upon<br>
 *     calling a function like calcValue, calcDerivative, or printCurveToCSVFile,<br>
 *     an exception will be thrown because the curve is out-of-date with its<br>
 *     properties.<br>
 * <br>
 *     <b>References</b><br>
 *     <li>Gollapudi, S.K., Lin, D.C. (2009) Experimental determination of<br>
 *         sarcomere force-length relationship in type-I human skeletal muscle<br>
 *         fibers. Journal of Biomechanics 42(13), 2011--2016.<br>
 *</li>     <li>Nigg, B.M., Herzog, W. Biomechanics of the Musculo-skeletal System.<br>
 *         Wiley, 1994.</li><br>
 * <br>
 *     @author Matt Millard
 */
public class ActiveForceLengthCurve extends Function {
  private transient long swigCPtr;

  public ActiveForceLengthCurve(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ActiveForceLengthCurve_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ActiveForceLengthCurve obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ActiveForceLengthCurve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ActiveForceLengthCurve safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ActiveForceLengthCurve_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ActiveForceLengthCurve(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ActiveForceLengthCurve_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ActiveForceLengthCurve_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ActiveForceLengthCurve(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_min_norm_active_fiber_length(ActiveForceLengthCurve source) {
    opensimSimulationJNI.ActiveForceLengthCurve_copyProperty_min_norm_active_fiber_length(swigCPtr, this, ActiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_min_norm_active_fiber_length(int i) {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_min_norm_active_fiber_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_min_norm_active_fiber_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_min_norm_active_fiber_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_min_norm_active_fiber_length(int i, double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_min_norm_active_fiber_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_min_norm_active_fiber_length(double value) {
    return opensimSimulationJNI.ActiveForceLengthCurve_append_min_norm_active_fiber_length(swigCPtr, this, value);
  }

  public void constructProperty_min_norm_active_fiber_length(double initValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_constructProperty_min_norm_active_fiber_length(swigCPtr, this, initValue);
  }

  public double get_min_norm_active_fiber_length() {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_min_norm_active_fiber_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_min_norm_active_fiber_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_min_norm_active_fiber_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_min_norm_active_fiber_length(double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_min_norm_active_fiber_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_transition_norm_fiber_length(ActiveForceLengthCurve source) {
    opensimSimulationJNI.ActiveForceLengthCurve_copyProperty_transition_norm_fiber_length(swigCPtr, this, ActiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_transition_norm_fiber_length(int i) {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_transition_norm_fiber_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_transition_norm_fiber_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_transition_norm_fiber_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_transition_norm_fiber_length(int i, double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_transition_norm_fiber_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_transition_norm_fiber_length(double value) {
    return opensimSimulationJNI.ActiveForceLengthCurve_append_transition_norm_fiber_length(swigCPtr, this, value);
  }

  public void constructProperty_transition_norm_fiber_length(double initValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_constructProperty_transition_norm_fiber_length(swigCPtr, this, initValue);
  }

  public double get_transition_norm_fiber_length() {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_transition_norm_fiber_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_transition_norm_fiber_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_transition_norm_fiber_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_transition_norm_fiber_length(double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_transition_norm_fiber_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_max_norm_active_fiber_length(ActiveForceLengthCurve source) {
    opensimSimulationJNI.ActiveForceLengthCurve_copyProperty_max_norm_active_fiber_length(swigCPtr, this, ActiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_max_norm_active_fiber_length(int i) {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_max_norm_active_fiber_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_max_norm_active_fiber_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_max_norm_active_fiber_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_max_norm_active_fiber_length(int i, double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_max_norm_active_fiber_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_max_norm_active_fiber_length(double value) {
    return opensimSimulationJNI.ActiveForceLengthCurve_append_max_norm_active_fiber_length(swigCPtr, this, value);
  }

  public void constructProperty_max_norm_active_fiber_length(double initValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_constructProperty_max_norm_active_fiber_length(swigCPtr, this, initValue);
  }

  public double get_max_norm_active_fiber_length() {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_max_norm_active_fiber_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_max_norm_active_fiber_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_max_norm_active_fiber_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_max_norm_active_fiber_length(double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_max_norm_active_fiber_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_shallow_ascending_slope(ActiveForceLengthCurve source) {
    opensimSimulationJNI.ActiveForceLengthCurve_copyProperty_shallow_ascending_slope(swigCPtr, this, ActiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_shallow_ascending_slope(int i) {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_shallow_ascending_slope__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_shallow_ascending_slope(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_shallow_ascending_slope__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_shallow_ascending_slope(int i, double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_shallow_ascending_slope__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_shallow_ascending_slope(double value) {
    return opensimSimulationJNI.ActiveForceLengthCurve_append_shallow_ascending_slope(swigCPtr, this, value);
  }

  public void constructProperty_shallow_ascending_slope(double initValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_constructProperty_shallow_ascending_slope(swigCPtr, this, initValue);
  }

  public double get_shallow_ascending_slope() {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_shallow_ascending_slope__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_shallow_ascending_slope() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_shallow_ascending_slope__SWIG_1(swigCPtr, this), false);
  }

  public void set_shallow_ascending_slope(double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_shallow_ascending_slope__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimum_value(ActiveForceLengthCurve source) {
    opensimSimulationJNI.ActiveForceLengthCurve_copyProperty_minimum_value(swigCPtr, this, ActiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_minimum_value(int i) {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_minimum_value__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_minimum_value(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_minimum_value__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimum_value(int i, double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_minimum_value__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimum_value(double value) {
    return opensimSimulationJNI.ActiveForceLengthCurve_append_minimum_value(swigCPtr, this, value);
  }

  public void constructProperty_minimum_value(double initValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_constructProperty_minimum_value(swigCPtr, this, initValue);
  }

  public double get_minimum_value() {
    return opensimSimulationJNI.ActiveForceLengthCurve_get_minimum_value__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_minimum_value() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActiveForceLengthCurve_upd_minimum_value__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimum_value(double value) {
    opensimSimulationJNI.ActiveForceLengthCurve_set_minimum_value__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  The default constructor creates an active-force-length curve using the<br>
   *     default property values and assigns a default name. 
   */
  public ActiveForceLengthCurve() {
    this(opensimSimulationJNI.new_ActiveForceLengthCurve__SWIG_0(), true);
  }

  /**
   *  Constructs an active-force-length curve using the provided parameters<br>
   *     and assigns a default name. 
   */
  public ActiveForceLengthCurve(double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope, double minimumValue) {
    this(opensimSimulationJNI.new_ActiveForceLengthCurve__SWIG_1(minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope, minimumValue), true);
  }

  /**
   *  @return The normalized fiber length where the steep ascending limb of<br>
   *     the active-force-length curve transitions to the minimum activation value<br>
   *     and simultaneously achieves a first and second derivative of 0. 
   */
  public double getMinActiveFiberLength() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getMinActiveFiberLength(swigCPtr, this);
  }

  /**
   *  @return The normalized fiber length where the steep ascending limb<br>
   *     of the active-force-length curve transitions to the shallow ascending limb.
   */
  public double getTransitionFiberLength() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getTransitionFiberLength(swigCPtr, this);
  }

  /**
   *  @return The normalized fiber length where the descending limb of the<br>
   *     active-force-length curve transitions to the minimum activation value and<br>
   *     simultaneously achieves first and second derivatives of 0. 
   */
  public double getMaxActiveFiberLength() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getMaxActiveFiberLength(swigCPtr, this);
  }

  /**
   *  @return The slope of the shallow ascending limb<br>
   *     (d active_force_length / d normalized_fiber_length). 
   */
  public double getShallowAscendingSlope() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getShallowAscendingSlope(swigCPtr, this);
  }

  /**
   *  @return The minimum active-force-length value permitted in the<br>
   *     simulation. This value must be non-zero for an equilibrium model. 
   */
  public double getMinValue() {
    return opensimSimulationJNI.ActiveForceLengthCurve_getMinValue(swigCPtr, this);
  }

  /**
   *     @param minActiveNormFiberLength<br>
   *         The normalized fiber length where the steep ascending limb of the<br>
   *         active-force-length curve transitions to the minimum value and has first<br>
   *         and second derivatives of 0.<br>
   *     @param transitionNormFiberLength<br>
   *         The normalized fiber length where the steep ascending limb transitions<br>
   *         to the shallow ascending limb.<br>
   *     @param maxActiveNormFiberLength<br>
   *         The normalized fiber length where the descending limb transitions to the<br>
   *         minimum value and has first and second derivatives of 0.<br>
   *     @param shallowAscendingSlope<br>
   *         The slope of the shallow ascending limb.<br>
   * <br>
   *     <b>Conditions</b><br>
   *     {@literal 
      0 < minActiveNormFiberLength < transitionNormFiberLength < 1 < maxActiveNormFiberLength
      0 <= shallowAscendingSlope < 1/(1-transitionNormFiberLength)
      }
   */
  public void setActiveFiberLengths(double minActiveNormFiberLength, double transitionNormFiberLength, double maxActiveNormFiberLength, double shallowAscendingSlope) {
    opensimSimulationJNI.ActiveForceLengthCurve_setActiveFiberLengths(swigCPtr, this, minActiveNormFiberLength, transitionNormFiberLength, maxActiveNormFiberLength, shallowAscendingSlope);
  }

  /**
   *     @param minimumValue<br>
   *         The minimum value of the active-force-length curve. If you are using an<br>
   *         equilibrium model, this value must be greater than 0, as a value of 0<br>
   *         will cause a singularity in the muscle dynamic equations.
   */
  public void setMinValue(double minimumValue) {
    opensimSimulationJNI.ActiveForceLengthCurve_setMinValue(swigCPtr, this, minimumValue);
  }

  /**
   *  Implement the generic OpenSim::Function interface *
   */
  public double calcValue(Vector x) {
    return opensimSimulationJNI.ActiveForceLengthCurve_calcValue__SWIG_0(swigCPtr, this, Vector.getCPtr(x), x);
  }

  /**
   *  Evaluates the active-force-length curve at a normalized fiber length of<br>
   *     'normFiberLength'. 
   */
  public double calcValue(double normFiberLength) {
    return opensimSimulationJNI.ActiveForceLengthCurve_calcValue__SWIG_1(swigCPtr, this, normFiberLength);
  }

  /**
   *  Calculates the derivative of the active-force-length multiplier with<br>
   *     respect to the normalized fiber length.<br>
   *     @param normFiberLength<br>
   *         The normalized length of the muscle fiber.<br>
   *     @param order<br>
   *         The order of the derivative. Only values of 0, 1, and 2 are acceptable.<br>
   *     @return <br>
   *         The derivative of the active-force-length curve with respect to the<br>
   *         normalized fiber length.
   */
  public double calcDerivative(double normFiberLength, int order) {
    return opensimSimulationJNI.ActiveForceLengthCurve_calcDerivative__SWIG_0(swigCPtr, this, normFiberLength, order);
  }

  /**
   *  If possible, use the simpler overload above.
   */
  public double calcDerivative(StdVectorInt derivComponents, Vector x) {
    return opensimSimulationJNI.ActiveForceLengthCurve_calcDerivative__SWIG_1(swigCPtr, this, StdVectorInt.getCPtr(derivComponents), derivComponents, Vector.getCPtr(x), x);
  }

  /**
   *  Returns a SimTK::Vec2 containing the lower (0th element) and upper (1st<br>
   *     element) bounds on the domain of the curve. Outside this domain, the curve<br>
   *     is approximated using linear extrapolation.<br>
   *     @return <br>
   *         The minimum and maximum value of the domain, x, of the curve y(x).<br>
   *         Within this range, y(x) is a curve; outside this range, the function<br>
   *         y(x) is a C2-continuous linear extrapolation.
   */
  public Vec2 getCurveDomain() {
    return new Vec2(opensimSimulationJNI.ActiveForceLengthCurve_getCurveDomain(swigCPtr, this), true);
  }

  /**
   *  Generates a .csv file with a name that matches the curve name (e.g.,<br>
   *     "bicepsfemoris_ActiveForceLengthCurve.csv"). This function is not const to<br>
   *     permit the curve to be rebuilt if it is out-of-date with its properties.<br>
   *     @param path<br>
   *         The full destination path. Note that forward slashes ('/') must be used<br>
   *         and there should not be a slash after the last folder.<br>
   * <br>
   *     The file will contain the following data:<br>
   *     {@literal 
      column: 1 | 2 |     3 |       4
        data: x | y | dy/dx | d2y/dx2
      }<br>
   * <br>
   *     Samples will be taken from the linear extrapolation region (the region less<br>
   *     than minActiveNormFiberLength), through the curve, out to the other linear<br>
   *     extrapolation region (the region greater than maxActiveNormFiberLength). The<br>
   *     width of each linear extrapolation region is 10% of the curve domain, or<br>
   *     0.1*(maxActiveNormFiberLength-minActiveNormFiberLength). The curve is<br>
   *     sampled quite densely: the active-force-length .csv file will have 500+20<br>
   *     rows.<br>
   * <br>
   *     <b>Example</b><br>
   *     To read the .csv file into Matlab, you need to set csvread to ignore the<br>
   *     header row. Since csvread is 0-indexed, the following example will begin<br>
   *     reading the .csv file from the first column of the second row:<br>
   *     {@literal 
      data = csvread('bicepsfemoris_ActiveForceLengthCurve.csv', 1, 0);
      }
   */
  public void printMuscleCurveToCSVFile(String path) {
    opensimSimulationJNI.ActiveForceLengthCurve_printMuscleCurveToCSVFile(swigCPtr, this, path);
  }

  public void ensureCurveUpToDate() {
    opensimSimulationJNI.ActiveForceLengthCurve_ensureCurveUpToDate(swigCPtr, this);
  }

}
