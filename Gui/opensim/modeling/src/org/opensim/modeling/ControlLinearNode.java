/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A control node used to reconstruct a piecewise linear control.<br>
 * <br>
 * The member variables consist of a time, a value, a minimum value, and<br>
 * a maximum value.  So that an Array&lt;T&gt; can be instantiated for<br>
 * ControlLinearNode, this class implements a default constructor, a copy<br>
 * constructor, the assignment operator (=), the equality operator (==),<br>
 * and the less than operator (&lt;).  The time at which a control node<br>
 * occurs is used to determine the results of the operators == and &lt;.<br>
 * <br>
 * @author Frank C. Anderson<br>
 * @version 1.0<br>
 * @see ControlLinear
 */
public class ControlLinearNode extends OpenSimObject {
  private transient long swigCPtr;

  public ControlLinearNode(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ControlLinearNode_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ControlLinearNode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ControlLinearNode(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ControlLinearNode safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ControlLinearNode_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ControlLinearNode(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ControlLinearNode_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ControlLinearNode_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ControlLinearNode_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ControlLinearNode(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ControlLinearNode_getConcreteClassName(swigCPtr, this);
  }

  public ControlLinearNode(double aT, double aValue) {
    this(opensimSimulationJNI.new_ControlLinearNode__SWIG_0(aT, aValue), true);
  }

  public ControlLinearNode(double aT) {
    this(opensimSimulationJNI.new_ControlLinearNode__SWIG_1(aT), true);
  }

  public ControlLinearNode() {
    this(opensimSimulationJNI.new_ControlLinearNode__SWIG_2(), true);
  }

  public ControlLinearNode(ControlLinearNode aNode) {
    this(opensimSimulationJNI.new_ControlLinearNode__SWIG_3(ControlLinearNode.getCPtr(aNode), aNode), true);
  }

  public void setTime(double aT) {
    opensimSimulationJNI.ControlLinearNode_setTime(swigCPtr, this, aT);
  }

  public double getTime() {
    return opensimSimulationJNI.ControlLinearNode_getTime(swigCPtr, this);
  }

  public void setValue(double aValue) {
    opensimSimulationJNI.ControlLinearNode_setValue(swigCPtr, this, aValue);
  }

  public double getValue() {
    return opensimSimulationJNI.ControlLinearNode_getValue(swigCPtr, this);
  }

  public String toString() {
    return opensimSimulationJNI.ControlLinearNode_toString(swigCPtr, this);
  }

}
