/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Millard2012EquilibriumMuscle extends Muscle {
  private transient long swigCPtr;

  protected Millard2012EquilibriumMuscle(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Millard2012EquilibriumMuscle_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Millard2012EquilibriumMuscle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Millard2012EquilibriumMuscle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Millard2012EquilibriumMuscle safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Millard2012EquilibriumMuscle_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Millard2012EquilibriumMuscle(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Millard2012EquilibriumMuscle_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Millard2012EquilibriumMuscle(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_fiber_damping(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_fiber_damping(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_fiber_damping(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_fiber_damping__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_fiber_damping(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_fiber_damping__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_fiber_damping(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_fiber_damping__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_fiber_damping(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_fiber_damping(swigCPtr, this, value);
  }

  public void constructProperty_fiber_damping(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_fiber_damping(swigCPtr, this, initValue);
  }

  public double get_fiber_damping() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_fiber_damping__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_fiber_damping() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_fiber_damping__SWIG_1(swigCPtr, this), false);
  }

  public void set_fiber_damping(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_fiber_damping__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_default_activation(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_default_activation(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_default_activation(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_default_activation__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_default_activation(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_default_activation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_default_activation(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_default_activation__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_default_activation(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_default_activation(swigCPtr, this, value);
  }

  public void constructProperty_default_activation(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_default_activation(swigCPtr, this, initValue);
  }

  public double get_default_activation() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_default_activation__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_default_activation() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_default_activation__SWIG_1(swigCPtr, this), false);
  }

  public void set_default_activation(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_default_activation__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_default_fiber_length(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_default_fiber_length(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_default_fiber_length(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_default_fiber_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_default_fiber_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_default_fiber_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_default_fiber_length(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_default_fiber_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_default_fiber_length(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_default_fiber_length(swigCPtr, this, value);
  }

  public void constructProperty_default_fiber_length(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_default_fiber_length(swigCPtr, this, initValue);
  }

  public double get_default_fiber_length() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_default_fiber_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_default_fiber_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_default_fiber_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_default_fiber_length(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_default_fiber_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_activation_time_constant(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_activation_time_constant(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_activation_time_constant(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_activation_time_constant__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_activation_time_constant(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_activation_time_constant__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_activation_time_constant(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_activation_time_constant__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_activation_time_constant(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_activation_time_constant(swigCPtr, this, value);
  }

  public void constructProperty_activation_time_constant(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_activation_time_constant(swigCPtr, this, initValue);
  }

  public double get_activation_time_constant() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_activation_time_constant__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_activation_time_constant() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_activation_time_constant__SWIG_1(swigCPtr, this), false);
  }

  public void set_activation_time_constant(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_activation_time_constant__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_deactivation_time_constant(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_deactivation_time_constant(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_deactivation_time_constant(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_deactivation_time_constant__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_deactivation_time_constant(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_deactivation_time_constant__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_deactivation_time_constant(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_deactivation_time_constant__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_deactivation_time_constant(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_deactivation_time_constant(swigCPtr, this, value);
  }

  public void constructProperty_deactivation_time_constant(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_deactivation_time_constant(swigCPtr, this, initValue);
  }

  public double get_deactivation_time_constant() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_deactivation_time_constant__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_deactivation_time_constant() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_deactivation_time_constant__SWIG_1(swigCPtr, this), false);
  }

  public void set_deactivation_time_constant(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_deactivation_time_constant__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimum_activation(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_minimum_activation(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_minimum_activation(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_minimum_activation__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_minimum_activation(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_minimum_activation__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimum_activation(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_minimum_activation__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimum_activation(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_minimum_activation(swigCPtr, this, value);
  }

  public void constructProperty_minimum_activation(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_minimum_activation(swigCPtr, this, initValue);
  }

  public double get_minimum_activation() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_minimum_activation__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_minimum_activation() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_minimum_activation__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimum_activation(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_minimum_activation__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_maximum_pennation_angle(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_maximum_pennation_angle(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public double get_maximum_pennation_angle(int i) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_maximum_pennation_angle__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_maximum_pennation_angle(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_maximum_pennation_angle__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_maximum_pennation_angle(int i, double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_maximum_pennation_angle__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_maximum_pennation_angle(double value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_maximum_pennation_angle(swigCPtr, this, value);
  }

  public void constructProperty_maximum_pennation_angle(double initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_maximum_pennation_angle(swigCPtr, this, initValue);
  }

  public double get_maximum_pennation_angle() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_get_maximum_pennation_angle__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_maximum_pennation_angle() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_maximum_pennation_angle__SWIG_1(swigCPtr, this), false);
  }

  public void set_maximum_pennation_angle(double value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_maximum_pennation_angle__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_ActiveForceLengthCurve(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_ActiveForceLengthCurve(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public ActiveForceLengthCurve get_ActiveForceLengthCurve(int i) {
    return new ActiveForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_ActiveForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public ActiveForceLengthCurve upd_ActiveForceLengthCurve(int i) {
    return new ActiveForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_ActiveForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_ActiveForceLengthCurve(int i, ActiveForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_ActiveForceLengthCurve__SWIG_0(swigCPtr, this, i, ActiveForceLengthCurve.getCPtr(value), value);
  }

  public int append_ActiveForceLengthCurve(ActiveForceLengthCurve value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_ActiveForceLengthCurve(swigCPtr, this, ActiveForceLengthCurve.getCPtr(value), value);
  }

  public void constructProperty_ActiveForceLengthCurve(ActiveForceLengthCurve initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_ActiveForceLengthCurve(swigCPtr, this, ActiveForceLengthCurve.getCPtr(initValue), initValue);
  }

  public ActiveForceLengthCurve get_ActiveForceLengthCurve() {
    return new ActiveForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_ActiveForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public ActiveForceLengthCurve upd_ActiveForceLengthCurve() {
    return new ActiveForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_ActiveForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public void set_ActiveForceLengthCurve(ActiveForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_ActiveForceLengthCurve__SWIG_1(swigCPtr, this, ActiveForceLengthCurve.getCPtr(value), value);
  }

  public void copyProperty_ForceVelocityCurve(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_ForceVelocityCurve(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public ForceVelocityCurve get_ForceVelocityCurve(int i) {
    return new ForceVelocityCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_ForceVelocityCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public ForceVelocityCurve upd_ForceVelocityCurve(int i) {
    return new ForceVelocityCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_ForceVelocityCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_ForceVelocityCurve(int i, ForceVelocityCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_ForceVelocityCurve__SWIG_0(swigCPtr, this, i, ForceVelocityCurve.getCPtr(value), value);
  }

  public int append_ForceVelocityCurve(ForceVelocityCurve value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_ForceVelocityCurve(swigCPtr, this, ForceVelocityCurve.getCPtr(value), value);
  }

  public void constructProperty_ForceVelocityCurve(ForceVelocityCurve initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_ForceVelocityCurve(swigCPtr, this, ForceVelocityCurve.getCPtr(initValue), initValue);
  }

  public ForceVelocityCurve get_ForceVelocityCurve() {
    return new ForceVelocityCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_ForceVelocityCurve__SWIG_1(swigCPtr, this), false);
  }

  public ForceVelocityCurve upd_ForceVelocityCurve() {
    return new ForceVelocityCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_ForceVelocityCurve__SWIG_1(swigCPtr, this), false);
  }

  public void set_ForceVelocityCurve(ForceVelocityCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_ForceVelocityCurve__SWIG_1(swigCPtr, this, ForceVelocityCurve.getCPtr(value), value);
  }

  public void copyProperty_FiberForceLengthCurve(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_FiberForceLengthCurve(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public FiberForceLengthCurve get_FiberForceLengthCurve(int i) {
    return new FiberForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_FiberForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public FiberForceLengthCurve upd_FiberForceLengthCurve(int i) {
    return new FiberForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_FiberForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_FiberForceLengthCurve(int i, FiberForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_FiberForceLengthCurve__SWIG_0(swigCPtr, this, i, FiberForceLengthCurve.getCPtr(value), value);
  }

  public int append_FiberForceLengthCurve(FiberForceLengthCurve value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_FiberForceLengthCurve(swigCPtr, this, FiberForceLengthCurve.getCPtr(value), value);
  }

  public void constructProperty_FiberForceLengthCurve(FiberForceLengthCurve initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_FiberForceLengthCurve(swigCPtr, this, FiberForceLengthCurve.getCPtr(initValue), initValue);
  }

  public FiberForceLengthCurve get_FiberForceLengthCurve() {
    return new FiberForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_FiberForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public FiberForceLengthCurve upd_FiberForceLengthCurve() {
    return new FiberForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_FiberForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public void set_FiberForceLengthCurve(FiberForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_FiberForceLengthCurve__SWIG_1(swigCPtr, this, FiberForceLengthCurve.getCPtr(value), value);
  }

  public void copyProperty_TendonForceLengthCurve(Millard2012EquilibriumMuscle source) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_copyProperty_TendonForceLengthCurve(swigCPtr, this, Millard2012EquilibriumMuscle.getCPtr(source), source);
  }

  public TendonForceLengthCurve get_TendonForceLengthCurve(int i) {
    return new TendonForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_TendonForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public TendonForceLengthCurve upd_TendonForceLengthCurve(int i) {
    return new TendonForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_TendonForceLengthCurve__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_TendonForceLengthCurve(int i, TendonForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_TendonForceLengthCurve__SWIG_0(swigCPtr, this, i, TendonForceLengthCurve.getCPtr(value), value);
  }

  public int append_TendonForceLengthCurve(TendonForceLengthCurve value) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_append_TendonForceLengthCurve(swigCPtr, this, TendonForceLengthCurve.getCPtr(value), value);
  }

  public void constructProperty_TendonForceLengthCurve(TendonForceLengthCurve initValue) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_constructProperty_TendonForceLengthCurve(swigCPtr, this, TendonForceLengthCurve.getCPtr(initValue), initValue);
  }

  public TendonForceLengthCurve get_TendonForceLengthCurve() {
    return new TendonForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_get_TendonForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public TendonForceLengthCurve upd_TendonForceLengthCurve() {
    return new TendonForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_upd_TendonForceLengthCurve__SWIG_1(swigCPtr, this), false);
  }

  public void set_TendonForceLengthCurve(TendonForceLengthCurve value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_set_TendonForceLengthCurve__SWIG_1(swigCPtr, this, TendonForceLengthCurve.getCPtr(value), value);
  }

  public void set_has_output_passive_fiber_elastic_force(boolean value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_set(swigCPtr, this, value);
  }

  public boolean get_has_output_passive_fiber_elastic_force() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_get(swigCPtr, this);
  }

  public void set_has_output_passive_fiber_elastic_force_along_tendon(boolean value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_set(swigCPtr, this, value);
  }

  public boolean get_has_output_passive_fiber_elastic_force_along_tendon() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_elastic_force_along_tendon_get(swigCPtr, this);
  }

  public void set_has_output_passive_fiber_damping_force(boolean value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_set(swigCPtr, this, value);
  }

  public boolean get_has_output_passive_fiber_damping_force() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_get(swigCPtr, this);
  }

  public void set_has_output_passive_fiber_damping_force_along_tendon(boolean value) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_set(swigCPtr, this, value);
  }

  public boolean get_has_output_passive_fiber_damping_force_along_tendon() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle__has_output_passive_fiber_damping_force_along_tendon_get(swigCPtr, this);
  }

  public Millard2012EquilibriumMuscle() {
    this(opensimSimulationJNI.new_Millard2012EquilibriumMuscle__SWIG_0(), true);
  }

  public Millard2012EquilibriumMuscle(String aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) {
    this(opensimSimulationJNI.new_Millard2012EquilibriumMuscle__SWIG_1(aName, aMaxIsometricForce, aOptimalFiberLength, aTendonSlackLength, aPennationAngle), true);
  }

  public boolean getUseFiberDamping() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getUseFiberDamping(swigCPtr, this);
  }

  public double getFiberDamping() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getFiberDamping(swigCPtr, this);
  }

  public double getDefaultActivation() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getDefaultActivation(swigCPtr, this);
  }

  public double getDefaultFiberLength() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getDefaultFiberLength(swigCPtr, this);
  }

  public double getActivationTimeConstant() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getActivationTimeConstant(swigCPtr, this);
  }

  public double getDeactivationTimeConstant() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getDeactivationTimeConstant(swigCPtr, this);
  }

  public double getMinimumActivation() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getMinimumActivation(swigCPtr, this);
  }

  public ActiveForceLengthCurve getActiveForceLengthCurve() {
    return new ActiveForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_getActiveForceLengthCurve(swigCPtr, this), false);
  }

  public ForceVelocityCurve getForceVelocityCurve() {
    return new ForceVelocityCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_getForceVelocityCurve(swigCPtr, this), false);
  }

  public FiberForceLengthCurve getFiberForceLengthCurve() {
    return new FiberForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_getFiberForceLengthCurve(swigCPtr, this), false);
  }

  public TendonForceLengthCurve getTendonForceLengthCurve() {
    return new TendonForceLengthCurve(opensimSimulationJNI.Millard2012EquilibriumMuscle_getTendonForceLengthCurve(swigCPtr, this), false);
  }

  public MuscleFixedWidthPennationModel getPennationModel() {
    return new MuscleFixedWidthPennationModel(opensimSimulationJNI.Millard2012EquilibriumMuscle_getPennationModel(swigCPtr, this), false);
  }

  public MuscleFirstOrderActivationDynamicModel getActivationModel() {
    return new MuscleFirstOrderActivationDynamicModel(opensimSimulationJNI.Millard2012EquilibriumMuscle_getActivationModel(swigCPtr, this), false);
  }

  public double getMinimumFiberLength() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getMinimumFiberLength(swigCPtr, this);
  }

  public double getMinimumFiberLengthAlongTendon() {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getMinimumFiberLengthAlongTendon(swigCPtr, this);
  }

  public double getTendonForceMultiplier(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getTendonForceMultiplier(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getFiberStiffnessAlongTendon(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getFiberStiffnessAlongTendon(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getFiberVelocity(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getFiberVelocity(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getActivationDerivative(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getActivationDerivative(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getPassiveFiberElasticForce(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getPassiveFiberElasticForce(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getPassiveFiberElasticForceAlongTendon(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getPassiveFiberElasticForceAlongTendon(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getPassiveFiberDampingForce(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getPassiveFiberDampingForce(swigCPtr, this, State.getCPtr(s), s);
  }

  public double getPassiveFiberDampingForceAlongTendon(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_getPassiveFiberDampingForceAlongTendon(swigCPtr, this, State.getCPtr(s), s);
  }

  public void setMuscleConfiguration(boolean ignoreTendonCompliance, boolean ignoreActivationDynamics, double dampingCoefficient) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setMuscleConfiguration(swigCPtr, this, ignoreTendonCompliance, ignoreActivationDynamics, dampingCoefficient);
  }

  public void setFiberDamping(double dampingCoefficient) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setFiberDamping(swigCPtr, this, dampingCoefficient);
  }

  public void setDefaultActivation(double activation) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setDefaultActivation(swigCPtr, this, activation);
  }

  public void setActivation(State s, double activation) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setActivation(swigCPtr, this, State.getCPtr(s), s, activation);
  }

  public void setDefaultFiberLength(double fiberLength) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setDefaultFiberLength(swigCPtr, this, fiberLength);
  }

  public void setActivationTimeConstant(double activationTimeConstant) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setActivationTimeConstant(swigCPtr, this, activationTimeConstant);
  }

  public void setDeactivationTimeConstant(double deactivationTimeConstant) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setDeactivationTimeConstant(swigCPtr, this, deactivationTimeConstant);
  }

  public void setMinimumActivation(double minimumActivation) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setMinimumActivation(swigCPtr, this, minimumActivation);
  }

  public void setActiveForceLengthCurve(ActiveForceLengthCurve aActiveForceLengthCurve) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setActiveForceLengthCurve(swigCPtr, this, ActiveForceLengthCurve.getCPtr(aActiveForceLengthCurve), aActiveForceLengthCurve);
  }

  public void setForceVelocityCurve(ForceVelocityCurve aForceVelocityCurve) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setForceVelocityCurve(swigCPtr, this, ForceVelocityCurve.getCPtr(aForceVelocityCurve), aForceVelocityCurve);
  }

  public void setFiberForceLengthCurve(FiberForceLengthCurve aFiberForceLengthCurve) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setFiberForceLengthCurve(swigCPtr, this, FiberForceLengthCurve.getCPtr(aFiberForceLengthCurve), aFiberForceLengthCurve);
  }

  public void setTendonForceLengthCurve(TendonForceLengthCurve aTendonForceLengthCurve) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setTendonForceLengthCurve(swigCPtr, this, TendonForceLengthCurve.getCPtr(aTendonForceLengthCurve), aTendonForceLengthCurve);
  }

  public void setFiberLength(State s, double fiberLength) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_setFiberLength(swigCPtr, this, State.getCPtr(s), s, fiberLength);
  }

  public double computeActuation(State s) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_computeActuation(swigCPtr, this, State.getCPtr(s), s);
  }

  public void computeInitialFiberEquilibrium(State s) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_computeInitialFiberEquilibrium(swigCPtr, this, State.getCPtr(s), s);
  }

  public void computeFiberEquilibrium(State s, boolean solveForVelocity) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_computeFiberEquilibrium__SWIG_0(swigCPtr, this, State.getCPtr(s), s, solveForVelocity);
  }

  public void computeFiberEquilibrium(State s) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_computeFiberEquilibrium__SWIG_1(swigCPtr, this, State.getCPtr(s), s);
  }

  public double calcActiveFiberForceAlongTendon(double activation, double fiberLength, double fiberVelocity) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_calcActiveFiberForceAlongTendon(swigCPtr, this, activation, fiberLength, fiberVelocity);
  }

  public Vec4 calcFiberStateGivenBoundaryCond(double lengthMT, double velocityMT, double tendonForce, double dTendonForceDT) {
    return new Vec4(opensimSimulationJNI.Millard2012EquilibriumMuscle_calcFiberStateGivenBoundaryCond(swigCPtr, this, lengthMT, velocityMT, tendonForce, dTendonForceDT), true);
  }

  public double calcInextensibleTendonActiveFiberForce(State s, double aActivation) {
    return opensimSimulationJNI.Millard2012EquilibriumMuscle_calcInextensibleTendonActiveFiberForce(swigCPtr, this, State.getCPtr(s), s, aActivation);
  }

  public void extendPostScale(State s, ScaleSet scaleSet) {
    opensimSimulationJNI.Millard2012EquilibriumMuscle_extendPostScale(swigCPtr, this, State.getCPtr(s), s, ScaleSet.getCPtr(scaleSet), scaleSet);
  }

}
