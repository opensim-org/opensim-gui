/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This path constraint enforces that the distance between the origins of pairs<br>
 * of model frames is kept between minimum and maximum bounds. Frame pairs and<br>
 * their bounds are specified via a MocoFrameDistancConstraintPair.<br>
 * Any model component derived from Frame is valid to be included in a frame<br>
 * pair, and any number of frame pairs may be append to this constraint via<br>
 * addFramePair().<br>
 * <br>
 * This constraint can be used as a simple method for preventing bodies in your<br>
 * model from intersecting during an optimization. For example, the<br>
 * following prevents feet from intersecting during a walking optimization:<br>
 * {@code 
distance = problem.addPathConstraint<MocoFrameDistanceConstraint>();
distance.setName("minimum_distance");
SimTK::Real inf = SimTK::Infinity;
distance.addFramePair('/bodyset/calcn_l', '/bodyset/calcn_r', 0.1, inf);
distance.addFramePair('/bodyset/toes_l', '/bodyset/toes_r', 0.1, inf);
distance.addFramePair('/bodyset/calcn_l', '/bodyset/toes_r', 0.1, inf);
distance.addFramePair('/bodyset/toes_l', '/bodyset/calcn_r', 0.1, inf);
}<br>
 * <br>
 * To project the frame distance onto a vector or plane before ensuring its<br>
 * within the provided bounds, use setProjection() and setProjectionVector().<br>
 * <br>
 * Note: This class represents a path constraint, *not* a model kinematic<br>
 * constraint. Therefore, there are no Lagrange multipliers or constraint<br>
 * forces associated with this constraint. The model's force elements<br>
 * (including actuators) must generate the forces necessary for satisfying this<br>
 * constraint.<br>
 * <br>
 * 
 */
public class MocoFrameDistanceConstraint extends MocoPathConstraint {
  private transient long swigCPtr;

  public MocoFrameDistanceConstraint(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoFrameDistanceConstraint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoFrameDistanceConstraint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoFrameDistanceConstraint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoFrameDistanceConstraint safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoFrameDistanceConstraint_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoFrameDistanceConstraint(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoFrameDistanceConstraint_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoFrameDistanceConstraint_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoFrameDistanceConstraint_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoFrameDistanceConstraint(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoFrameDistanceConstraint_getConcreteClassName(swigCPtr, this);
  }

  public MocoFrameDistanceConstraint() {
    this(opensimMocoJNI.new_MocoFrameDistanceConstraint(), true);
  }

  public void addFramePair(MocoFrameDistanceConstraintPair pair) {
    opensimMocoJNI.MocoFrameDistanceConstraint_addFramePair__SWIG_0(swigCPtr, this, MocoFrameDistanceConstraintPair.getCPtr(pair), pair);
  }

  public void addFramePair(String frame1_path, String frame2_path, double minimum_distance, double maximum_distance) {
    opensimMocoJNI.MocoFrameDistanceConstraint_addFramePair__SWIG_1(swigCPtr, this, frame1_path, frame2_path, minimum_distance, maximum_distance);
  }

  /**
   *  Set if each distance should be projected onto either a vector or<br>
   *  plane. Possible values: "none" (default), "vector", and "plane".
   */
  public void setProjection(String projection) {
    opensimMocoJNI.MocoFrameDistanceConstraint_setProjection(swigCPtr, this, projection);
  }

  public String getProjection() {
    return opensimMocoJNI.MocoFrameDistanceConstraint_getProjection(swigCPtr, this);
  }

  /**
   *  Set the vector to use for projecting each distance.<br>
   *  If the projection type is "vector", the distance is projected onto<br>
   *  the vector provided here. If the projection type is "plane", the<br>
   *  distance is projected onto the plane perpendicular to this vector.
   */
  public void setProjectionVector(Vec3 vector) {
    opensimMocoJNI.MocoFrameDistanceConstraint_setProjectionVector(swigCPtr, this, Vec3.getCPtr(vector), vector);
  }

  /**
   *  Unset the projection vector.
   */
  public void clearProjectionVector() {
    opensimMocoJNI.MocoFrameDistanceConstraint_clearProjectionVector(swigCPtr, this);
  }

  public Vec3 getProjectionVector() {
    return new Vec3(opensimMocoJNI.MocoFrameDistanceConstraint_getProjectionVector(swigCPtr, this), true);
  }

}
