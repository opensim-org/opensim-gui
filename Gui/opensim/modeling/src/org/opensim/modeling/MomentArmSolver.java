/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * Solve for the effective moment arms at all degrees-of-freedom due to one or<br>
 * more point forces.  This may result from the underlying geometry of a Force <br>
 * or Actuator with a complex path (like ligaments and muscles) but this solver<br>
 * is only concerned with the set of points and unit forces that maps a scalar<br>
 * force value (like tension) to the resulting generalized force.<br>
 * <br>
 * @author Ajay Seth<br>
 * @version 1.0
 */
public class MomentArmSolver extends Solver {
  private transient long swigCPtr;

  public MomentArmSolver(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.MomentArmSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MomentArmSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_MomentArmSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MomentArmSolver safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.MomentArmSolver_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MomentArmSolver(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.MomentArmSolver_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.MomentArmSolver_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.MomentArmSolver_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MomentArmSolver(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.MomentArmSolver_getConcreteClassName(swigCPtr, this);
  }

  public MomentArmSolver(Model model) {
    this(opensimSimulationJNI.new_MomentArmSolver(Model.getCPtr(model), model), true);
  }

  /**
   *  Solve for the effective moment-arm about the all coordinates (q) based <br>
   *         on the geometric distribution of forces described by a GeometryPath. <br>
   *     @param state               current state of the model<br>
   *     @param coordinate          Coordinate about which we want the moment-arm<br>
   *     @param path                GeometryPath for which to calculate a moment-arm<br>
   *     @return ma                  resulting moment-arm as a double
   */
  public double solve(State state, Coordinate coordinate, GeometryPath path) {
    return opensimSimulationJNI.MomentArmSolver_solve__SWIG_0(swigCPtr, this, State.getCPtr(state), state, Coordinate.getCPtr(coordinate), coordinate, GeometryPath.getCPtr(path), path);
  }

  /**
   *  Solve for the effective moment-arm about the specified coordinate based <br>
   *         on the geometric distribution of forces described by the list of <br>
   *         PointForceDirections. <br>
   *     @param state               current state of the model<br>
   *     @param coordinate          Coordinate about which we want the moment-arm<br>
   *     @param pfds                PointForceDirections applied to the model<br>
   *     @return ma                  resulting moment-arm as a double
   */
  public double solve(State state, Coordinate coordinate, ArrayPointForceDirection pfds) {
    return opensimSimulationJNI.MomentArmSolver_solve__SWIG_1(swigCPtr, this, State.getCPtr(state), state, Coordinate.getCPtr(coordinate), coordinate, ArrayPointForceDirection.getCPtr(pfds), pfds);
  }

}
