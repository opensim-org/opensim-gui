/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MassProperties {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public MassProperties(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(MassProperties obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimbodyJNI.delete_MassProperties(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  Create a mass properties object in which the mass, mass center, and <br>
   * inertia are meaningless; you must assign values before using this. *
   */
  public MassProperties() {
    this(opensimSimbodyJNI.new_MassProperties(), true);
  }

  /**
   *  Create a mass properties object from individually supplied mass,<br>
   * mass center, and inertia matrix.  The inertia matrix is divided by the<br>
   * mass to produce the unit inertia. * Return true only if the mass stored here is <i>exactly</i> zero.\ If the mass<br>
   * resulted from a computation, you should use isNearlyMassless() instead.<br>
   * @see isNearlyMassless(), isExactlyCentral() *
   */
  public boolean isExactlyMassless() {
    return opensimSimbodyJNI.MassProperties_isExactlyMassless(swigCPtr, this);
  }

  /**
   *  Return true if the mass stored here is zero to within a small tolerance.<br>
   * By default we use SignificantReal (about 1e-14 in double precision) as the<br>
   * tolerance but you can override that. If you are just checking to see whether<br>
   * the mass was explicitly set to zero (rather than calculated) you can use<br>
   * isExactlyMassless() instead. @see isExactlyMassless(), isNearlyCentral() *
   */
  public boolean isNearlyMassless(double tol) {
    return opensimSimbodyJNI.MassProperties_isNearlyMassless__SWIG_0(swigCPtr, this, tol);
  }

  /**
   *  Return true if the mass stored here is zero to within a small tolerance.<br>
   * By default we use SignificantReal (about 1e-14 in double precision) as the<br>
   * tolerance but you can override that. If you are just checking to see whether<br>
   * the mass was explicitly set to zero (rather than calculated) you can use<br>
   * isExactlyMassless() instead. @see isExactlyMassless(), isNearlyCentral() *
   */
  public boolean isNearlyMassless() {
    return opensimSimbodyJNI.MassProperties_isNearlyMassless__SWIG_1(swigCPtr, this);
  }

  /**
   *  Return true only if the mass center stored here is <i>exactly</i> zero.\ If <br>
   * the mass center resulted from a computation, you should use isNearlyCentral()<br>
   * instead. @see isNearlyCentral(), isExactlyMassless() *
   */
  public boolean isExactlyCentral() {
    return opensimSimbodyJNI.MassProperties_isExactlyCentral(swigCPtr, this);
  }

  /**
   *  Return true if the mass center stored here is zero to within a small tolerance.<br>
   * By default we use SignificantReal (about 1e-14 in double precision) as the<br>
   * tolerance but you can override that. If you are just checking to see whether<br>
   * the mass center was explicitly set to zero (rather than calculated) you can use<br>
   * isExactlyCentral() instead. @see isExactlyCentral(), isNearlyMassless() *
   */
  public boolean isNearlyCentral(double tol) {
    return opensimSimbodyJNI.MassProperties_isNearlyCentral__SWIG_0(swigCPtr, this, tol);
  }

  /**
   *  Return true if the mass center stored here is zero to within a small tolerance.<br>
   * By default we use SignificantReal (about 1e-14 in double precision) as the<br>
   * tolerance but you can override that. If you are just checking to see whether<br>
   * the mass center was explicitly set to zero (rather than calculated) you can use<br>
   * isExactlyCentral() instead. @see isExactlyCentral(), isNearlyMassless() *
   */
  public boolean isNearlyCentral() {
    return opensimSimbodyJNI.MassProperties_isNearlyCentral__SWIG_1(swigCPtr, this);
  }

  /**
   *  Return true if any element of this MassProperties object is NaN. <br>
   * @see isInf(), isFinite() *
   */
  public boolean isNaN() {
    return opensimSimbodyJNI.MassProperties_isNaN(swigCPtr, this);
  }

  /**
   *  Return true only if there are no NaN's in this MassProperties object, and<br>
   * at least one of the elements is Infinity.\ Ground's mass properties satisfy<br>
   * these conditions. <br>
   * @see isNan(), isFinite() *
   */
  public boolean isInf() {
    return opensimSimbodyJNI.MassProperties_isInf(swigCPtr, this);
  }

  /**
   *  Return true if none of the elements of this MassProperties object are<br>
   * NaN or Infinity.\ Note that Ground's mass properties are not finite. <br>
   * @see isNaN(), isInf() *
   */
  public boolean isFinite() {
    return opensimSimbodyJNI.MassProperties_isFinite(swigCPtr, this);
  }

}
