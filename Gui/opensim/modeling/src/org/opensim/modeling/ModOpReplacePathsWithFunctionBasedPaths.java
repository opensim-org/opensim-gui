/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  Invoke ModelFactory::replacePathsWithFunctionBasedPaths() on the model.
 */
public class ModOpReplacePathsWithFunctionBasedPaths extends ModelOperator {
  private transient long swigCPtr;

  public ModOpReplacePathsWithFunctionBasedPaths(long cPtr, boolean cMemoryOwn) {
    super(opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ModOpReplacePathsWithFunctionBasedPaths obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(ModOpReplacePathsWithFunctionBasedPaths obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimActuatorsAnalysesToolsJNI.delete_ModOpReplacePathsWithFunctionBasedPaths(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ModOpReplacePathsWithFunctionBasedPaths safeDownCast(OpenSimObject obj) {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ModOpReplacePathsWithFunctionBasedPaths(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ModOpReplacePathsWithFunctionBasedPaths(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_getConcreteClassName(swigCPtr, this);
  }

  public ModOpReplacePathsWithFunctionBasedPaths() {
    this(opensimActuatorsAnalysesToolsJNI.new_ModOpReplacePathsWithFunctionBasedPaths__SWIG_0(), true);
  }

  public ModOpReplacePathsWithFunctionBasedPaths(String pathsFile) {
    this(opensimActuatorsAnalysesToolsJNI.new_ModOpReplacePathsWithFunctionBasedPaths__SWIG_1(pathsFile), true);
  }

  public void operate(Model model, String arg1) {
    opensimActuatorsAnalysesToolsJNI.ModOpReplacePathsWithFunctionBasedPaths_operate(swigCPtr, this, Model.getCPtr(model), model, arg1);
  }

}
