/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class to represent an Ellipsoid geometry.
 */
public class Ellipsoid extends AnalyticGeometry {
  private transient long swigCPtr;

  public Ellipsoid(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.Ellipsoid_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Ellipsoid obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_Ellipsoid(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Ellipsoid safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.Ellipsoid_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Ellipsoid(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.Ellipsoid_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.Ellipsoid_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.Ellipsoid_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Ellipsoid(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.Ellipsoid_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_radii(Ellipsoid source) {
    opensimSimulationJNI.Ellipsoid_copyProperty_radii(swigCPtr, this, Ellipsoid.getCPtr(source), source);
  }

  public Vec3 get_radii(int i) {
    return new Vec3(opensimSimulationJNI.Ellipsoid_get_radii__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_radii(int i) {
    return new Vec3(opensimSimulationJNI.Ellipsoid_upd_radii__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_radii(int i, Vec3 value) {
    opensimSimulationJNI.Ellipsoid_set_radii__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_radii(Vec3 value) {
    return opensimSimulationJNI.Ellipsoid_append_radii(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_radii(Vec3 initValue) {
    opensimSimulationJNI.Ellipsoid_constructProperty_radii(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_radii() {
    return new Vec3(opensimSimulationJNI.Ellipsoid_get_radii__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_radii() {
    return new Vec3(opensimSimulationJNI.Ellipsoid_upd_radii__SWIG_1(swigCPtr, this), false);
  }

  public void set_radii(Vec3 value) {
    opensimSimulationJNI.Ellipsoid_set_radii__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  /**
   *  Default constructor, creates an Ellipsoid of radii 0.5, 1., 2.
   */
  public Ellipsoid() {
    this(opensimSimulationJNI.new_Ellipsoid__SWIG_0(), true);
  }

  /**
   *  Constructor that takes in three radii
   */
  public Ellipsoid(double radius1, double radius2, double radius3) {
    this(opensimSimulationJNI.new_Ellipsoid__SWIG_1(radius1, radius2, radius3), true);
  }

  /**
   *  Convenience interface to set radii
   */
  public void setEllipsoidParams(double radius1, double radius2, double radius3) {
    opensimSimulationJNI.Ellipsoid_setEllipsoidParams(swigCPtr, this, radius1, radius2, radius3);
  }

}
