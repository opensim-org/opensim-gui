/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MocoTrajectory {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public MocoTrajectory(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoTrajectory obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoTrajectory(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

    public void setTime(double[] time) {
        Vector v = new Vector();
        v.resize(time.length);
        for (int i = 0; i < time.length; ++i) { v.set(i, time[i]); }
        setTime(v);
    }
    public void setState(String name, double[] traj) {
        Vector v = new Vector();
        v.resize(traj.length);
        for (int i = 0; i < traj.length; ++i) { v.set(i, traj[i]); }
        setState(name, v);
    }
    public void setControl(String name, double[] traj) {
        Vector v = new Vector();
        v.resize(traj.length);
        for (int i = 0; i < traj.length; ++i) { v.set(i, traj[i]); }
        setControl(name, v);
    }
    public void setMultiplier(String name, double[] traj) {
        Vector v = new Vector();
        v.resize(traj.length);
        for (int i = 0; i < traj.length; ++i) { v.set(i, traj[i]); }
        setMultiplier(name, v);
    }
    public void setDerivative(String name, double[] traj) {
        Vector v = new Vector();
        v.resize(traj.length);
        for (int i = 0; i < traj.length; ++i) { v.set(i, traj[i]); }
        setDerivative(name, v);
    }
    public double[] getTimeMat() {
        Vector time = getTime();
        double[] ret = new double[time.size()];
        for (int i = 0; i < time.size(); ++i) { ret[i] = time.get(i); };
        return ret;
    }
    public double[] getStateMat(String name) {
        VectorView state = getState(name);
        double[] ret = new double[state.size()];
        for (int i = 0; i < state.size(); ++i) { ret[i] = state.get(i); };
        return ret;
    }
    public double[] getControlMat(String name) {
        VectorView control = getControl(name);
        double[] ret = new double[control.size()];
        for (int i = 0; i < control.size(); ++i) { ret[i] = control.get(i); };
        return ret;
    }
    public double[] getMultiplierMat(String name) {
        VectorView mult = getMultiplier(name);
        double[] ret = new double[mult.size()];
        for (int i = 0; i < mult.size(); ++i) { ret[i] = mult.get(i); };
        return ret;
    }
    public double[] getDerivativeMat(String name) {
        VectorView deriv = getDerivative(name);
        double[] ret = new double[deriv.size()];
        for (int i = 0; i < deriv.size(); ++i) { ret[i] = deriv.get(i); };
        return ret;
    }
    public double[] getParametersMat() {
        RowVector params = getParameters();
        double[] ret = new double[params.size()];
        for (int i = 0; i < params.size(); ++i) { ret[i] = params.get(i); };
        return ret;
    }
    public double[][] getStatesTrajectoryMat() {
        Matrix matrix = getStatesTrajectory();
        double[][] ret = new double[matrix.nrow()][matrix.ncol()];
        for (int i = 0; i < matrix.nrow(); ++i) {
            for (int j = 0; j < matrix.ncol(); ++j) {
                ret[i][j] = matrix.getElt(i, j);
            }
        }
        return ret;
    }
    public double[][] getControlsTrajectoryMat() {
        Matrix matrix = getControlsTrajectory();
        double[][] ret = new double[matrix.nrow()][matrix.ncol()];
        for (int i = 0; i < matrix.nrow(); ++i) {
            for (int j = 0; j < matrix.ncol(); ++j) {
                ret[i][j] = matrix.getElt(i, j);
            }
        }
        return ret;
    }
    public double[][] getMultipliersTrajectoryMat() {
        Matrix matrix = getMultipliersTrajectory();
        double[][] ret = new double[matrix.nrow()][matrix.ncol()];
        for (int i = 0; i < matrix.nrow(); ++i) {
            for (int j = 0; j < matrix.ncol(); ++j) {
                ret[i][j] = matrix.getElt(i, j);
            }
        }
        return ret;
    }
    public double[][] getDerivativesTrajectoryMat() {
        Matrix matrix = getDerivativesTrajectory();
        double[][] ret = new double[matrix.nrow()][matrix.ncol()];
        for (int i = 0; i < matrix.nrow(); ++i) {
            for (int j = 0; j < matrix.ncol(); ++j) {
                ret[i][j] = matrix.getElt(i, j);
            }
        }
        return ret;
    }

  public MocoTrajectory() {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_0(), true);
  }

  public MocoTrajectory(StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString parameter_names) {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_1(StdVectorString.getCPtr(state_names), state_names, StdVectorString.getCPtr(control_names), control_names, StdVectorString.getCPtr(multiplier_names), multiplier_names, StdVectorString.getCPtr(parameter_names), parameter_names), true);
  }

  public MocoTrajectory(StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString derivative_names, StdVectorString parameter_names) {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_2(StdVectorString.getCPtr(state_names), state_names, StdVectorString.getCPtr(control_names), control_names, StdVectorString.getCPtr(multiplier_names), multiplier_names, StdVectorString.getCPtr(derivative_names), derivative_names, StdVectorString.getCPtr(parameter_names), parameter_names), true);
  }

  public MocoTrajectory(Vector time, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString parameter_names, Matrix statesTrajectory, Matrix controlsTrajectory, Matrix multipliersTrajectory, RowVector parameters) {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_3(Vector.getCPtr(time), time, StdVectorString.getCPtr(state_names), state_names, StdVectorString.getCPtr(control_names), control_names, StdVectorString.getCPtr(multiplier_names), multiplier_names, StdVectorString.getCPtr(parameter_names), parameter_names, Matrix.getCPtr(statesTrajectory), statesTrajectory, Matrix.getCPtr(controlsTrajectory), controlsTrajectory, Matrix.getCPtr(multipliersTrajectory), multipliersTrajectory, RowVector.getCPtr(parameters), parameters), true);
  }

  public MocoTrajectory(Vector time, StdVectorString state_names, StdVectorString control_names, StdVectorString multiplier_names, StdVectorString derivative_names, StdVectorString parameter_names, Matrix statesTrajectory, Matrix controlsTrajectory, Matrix multipliersTrajectory, Matrix derivativesTrajectory, RowVector parameters) {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_4(Vector.getCPtr(time), time, StdVectorString.getCPtr(state_names), state_names, StdVectorString.getCPtr(control_names), control_names, StdVectorString.getCPtr(multiplier_names), multiplier_names, StdVectorString.getCPtr(derivative_names), derivative_names, StdVectorString.getCPtr(parameter_names), parameter_names, Matrix.getCPtr(statesTrajectory), statesTrajectory, Matrix.getCPtr(controlsTrajectory), controlsTrajectory, Matrix.getCPtr(multipliersTrajectory), multipliersTrajectory, Matrix.getCPtr(derivativesTrajectory), derivativesTrajectory, RowVector.getCPtr(parameters), parameters), true);
  }

  public MocoTrajectory(String filepath) {
    this(opensimMocoJNI.new_MocoTrajectory__SWIG_5(filepath), true);
  }

  public MocoTrajectory clone() {
    long cPtr = opensimMocoJNI.MocoTrajectory_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoTrajectory(cPtr, true);
  }

  public boolean empty() {
    return opensimMocoJNI.MocoTrajectory_empty(swigCPtr, this);
  }

  public boolean hasCoordinateStates() {
    return opensimMocoJNI.MocoTrajectory_hasCoordinateStates(swigCPtr, this);
  }

  public void setNumTimes(int numTimes) {
    opensimMocoJNI.MocoTrajectory_setNumTimes(swigCPtr, this, numTimes);
  }

  public double resampleWithNumTimes(int numTimes) {
    return opensimMocoJNI.MocoTrajectory_resampleWithNumTimes(swigCPtr, this, numTimes);
  }

  public double resampleWithInterval(double desiredTimeInterval) {
    return opensimMocoJNI.MocoTrajectory_resampleWithInterval(swigCPtr, this, desiredTimeInterval);
  }

  public double resampleWithFrequency(double desiredNumTimePointsPerSecond) {
    return opensimMocoJNI.MocoTrajectory_resampleWithFrequency(swigCPtr, this, desiredNumTimePointsPerSecond);
  }

  public void resample(Vector newTime) {
    opensimMocoJNI.MocoTrajectory_resample(swigCPtr, this, Vector.getCPtr(newTime), newTime);
  }

  public void setTime(Vector time) {
    opensimMocoJNI.MocoTrajectory_setTime(swigCPtr, this, Vector.getCPtr(time), time);
  }

  public void setState(String name, Vector trajectory) {
    opensimMocoJNI.MocoTrajectory_setState(swigCPtr, this, name, Vector.getCPtr(trajectory), trajectory);
  }

  public void setControl(String name, Vector trajectory) {
    opensimMocoJNI.MocoTrajectory_setControl(swigCPtr, this, name, Vector.getCPtr(trajectory), trajectory);
  }

  public void setMultiplier(String name, Vector trajectory) {
    opensimMocoJNI.MocoTrajectory_setMultiplier(swigCPtr, this, name, Vector.getCPtr(trajectory), trajectory);
  }

  public void setDerivative(String name, Vector trajectory) {
    opensimMocoJNI.MocoTrajectory_setDerivative(swigCPtr, this, name, Vector.getCPtr(trajectory), trajectory);
  }

  public void setParameter(String name, double value) {
    opensimMocoJNI.MocoTrajectory_setParameter(swigCPtr, this, name, value);
  }

  public void setStatesTrajectory(TimeSeriesTable states, boolean allowMissingColumns, boolean allowExtraColumns) {
    opensimMocoJNI.MocoTrajectory_setStatesTrajectory__SWIG_0(swigCPtr, this, TimeSeriesTable.getCPtr(states), states, allowMissingColumns, allowExtraColumns);
  }

  public void setStatesTrajectory(TimeSeriesTable states, boolean allowMissingColumns) {
    opensimMocoJNI.MocoTrajectory_setStatesTrajectory__SWIG_1(swigCPtr, this, TimeSeriesTable.getCPtr(states), states, allowMissingColumns);
  }

  public void setStatesTrajectory(TimeSeriesTable states) {
    opensimMocoJNI.MocoTrajectory_setStatesTrajectory__SWIG_2(swigCPtr, this, TimeSeriesTable.getCPtr(states), states);
  }

  public void insertStatesTrajectory(TimeSeriesTable subsetOfStates, boolean overwrite) {
    opensimMocoJNI.MocoTrajectory_insertStatesTrajectory__SWIG_0(swigCPtr, this, TimeSeriesTable.getCPtr(subsetOfStates), subsetOfStates, overwrite);
  }

  public void insertStatesTrajectory(TimeSeriesTable subsetOfStates) {
    opensimMocoJNI.MocoTrajectory_insertStatesTrajectory__SWIG_1(swigCPtr, this, TimeSeriesTable.getCPtr(subsetOfStates), subsetOfStates);
  }

  public void insertControlsTrajectory(TimeSeriesTable subsetOfControls, boolean overwrite) {
    opensimMocoJNI.MocoTrajectory_insertControlsTrajectory__SWIG_0(swigCPtr, this, TimeSeriesTable.getCPtr(subsetOfControls), subsetOfControls, overwrite);
  }

  public void insertControlsTrajectory(TimeSeriesTable subsetOfControls) {
    opensimMocoJNI.MocoTrajectory_insertControlsTrajectory__SWIG_1(swigCPtr, this, TimeSeriesTable.getCPtr(subsetOfControls), subsetOfControls);
  }

  public void generateSpeedsFromValues() {
    opensimMocoJNI.MocoTrajectory_generateSpeedsFromValues(swigCPtr, this);
  }

  public void generateAccelerationsFromValues() {
    opensimMocoJNI.MocoTrajectory_generateAccelerationsFromValues(swigCPtr, this);
  }

  public void generateAccelerationsFromSpeeds() {
    opensimMocoJNI.MocoTrajectory_generateAccelerationsFromSpeeds(swigCPtr, this);
  }

  public int getNumTimes() {
    return opensimMocoJNI.MocoTrajectory_getNumTimes(swigCPtr, this);
  }

  public Vector getTime() {
    return new Vector(opensimMocoJNI.MocoTrajectory_getTime(swigCPtr, this), false);
  }

  public double getInitialTime() {
    return opensimMocoJNI.MocoTrajectory_getInitialTime(swigCPtr, this);
  }

  public double getFinalTime() {
    return opensimMocoJNI.MocoTrajectory_getFinalTime(swigCPtr, this);
  }

  public int getNumStates() {
    return opensimMocoJNI.MocoTrajectory_getNumStates(swigCPtr, this);
  }

  public int getNumControls() {
    return opensimMocoJNI.MocoTrajectory_getNumControls(swigCPtr, this);
  }

  public int getNumMultipliers() {
    return opensimMocoJNI.MocoTrajectory_getNumMultipliers(swigCPtr, this);
  }

  public int getNumDerivatives() {
    return opensimMocoJNI.MocoTrajectory_getNumDerivatives(swigCPtr, this);
  }

  public int getNumParameters() {
    return opensimMocoJNI.MocoTrajectory_getNumParameters(swigCPtr, this);
  }

  public StdVectorString getStateNames() {
    return new StdVectorString(opensimMocoJNI.MocoTrajectory_getStateNames(swigCPtr, this), false);
  }

  public StdVectorString getControlNames() {
    return new StdVectorString(opensimMocoJNI.MocoTrajectory_getControlNames(swigCPtr, this), false);
  }

  public StdVectorString getMultiplierNames() {
    return new StdVectorString(opensimMocoJNI.MocoTrajectory_getMultiplierNames(swigCPtr, this), false);
  }

  public StdVectorString getDerivativeNames() {
    return new StdVectorString(opensimMocoJNI.MocoTrajectory_getDerivativeNames(swigCPtr, this), false);
  }

  public StdVectorString getParameterNames() {
    return new StdVectorString(opensimMocoJNI.MocoTrajectory_getParameterNames(swigCPtr, this), false);
  }

  public VectorView getState(String name) {
    return new VectorView(opensimMocoJNI.MocoTrajectory_getState(swigCPtr, this, name), true);
  }

  public VectorView getControl(String name) {
    return new VectorView(opensimMocoJNI.MocoTrajectory_getControl(swigCPtr, this, name), true);
  }

  public VectorView getMultiplier(String name) {
    return new VectorView(opensimMocoJNI.MocoTrajectory_getMultiplier(swigCPtr, this, name), true);
  }

  public VectorView getDerivative(String name) {
    return new VectorView(opensimMocoJNI.MocoTrajectory_getDerivative(swigCPtr, this, name), true);
  }

  public double getParameter(String name) {
    return opensimMocoJNI.MocoTrajectory_getParameter(swigCPtr, this, name);
  }

  public Matrix getStatesTrajectory() {
    return new Matrix(opensimMocoJNI.MocoTrajectory_getStatesTrajectory(swigCPtr, this), false);
  }

  public Matrix getControlsTrajectory() {
    return new Matrix(opensimMocoJNI.MocoTrajectory_getControlsTrajectory(swigCPtr, this), false);
  }

  public Matrix getMultipliersTrajectory() {
    return new Matrix(opensimMocoJNI.MocoTrajectory_getMultipliersTrajectory(swigCPtr, this), false);
  }

  public Matrix getDerivativesTrajectory() {
    return new Matrix(opensimMocoJNI.MocoTrajectory_getDerivativesTrajectory(swigCPtr, this), false);
  }

  public RowVector getParameters() {
    return new RowVector(opensimMocoJNI.MocoTrajectory_getParameters(swigCPtr, this), false);
  }

  public boolean isCompatible(MocoProblemRep arg0, boolean requireAccelerations, boolean throwOnError) {
    return opensimMocoJNI.MocoTrajectory_isCompatible__SWIG_0(swigCPtr, this, MocoProblemRep.getCPtr(arg0), arg0, requireAccelerations, throwOnError);
  }

  public boolean isCompatible(MocoProblemRep arg0, boolean requireAccelerations) {
    return opensimMocoJNI.MocoTrajectory_isCompatible__SWIG_1(swigCPtr, this, MocoProblemRep.getCPtr(arg0), arg0, requireAccelerations);
  }

  public boolean isCompatible(MocoProblemRep arg0) {
    return opensimMocoJNI.MocoTrajectory_isCompatible__SWIG_2(swigCPtr, this, MocoProblemRep.getCPtr(arg0), arg0);
  }

  public boolean isNumericallyEqual(MocoTrajectory other, double tol) {
    return opensimMocoJNI.MocoTrajectory_isNumericallyEqual__SWIG_0(swigCPtr, this, MocoTrajectory.getCPtr(other), other, tol);
  }

  public boolean isNumericallyEqual(MocoTrajectory other) {
    return opensimMocoJNI.MocoTrajectory_isNumericallyEqual__SWIG_1(swigCPtr, this, MocoTrajectory.getCPtr(other), other);
  }

  public double compareContinuousVariablesRMS(MocoTrajectory other, SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__string_t_t columnsToUse) {
    return opensimMocoJNI.MocoTrajectory_compareContinuousVariablesRMS__SWIG_0(swigCPtr, this, MocoTrajectory.getCPtr(other), other, SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__string_t_t.getCPtr(columnsToUse));
  }

  public double compareContinuousVariablesRMS(MocoTrajectory other) {
    return opensimMocoJNI.MocoTrajectory_compareContinuousVariablesRMS__SWIG_1(swigCPtr, this, MocoTrajectory.getCPtr(other), other);
  }

  public double compareContinuousVariablesRMSPattern(MocoTrajectory other, String columnType, String pattern) {
    return opensimMocoJNI.MocoTrajectory_compareContinuousVariablesRMSPattern(swigCPtr, this, MocoTrajectory.getCPtr(other), other, columnType, pattern);
  }

  public double compareParametersRMS(MocoTrajectory other, StdVectorString parameterNames) {
    return opensimMocoJNI.MocoTrajectory_compareParametersRMS__SWIG_0(swigCPtr, this, MocoTrajectory.getCPtr(other), other, StdVectorString.getCPtr(parameterNames), parameterNames);
  }

  public double compareParametersRMS(MocoTrajectory other) {
    return opensimMocoJNI.MocoTrajectory_compareParametersRMS__SWIG_1(swigCPtr, this, MocoTrajectory.getCPtr(other), other);
  }

  public void write(String filepath) {
    opensimMocoJNI.MocoTrajectory_write(swigCPtr, this, filepath);
  }

  public TimeSeriesTable exportToStatesTable() {
    return new TimeSeriesTable(opensimMocoJNI.MocoTrajectory_exportToStatesTable(swigCPtr, this), true);
  }

  public TimeSeriesTable exportToControlsTable() {
    return new TimeSeriesTable(opensimMocoJNI.MocoTrajectory_exportToControlsTable(swigCPtr, this), true);
  }

  public StatesTrajectory exportToStatesTrajectory(MocoProblem arg0) {
    return new StatesTrajectory(opensimMocoJNI.MocoTrajectory_exportToStatesTrajectory__SWIG_0(swigCPtr, this, MocoProblem.getCPtr(arg0), arg0), true);
  }

  public StatesTrajectory exportToStatesTrajectory(Model arg0) {
    return new StatesTrajectory(opensimMocoJNI.MocoTrajectory_exportToStatesTrajectory__SWIG_1(swigCPtr, this, Model.getCPtr(arg0), arg0), true);
  }

  public void randomizeReplace(SWIGTYPE_p_SimTK__Random randGen) {
    opensimMocoJNI.MocoTrajectory_randomizeReplace__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Random.getCPtr(randGen));
  }

  public void randomizeReplace() {
    opensimMocoJNI.MocoTrajectory_randomizeReplace__SWIG_1(swigCPtr, this);
  }

  public void randomizeAdd(SWIGTYPE_p_SimTK__Random randGen) {
    opensimMocoJNI.MocoTrajectory_randomizeAdd__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Random.getCPtr(randGen));
  }

  public void randomizeAdd() {
    opensimMocoJNI.MocoTrajectory_randomizeAdd__SWIG_1(swigCPtr, this);
  }

  public static MocoTrajectory createFromStatesControlsTables(MocoProblemRep arg0, TimeSeriesTable statesTrajectory, TimeSeriesTable controlsTrajectory) {
    return new MocoTrajectory(opensimMocoJNI.MocoTrajectory_createFromStatesControlsTables(MocoProblemRep.getCPtr(arg0), arg0, TimeSeriesTable.getCPtr(statesTrajectory), statesTrajectory, TimeSeriesTable.getCPtr(controlsTrajectory), controlsTrajectory), true);
  }

}
