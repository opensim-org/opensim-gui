/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This path contraint allows you to bound any number of state variables<br>
 * between two time-based functions. It is possible to constrain the state variable<br>
 * to match the value from a provided function; see the equality_with_lower<br>
 * property.<br>
 * <br>
 * If a function is a GCVSpline, we ensure that the spline covers the entire<br>
 * possible time range in the problem (using the problem's time bounds). We do<br>
 * not perform such a check for other types of functions.<br>
 * <br>
 * Note: If you omit the lower and upper bounds, then this class will not<br>
 * constrain any state variable, even if you have provided state paths.<br>
 * <br>
 * 
 */
public class MocoStateBoundConstraint extends MocoPathConstraint {
  private transient long swigCPtr;

  public MocoStateBoundConstraint(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoStateBoundConstraint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoStateBoundConstraint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(MocoStateBoundConstraint obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoStateBoundConstraint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoStateBoundConstraint safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoStateBoundConstraint_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoStateBoundConstraint(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoStateBoundConstraint_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoStateBoundConstraint_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoStateBoundConstraint_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoStateBoundConstraint(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoStateBoundConstraint_getConcreteClassName(swigCPtr, this);
  }

  public MocoStateBoundConstraint() {
    this(opensimMocoJNI.new_MocoStateBoundConstraint(), true);
  }

  /**
   *  Add a state path (absolute path to state varaibles in the model)<br>
   *     to be constrained by this class  (e.g., "/slider/position/speed"). 
   */
  public void addStatePath(String statePath) {
    opensimMocoJNI.MocoStateBoundConstraint_addStatePath(swigCPtr, this, statePath);
  }

  public void setStatePaths(StdVectorString statePaths) {
    opensimMocoJNI.MocoStateBoundConstraint_setStatePaths(swigCPtr, this, StdVectorString.getCPtr(statePaths), statePaths);
  }

  public void clearStatePaths() {
    opensimMocoJNI.MocoStateBoundConstraint_clearStatePaths(swigCPtr, this);
  }

  public StdVectorString getStatePaths() {
    return new StdVectorString(opensimMocoJNI.MocoStateBoundConstraint_getStatePaths(swigCPtr, this), true);
  }

  public void setLowerBound(Function f) {
    opensimMocoJNI.MocoStateBoundConstraint_setLowerBound(swigCPtr, this, Function.getCPtr(f), f);
  }

  public void clearLowerBound() {
    opensimMocoJNI.MocoStateBoundConstraint_clearLowerBound(swigCPtr, this);
  }

  public boolean hasLowerBound() {
    return opensimMocoJNI.MocoStateBoundConstraint_hasLowerBound(swigCPtr, this);
  }

  public Function getLowerBound() {
    return new Function(opensimMocoJNI.MocoStateBoundConstraint_getLowerBound(swigCPtr, this), false);
  }

  public void setUpperBound(Function f) {
    opensimMocoJNI.MocoStateBoundConstraint_setUpperBound(swigCPtr, this, Function.getCPtr(f), f);
  }

  public void clearUpperBound() {
    opensimMocoJNI.MocoStateBoundConstraint_clearUpperBound(swigCPtr, this);
  }

  public boolean hasUpperBound() {
    return opensimMocoJNI.MocoStateBoundConstraint_hasUpperBound(swigCPtr, this);
  }

  public Function getUpperBound() {
    return new Function(opensimMocoJNI.MocoStateBoundConstraint_getUpperBound(swigCPtr, this), false);
  }

  /**
   *  Set whether the state should be constrained to be equal to the lower<br>
   *     bound (rather than an inequality constraint). In this case, the upper bound<br>
   *     must be unspecified. 
   */
  public void setEqualityWithLower(boolean v) {
    opensimMocoJNI.MocoStateBoundConstraint_setEqualityWithLower(swigCPtr, this, v);
  }

  public boolean getEqualityWithLower() {
    return opensimMocoJNI.MocoStateBoundConstraint_getEqualityWithLower(swigCPtr, this);
  }

}
