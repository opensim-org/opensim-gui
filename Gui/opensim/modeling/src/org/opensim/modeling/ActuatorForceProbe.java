/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * ActuatorForceProbe is a ModelComponent Probe for computing an operation on a<br>
 * force or sum of forces in the model during a simulation.<br>
 * E.g. Impulse is the integral of force with respect to time.<br>
 * <br>
 * @author Tim Dorn
 */
public class ActuatorForceProbe extends Probe {
  private transient long swigCPtr;

  public ActuatorForceProbe(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ActuatorForceProbe_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ActuatorForceProbe obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ActuatorForceProbe(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ActuatorForceProbe safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ActuatorForceProbe_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ActuatorForceProbe(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ActuatorForceProbe_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ActuatorForceProbe_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ActuatorForceProbe_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ActuatorForceProbe(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ActuatorForceProbe_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  List of Actuator forces to probe.  *
   */
  public void copyProperty_actuator_names(ActuatorForceProbe source) {
    opensimSimulationJNI.ActuatorForceProbe_copyProperty_actuator_names(swigCPtr, this, ActuatorForceProbe.getCPtr(source), source);
  }

  public String get_actuator_names(int i) {
    return opensimSimulationJNI.ActuatorForceProbe_get_actuator_names(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_actuator_names(int i) {
    return new SWIGTYPE_p_std__string(opensimSimulationJNI.ActuatorForceProbe_upd_actuator_names(swigCPtr, this, i), false);
  }

  public void set_actuator_names(int i, String value) {
    opensimSimulationJNI.ActuatorForceProbe_set_actuator_names(swigCPtr, this, i, value);
  }

  public int append_actuator_names(String value) {
    return opensimSimulationJNI.ActuatorForceProbe_append_actuator_names(swigCPtr, this, value);
  }

  public void constructProperty_actuator_names() {
    opensimSimulationJNI.ActuatorForceProbe_constructProperty_actuator_names(swigCPtr, this);
  }

  /**
   *  Flag to specify whether to report the sum of all forces,<br>
   *     or report each force value separately.  *
   */
  public void copyProperty_sum_forces_together(ActuatorForceProbe source) {
    opensimSimulationJNI.ActuatorForceProbe_copyProperty_sum_forces_together(swigCPtr, this, ActuatorForceProbe.getCPtr(source), source);
  }

  public boolean get_sum_forces_together(int i) {
    return opensimSimulationJNI.ActuatorForceProbe_get_sum_forces_together__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_sum_forces_together(int i) {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.ActuatorForceProbe_upd_sum_forces_together__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_sum_forces_together(int i, boolean value) {
    opensimSimulationJNI.ActuatorForceProbe_set_sum_forces_together__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_sum_forces_together(boolean value) {
    return opensimSimulationJNI.ActuatorForceProbe_append_sum_forces_together(swigCPtr, this, value);
  }

  public void constructProperty_sum_forces_together(boolean initValue) {
    opensimSimulationJNI.ActuatorForceProbe_constructProperty_sum_forces_together(swigCPtr, this, initValue);
  }

  public boolean get_sum_forces_together() {
    return opensimSimulationJNI.ActuatorForceProbe_get_sum_forces_together__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_sum_forces_together() {
    return new SWIGTYPE_p_bool(opensimSimulationJNI.ActuatorForceProbe_upd_sum_forces_together__SWIG_1(swigCPtr, this), false);
  }

  public void set_sum_forces_together(boolean value) {
    opensimSimulationJNI.ActuatorForceProbe_set_sum_forces_together__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Element-wise power exponent to apply to each force prior to the Probe operation.<br>
   *     For example, if two actuators A1 and A2 are given in actuator_names, then the<br>
   *     Probe value will be equal to Force_A1^exponent + Force_A2^exponent.  *
   */
  public void copyProperty_exponent(ActuatorForceProbe source) {
    opensimSimulationJNI.ActuatorForceProbe_copyProperty_exponent(swigCPtr, this, ActuatorForceProbe.getCPtr(source), source);
  }

  public double get_exponent(int i) {
    return opensimSimulationJNI.ActuatorForceProbe_get_exponent__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_exponent(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActuatorForceProbe_upd_exponent__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_exponent(int i, double value) {
    opensimSimulationJNI.ActuatorForceProbe_set_exponent__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_exponent(double value) {
    return opensimSimulationJNI.ActuatorForceProbe_append_exponent(swigCPtr, this, value);
  }

  public void constructProperty_exponent(double initValue) {
    opensimSimulationJNI.ActuatorForceProbe_constructProperty_exponent(swigCPtr, this, initValue);
  }

  public double get_exponent() {
    return opensimSimulationJNI.ActuatorForceProbe_get_exponent__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_exponent() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.ActuatorForceProbe_upd_exponent__SWIG_1(swigCPtr, this), false);
  }

  public void set_exponent(double value) {
    opensimSimulationJNI.ActuatorForceProbe_set_exponent__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default constructor 
   */
  public ActuatorForceProbe() {
    this(opensimSimulationJNI.new_ActuatorForceProbe__SWIG_0(), true);
  }

  /**
   *  Convenience constructor 
   */
  public ActuatorForceProbe(ArrayStr actuator_names, boolean sum_forces_together, double exponent) {
    this(opensimSimulationJNI.new_ActuatorForceProbe__SWIG_1(ArrayStr.getCPtr(actuator_names), actuator_names, sum_forces_together, exponent), true);
  }

  /**
   *  Returns the name(s) of the Actuator forces being probed. 
   */
  public PropertyStringList getActuatorNames() {
    return new PropertyStringList(opensimSimulationJNI.ActuatorForceProbe_getActuatorNames(swigCPtr, this), false);
  }

  /**
   *  Returns whether to report sum of all Actuator forces together<br>
   *     or report the forces individually. 
   */
  public boolean getSumForcesTogether() {
    return opensimSimulationJNI.ActuatorForceProbe_getSumForcesTogether(swigCPtr, this);
  }

  /**
   *  Returns the exponent to apply to each Actuator force. 
   */
  public double getExponent() {
    return opensimSimulationJNI.ActuatorForceProbe_getExponent(swigCPtr, this);
  }

  /**
   *  Sets the name(s) of the Actuator forces being probed. 
   */
  public void setActuatorNames(ArrayStr actuatorNames) {
    opensimSimulationJNI.ActuatorForceProbe_setActuatorNames(swigCPtr, this, ArrayStr.getCPtr(actuatorNames), actuatorNames);
  }

  /**
   *  Sets whether to report sum of all Actuator force values together<br>
   *     or report the force values individually. 
   */
  public void setSumForcesTogether(boolean sum_forces_together) {
    opensimSimulationJNI.ActuatorForceProbe_setSumForcesTogether(swigCPtr, this, sum_forces_together);
  }

  /**
   *  Sets the exponent to apply to each Actuator force. 
   */
  public void setExponent(double exponent) {
    opensimSimulationJNI.ActuatorForceProbe_setExponent(swigCPtr, this, exponent);
  }

  /**
   *  Compute the Force 
   */
  public Vector computeProbeInputs(State state) {
    return new Vector(opensimSimulationJNI.ActuatorForceProbe_computeProbeInputs(swigCPtr, this, State.getCPtr(state), state), true);
  }

  /**
   *  Returns the number of probe inputs in the vector returned by computeProbeInputs(). 
   */
  public int getNumProbeInputs() {
    return opensimSimulationJNI.ActuatorForceProbe_getNumProbeInputs(swigCPtr, this);
  }

  /**
   *  Returns the column labels of the probe values for reporting.<br>
   *     Currently uses the Probe name as the column label, so be sure<br>
   *     to name your probe appropriately! 
   */
  public ArrayStr getProbeOutputLabels() {
    return new ArrayStr(opensimSimulationJNI.ActuatorForceProbe_getProbeOutputLabels(swigCPtr, this), true);
  }

  public void extendConnectToModel(Model model) {
    opensimSimulationJNI.ActuatorForceProbe_extendConnectToModel(swigCPtr, this, Model.getCPtr(model), model);
  }

}
