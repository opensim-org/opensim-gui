/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * A class implementing a Free joint.  The underlying implementation<br>
 * in Simbody is a SimTK::MobilizedBody::Free.<br>
 * Free joint allows unrestricted motion with three rotations and three translations.<br>
 * Rotations are modeled similarly to BallJoint -using quaternions with no<br>
 * singularities- while the translational generalized coordinates are XYZ<br>
 * Translations along the parent axis. Generalized speeds are equal to the computed<br>
 * angular velocities ( \vec{u} = \vec{\omega}), not a differentiation of<br>
 * position ( \vec{u} \neq \dot{\vec{q}}).<br>
 * <br>
 * <img src=freeJoint.gif/><br>
 * <br>
 * @author Ajay Seth
 */
public class FreeJoint extends Joint {
  private transient long swigCPtr;

  public FreeJoint(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.FreeJoint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(FreeJoint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_FreeJoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static FreeJoint safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.FreeJoint_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new FreeJoint(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.FreeJoint_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.FreeJoint_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.FreeJoint_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new FreeJoint(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.FreeJoint_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  Convenience method to get a const reference to the Coordinate associated<br>
   *         with a single-degree-of-freedom Joint. If the Joint has more than one<br>
   *         Coordinate, you must use get_coordinates() or provide the appropriate<br>
   *         argument to the getCoordinate() method defined in the derived class. 
   */
  public Coordinate getCoordinate() {
    return new Coordinate(opensimSimulationJNI.FreeJoint_getCoordinate__SWIG_0_0(swigCPtr, this), false);
  }

  /**
   *  Convenience method to get a writable reference to the Coordinate<br>
   *         associated with a single-degree-of-freedom Joint. If the Joint has more<br>
   *         than one Coordinate, you must use upd_coordinates() or provide the<br>
   *         appropriate argument to the updCoordinate() method defined in the<br>
   *         derived class. 
   */
  public Coordinate updCoordinate() {
    return new Coordinate(opensimSimulationJNI.FreeJoint_updCoordinate__SWIG_0_0(swigCPtr, this), false);
  }

  /**
   *  Get a const reference to a Coordinate associated with this Joint.<br>
   *         @see Coord 
   */
  public Coordinate getCoordinate(FreeJoint.Coord idx) {
    return new Coordinate(opensimSimulationJNI.FreeJoint_getCoordinate__SWIG_1(swigCPtr, this, idx.swigValue()), false);
  }

  /**
   *  Get a writable reference to a Coordinate associated with this Joint.<br>
   *         @see Coord 
   */
  public Coordinate updCoordinate(FreeJoint.Coord idx) {
    return new Coordinate(opensimSimulationJNI.FreeJoint_updCoordinate__SWIG_1(swigCPtr, this, idx.swigValue()), false);
  }

  public FreeJoint() {
    this(opensimSimulationJNI.new_FreeJoint__SWIG_0(), true);
  }

  public FreeJoint(String name, PhysicalFrame parent, PhysicalFrame child) {
    this(opensimSimulationJNI.new_FreeJoint__SWIG_1(name, PhysicalFrame.getCPtr(parent), parent, PhysicalFrame.getCPtr(child), child), true);
  }

  public FreeJoint(String name, PhysicalFrame parent, Vec3 locationInParent, Vec3 orientationInParent, PhysicalFrame child, Vec3 locationInChild, Vec3 orientationInChild) {
    this(opensimSimulationJNI.new_FreeJoint__SWIG_2(name, PhysicalFrame.getCPtr(parent), parent, Vec3.getCPtr(locationInParent), locationInParent, Vec3.getCPtr(orientationInParent), orientationInParent, PhysicalFrame.getCPtr(child), child, Vec3.getCPtr(locationInChild), locationInChild, Vec3.getCPtr(orientationInChild), orientationInChild), true);
  }

  /**
   *  Indices of Coordinates for use as arguments to getCoordinate() and<br>
   *         updCoordinate().<br>
   * <br>
   *         <b>C++ example</b><br>
   *         {@code 
          const auto& rx = myFreeJoint.getCoordinate(FreeJoint::Coord::Rotation1X);
          }<br>
   * <br>
   *         <b>Python example</b><br>
   *         {@code 
          import opensim
          rx = myFreeJoint.getCoordinate(opensim.FreeJoint.Coord_Rotation1X)
          }<br>
   * <br>
   *         <b>Java example</b><br>
   *         {@code 
          rx = myFreeJoint.getCoordinate(FreeJoint.Coord.Rotation1X);
          }<br>
   * <br>
   *         <b>MATLAB example</b><br>
   *         {@code 
          rx = myFreeJoint.get_coordinates(0);
          }
   */
  public final static class Coord {
    /**
     *  0
     */
    public final static FreeJoint.Coord Rotation1X = new FreeJoint.Coord("Rotation1X", opensimSimulationJNI.FreeJoint_Coord_Rotation1X_get());
    /**
     *  1
     */
    public final static FreeJoint.Coord Rotation2Y = new FreeJoint.Coord("Rotation2Y", opensimSimulationJNI.FreeJoint_Coord_Rotation2Y_get());
    /**
     *  2
     */
    public final static FreeJoint.Coord Rotation3Z = new FreeJoint.Coord("Rotation3Z", opensimSimulationJNI.FreeJoint_Coord_Rotation3Z_get());
    /**
     *  3
     */
    public final static FreeJoint.Coord TranslationX = new FreeJoint.Coord("TranslationX", opensimSimulationJNI.FreeJoint_Coord_TranslationX_get());
    /**
     *  4
     */
    public final static FreeJoint.Coord TranslationY = new FreeJoint.Coord("TranslationY", opensimSimulationJNI.FreeJoint_Coord_TranslationY_get());
    /**
     *  5
     */
    public final static FreeJoint.Coord TranslationZ = new FreeJoint.Coord("TranslationZ", opensimSimulationJNI.FreeJoint_Coord_TranslationZ_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Coord swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Coord.class + " with value " + swigValue);
    }

    private Coord(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Coord(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Coord(String swigName, Coord swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Coord[] swigValues = { Rotation1X, Rotation2Y, Rotation3Z, TranslationX, TranslationY, TranslationZ };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
