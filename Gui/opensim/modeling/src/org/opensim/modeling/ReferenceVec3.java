/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 * This base (abstract) class defines the interface for a Reference signals to<br>
 * be achieved/tracked via optimization and/or tracking controller. Combines<br>
 * weightings that identifies the relative importance of achieving one<br>
 * Reference value relative to the others. The specific value type is defined<br>
 * by the concrete References. For example, a MarkerRefrence is of type Vec3,<br>
 * for the 3D location coordinates of a marker. Correspondence with model<br>
 * values are established via the Reference names.<br>
 * <br>
 * @author Ajay Seth
 */
public class ReferenceVec3 extends OpenSimObject {
  private transient long swigCPtr;

  public ReferenceVec3(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.ReferenceVec3_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ReferenceVec3 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_ReferenceVec3(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static ReferenceVec3 safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.ReferenceVec3_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ReferenceVec3(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.ReferenceVec3_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.ReferenceVec3_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.ReferenceVec3_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ReferenceVec3(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.ReferenceVec3_getConcreteClassName(swigCPtr, this);
  }

  /**
   *  get the number of referettes (individual signals) in this Reference. All<br>
   *         return arrays are guaranteed to be this length 
   */
  public int getNumRefs() {
    return opensimSimulationJNI.ReferenceVec3_getNumRefs(swigCPtr, this);
  }

  /**
   *  get the time range for which the Reference is valid, which can and will<br>
   *         be finite if the reference encapsulates experimental data. By default<br>
   *         they are infinite 
   */
  public Vec2 getValidTimeRange() {
    return new Vec2(opensimSimulationJNI.ReferenceVec3_getValidTimeRange(swigCPtr, this), true);
  }

  /**
   *  get the name(s) of the reference or its referettes 
   */
  public SimTKArrayString getNames() {
    return new SimTKArrayString(opensimSimulationJNI.ReferenceVec3_getNames(swigCPtr, this), false);
  }

  /**
   *  get the weighting (importance) of meeting this Reference 
   */
  public void getWeights(State s, SimTKArrayDouble weights) {
    opensimSimulationJNI.ReferenceVec3_getWeights__SWIG_0(swigCPtr, this, State.getCPtr(s), s, SimTKArrayDouble.getCPtr(weights), weights);
  }

  /**
   *  Indicate whether this Reference can provide discretized data or not 
   */
  public boolean hasNext() {
    return opensimSimulationJNI.ReferenceVec3_hasNext(swigCPtr, this);
  }

  public SimTKArrayDouble getWeights(State s) {
    return new SimTKArrayDouble(opensimSimulationJNI.ReferenceVec3_getWeights__SWIG_1(swigCPtr, this, State.getCPtr(s), s), true);
  }

  /**
   *  get the values of the Reference signals as a function<br>
   *     of the passed in time 
   */
  public void getValuesAtTime(double time, SimTKArrayVec3 values) {
    opensimSimulationJNI.ReferenceVec3_getValuesAtTime(swigCPtr, this, time, SimTKArrayVec3.getCPtr(values), values);
  }

  public SimTKArrayVec3 getValues(double time) {
    return new SimTKArrayVec3(opensimSimulationJNI.ReferenceVec3_getValues(swigCPtr, this, time), true);
  }

}
