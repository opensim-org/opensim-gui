/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class OutputVector extends AbstractOutput {
  private transient long swigCPtr;

  public OutputVector(long cPtr, boolean cMemoryOwn) {
    super(opensimCommonJNI.OutputVector_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(OutputVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimCommonJNI.delete_OutputVector(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OutputVector() {
    this(opensimCommonJNI.new_OutputVector__SWIG_0(), true);
  }

  /**
   *  Convenience constructor<br>
   *     Create a Component::Output bound to a specific method of the Component and <br>
   *     valid at a given realization Stage.<br>
   *     @param name             The name of the output.<br>
   *     @param outputFunction   The output function to be invoked (returns Output T)<br>
   *     @param dependsOnStage   Stage at which Output can be evaluated.<br>
   *     @param isList           Can this Output have more than one channel? 
   */
  public OutputVector(String name, SWIGTYPE_p_std__functionT_void_fOpenSim__Component_const_p_SimTK__State_const_R_std__string_const_R_SimTK__Vector_T_double_t_RF_t outputFunction, Stage dependsOnStage, boolean isList) {
    this(opensimCommonJNI.new_OutputVector__SWIG_1(name, SWIGTYPE_p_std__functionT_void_fOpenSim__Component_const_p_SimTK__State_const_R_std__string_const_R_SimTK__Vector_T_double_t_RF_t.getCPtr(outputFunction), Stage.getCPtr(dependsOnStage), dependsOnStage, isList), true);
  }

  /**
   *  Custom copy constructor is for setting the Channel's pointer<br>
   * back to this Output. 
   */
  public OutputVector(OutputVector source) {
    this(opensimCommonJNI.new_OutputVector__SWIG_2(OutputVector.getCPtr(source), source), true);
  }

  public boolean isCompatible(AbstractOutput o) {
    return opensimCommonJNI.OutputVector_isCompatible(swigCPtr, this, AbstractOutput.getCPtr(o), o);
  }

  public void compatibleAssign(AbstractOutput o) {
    opensimCommonJNI.OutputVector_compatibleAssign(swigCPtr, this, AbstractOutput.getCPtr(o), o);
  }

  public void clearChannels() {
    opensimCommonJNI.OutputVector_clearChannels(swigCPtr, this);
  }

  public void addChannel(String channelName) {
    opensimCommonJNI.OutputVector_addChannel(swigCPtr, this, channelName);
  }

  /**
   *  For a single-value output, name must be empty or must be the output's<br>
   * name. 
   */
  public AbstractChannel getChannel(String name) {
    return new AbstractChannel(opensimCommonJNI.OutputVector_getChannel(swigCPtr, this, name), false);
  }

  /**
   *  Use this to iterate through this Output's channels<br>
   *      (even for single-value Channels).<br>
   * <br>
   *      {@code 
       for (const auto& chan : getChannels()) {
          std::cout << chan.second->getName() << std::endl;
       }
       }
   */
  public SWIGTYPE_p_std__mapT_std__string_OpenSim__OutputT_SimTK__Vector_T_double_t_t__Channel_std__lessT_std__string_t_t getChannels() {
    return new SWIGTYPE_p_std__mapT_std__string_OpenSim__OutputT_SimTK__Vector_T_double_t_t__Channel_std__lessT_std__string_t_t(opensimCommonJNI.OutputVector_getChannels(swigCPtr, this), false);
  }

  /**
   *  Return the Value of this output if the state is appropriately realized   <br>
   *         to a stage at or beyond the dependsOnStage, otherwise expect an<br>
   *         Exception. 
   */
  public Vector getValue(State state) {
    return new Vector(opensimCommonJNI.OutputVector_getValue(swigCPtr, this, State.getCPtr(state), state), false);
  }

  public String getTypeName() {
    return opensimCommonJNI.OutputVector_getTypeName(swigCPtr, this);
  }

  public String getValueAsString(State state) {
    return opensimCommonJNI.OutputVector_getValueAsString(swigCPtr, this, State.getCPtr(state), state);
  }

  public AbstractOutput clone() {
    long cPtr = opensimCommonJNI.OutputVector_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new OutputVector(cPtr, true);
  }

  public static boolean isA(AbstractOutput p) {
    return opensimCommonJNI.OutputVector_isA(AbstractOutput.getCPtr(p), p);
  }

  public static OutputVector downcast(AbstractOutput p) {
    return new OutputVector(opensimCommonJNI.OutputVector_downcast(AbstractOutput.getCPtr(p), p), false);
  }

  public static OutputVector updDowncast(AbstractOutput p) {
    return new OutputVector(opensimCommonJNI.OutputVector_updDowncast(AbstractOutput.getCPtr(p), p), false);
  }

  /**
   *  For use in python/java/MATLAB bindings. 
   */
  public static OutputVector safeDownCast(AbstractOutput parent) {
    long cPtr = opensimCommonJNI.OutputVector_safeDownCast(AbstractOutput.getCPtr(parent), parent);
    return (cPtr == 0) ? null : new OutputVector(cPtr, false);
  }

}
