/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This solver uses the CasADi library (https://casadi.org) to convert the<br>
 * MocoProblem into a generic nonlinear programming problem. CasADi efficiently<br>
 * calculcates the derivatives required to solve MocoProblem%s, and may<br>
 * solve your MocoProblem more quickly that MocoTropterSolver. In general,<br>
 * we hope that the feature sets of MocoCasADiSolver and MocoTropterSolver<br>
 * are the same.<br>
 * Note, however, that parameter optimization problems are implemented much<br>
 * less efficiently in this solver; for parameter optimization, first try<br>
 * MocoTropterSolver.<br>
 * <br>
 * Sparsity<br>
 * ========<br>
 * Direct collocation is fast because the derivative matrices (Jacobian and<br>
 * Hessian) in the optimization problem are extremely sparse. By default,<br>
 * CasADi determines the sparsity pattern of these matrices to be block<br>
 * patterns: the individual functions that invoke OpenSim are treated as dense,<br>
 * but this dense pattern is repeated in a sparse way. This is conservative<br>
 * because we ensure that no "nonzeros" are accidentally treated as "zeros."<br>
 * However, the problem may solve faster if we discover more "zeros."<br>
 * <br>
 * See the optim_sparsity_detection setting for more information. In the case<br>
 * of "random", we use 3 random trajectories and combine the resulting sparsity<br>
 * patterns. The seed used for these 3 random trajectories is always exactly<br>
 * the same, ensuring that the sparsity pattern is deterministic.<br>
 * <br>
 * To explore the sparsity pattern for your problem, set optim_write_sparsity<br>
 * and run the resulting files with the plot_casadi_sparsity.py Python script.<br>
 * <br>
 * Finite difference scheme<br>
 * ========================<br>
 * The "central" finite difference is more accurate but can be 2 times<br>
 * slower than "forward" (tested on exampleSlidingMass). Sometimes, problems<br>
 * may struggle to converge with "forward".<br>
 * <br>
 * Parallelization<br>
 * ===============<br>
 * By default, CasADi evaluate the integral cost integrand and the<br>
 * differential-algebraic equations in parallel.<br>
 * This should work fine for almost all models, but if you have custom model<br>
 * components, ensure they are threadsafe. Make sure that threads do not<br>
 * access shared resources like files or global variables at the same time.<br>
 * <br>
 * You can turn off or change the number of parallel jobs used for individual<br>
 * problems via either the OPENSIM_MOCO_PARALLEL environment variable (see<br>
 * getMocoParallelEnvironmentVariable()) or the `parallel` property of this<br>
 * class. For example, if you plan to solve two problems at the same time on<br>
 * a machine with 4 processor cores, you could set OPENSIM_MOCO_PARALLEL to 2 to<br>
 * use all 4 cores.<br>
 * <br>
 * Note that there is overhead in the parallelization; if you plan to solve<br>
 * many problems, it is better to turn off parallelization here and parallelize<br>
 * the solving of your multiple problems using your system (e.g., invoke Moco in<br>
 * multiple Terminals or Command Prompts).<br>
 * <br>
 * Note that the `parallel` property overrides the environment variable,<br>
 * allowing more granular control over parallelization. However, the<br>
 * parallelization setting does not logically belong as a property, as it does<br>
 * not affect the solution. We encourage you to use the environment variable<br>
 * instead, as this allows different users to solve the same problem with the<br>
 * parallelization they prefer.<br>
 * <br>
 * Parameter variables<br>
 * ===================<br>
 * By default, MocoCasADiSolver is much slower than MocoTroperSolver at<br>
 * handling problems with MocoParameters. Many parameters require invoking<br>
 * Model::initSystem() to take effect, and this function is expensive (for<br>
 * CasADi, we must invoke this function for every time point, while in Tropter,<br>
 * we can invoke the function only once for every NLP iterate). However, if you<br>
 * know that all parameters in your problem do not require Model::initSystem(),<br>
 * you can substantially speed up your optimization by setting the<br>
 * parameters_require_initsystem property to false. Be careful, though: you<br>
 * will end up with incorrect results if your parameter does indeed require<br>
 * Model::initSystem(). To protect against this, ensure that you obtain the<br>
 * same results whether this setting is true or false.<br>
 * <br>
 * Note: The software license of CasADi (LGPL) is more restrictive than that of<br>
 * the rest of Moco (Apache 2.0).<br>
 * Note: This solver currently only supports systems for which   \dot{q} = u
 (e.g., no quaternions). 
 */
public class MocoCasADiSolver extends MocoDirectCollocationSolver {
  private transient long swigCPtr;

  public MocoCasADiSolver(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoCasADiSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoCasADiSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoCasADiSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoCasADiSolver safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoCasADiSolver_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoCasADiSolver(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoCasADiSolver_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoCasADiSolver_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoCasADiSolver_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoCasADiSolver(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoCasADiSolver_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_scale_variables_using_bounds(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_scale_variables_using_bounds(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public boolean get_scale_variables_using_bounds(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_scale_variables_using_bounds__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_scale_variables_using_bounds(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_scale_variables_using_bounds__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_scale_variables_using_bounds(int i, boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_scale_variables_using_bounds__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_scale_variables_using_bounds(boolean value) {
    return opensimMocoJNI.MocoCasADiSolver_append_scale_variables_using_bounds(swigCPtr, this, value);
  }

  public void constructProperty_scale_variables_using_bounds(boolean initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_scale_variables_using_bounds(swigCPtr, this, initValue);
  }

  public boolean get_scale_variables_using_bounds() {
    return opensimMocoJNI.MocoCasADiSolver_get_scale_variables_using_bounds__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_scale_variables_using_bounds() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_scale_variables_using_bounds__SWIG_1(swigCPtr, this), false);
  }

  public void set_scale_variables_using_bounds(boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_scale_variables_using_bounds__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_parameters_require_initsystem(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_parameters_require_initsystem(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public boolean get_parameters_require_initsystem(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_parameters_require_initsystem__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_parameters_require_initsystem(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_parameters_require_initsystem__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_parameters_require_initsystem(int i, boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_parameters_require_initsystem__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_parameters_require_initsystem(boolean value) {
    return opensimMocoJNI.MocoCasADiSolver_append_parameters_require_initsystem(swigCPtr, this, value);
  }

  public void constructProperty_parameters_require_initsystem(boolean initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_parameters_require_initsystem(swigCPtr, this, initValue);
  }

  public boolean get_parameters_require_initsystem() {
    return opensimMocoJNI.MocoCasADiSolver_get_parameters_require_initsystem__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_parameters_require_initsystem() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_parameters_require_initsystem__SWIG_1(swigCPtr, this), false);
  }

  public void set_parameters_require_initsystem(boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_parameters_require_initsystem__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_sparsity_detection(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_optim_sparsity_detection(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public String get_optim_sparsity_detection(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_sparsity_detection__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_optim_sparsity_detection(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_sparsity_detection__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_sparsity_detection(int i, String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_sparsity_detection__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_sparsity_detection(String value) {
    return opensimMocoJNI.MocoCasADiSolver_append_optim_sparsity_detection(swigCPtr, this, value);
  }

  public void constructProperty_optim_sparsity_detection(String initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_optim_sparsity_detection(swigCPtr, this, initValue);
  }

  public String get_optim_sparsity_detection() {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_sparsity_detection__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_optim_sparsity_detection() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_sparsity_detection__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_sparsity_detection(String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_sparsity_detection__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_write_sparsity(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_optim_write_sparsity(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public String get_optim_write_sparsity(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_write_sparsity__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_optim_write_sparsity(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_write_sparsity__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_write_sparsity(int i, String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_write_sparsity__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_write_sparsity(String value) {
    return opensimMocoJNI.MocoCasADiSolver_append_optim_write_sparsity(swigCPtr, this, value);
  }

  public void constructProperty_optim_write_sparsity(String initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_optim_write_sparsity(swigCPtr, this, initValue);
  }

  public String get_optim_write_sparsity() {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_write_sparsity__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_optim_write_sparsity() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_write_sparsity__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_write_sparsity(String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_write_sparsity__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_optim_finite_difference_scheme(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_optim_finite_difference_scheme(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public String get_optim_finite_difference_scheme(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_finite_difference_scheme__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_std__string upd_optim_finite_difference_scheme(int i) {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_finite_difference_scheme__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_optim_finite_difference_scheme(int i, String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_finite_difference_scheme__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_optim_finite_difference_scheme(String value) {
    return opensimMocoJNI.MocoCasADiSolver_append_optim_finite_difference_scheme(swigCPtr, this, value);
  }

  public void constructProperty_optim_finite_difference_scheme(String initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_optim_finite_difference_scheme(swigCPtr, this, initValue);
  }

  public String get_optim_finite_difference_scheme() {
    return opensimMocoJNI.MocoCasADiSolver_get_optim_finite_difference_scheme__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string upd_optim_finite_difference_scheme() {
    return new SWIGTYPE_p_std__string(opensimMocoJNI.MocoCasADiSolver_upd_optim_finite_difference_scheme__SWIG_1(swigCPtr, this), false);
  }

  public void set_optim_finite_difference_scheme(String value) {
    opensimMocoJNI.MocoCasADiSolver_set_optim_finite_difference_scheme__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_parallel(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_parallel(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public int get_parallel(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_parallel__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_parallel(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoCasADiSolver_upd_parallel__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_parallel(int i, int value) {
    opensimMocoJNI.MocoCasADiSolver_set_parallel__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_parallel(int value) {
    return opensimMocoJNI.MocoCasADiSolver_append_parallel(swigCPtr, this, value);
  }

  public void constructProperty_parallel() {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_parallel__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_parallel(int initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_parallel__SWIG_1(swigCPtr, this, initValue);
  }

  public int get_parallel() {
    return opensimMocoJNI.MocoCasADiSolver_get_parallel__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_parallel() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoCasADiSolver_upd_parallel__SWIG_1(swigCPtr, this), false);
  }

  public void set_parallel(int value) {
    opensimMocoJNI.MocoCasADiSolver_set_parallel__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_output_interval(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_output_interval(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public int get_output_interval(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_output_interval__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_output_interval(int i) {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoCasADiSolver_upd_output_interval__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_output_interval(int i, int value) {
    opensimMocoJNI.MocoCasADiSolver_set_output_interval__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_output_interval(int value) {
    return opensimMocoJNI.MocoCasADiSolver_append_output_interval(swigCPtr, this, value);
  }

  public void constructProperty_output_interval(int initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_output_interval(swigCPtr, this, initValue);
  }

  public int get_output_interval() {
    return opensimMocoJNI.MocoCasADiSolver_get_output_interval__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_output_interval() {
    return new SWIGTYPE_p_int(opensimMocoJNI.MocoCasADiSolver_upd_output_interval__SWIG_1(swigCPtr, this), false);
  }

  public void set_output_interval(int value) {
    opensimMocoJNI.MocoCasADiSolver_set_output_interval__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimize_implicit_multibody_accelerations(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_minimize_implicit_multibody_accelerations(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public boolean get_minimize_implicit_multibody_accelerations(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_minimize_implicit_multibody_accelerations__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_minimize_implicit_multibody_accelerations(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_minimize_implicit_multibody_accelerations__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimize_implicit_multibody_accelerations(int i, boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_minimize_implicit_multibody_accelerations__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimize_implicit_multibody_accelerations(boolean value) {
    return opensimMocoJNI.MocoCasADiSolver_append_minimize_implicit_multibody_accelerations(swigCPtr, this, value);
  }

  public void constructProperty_minimize_implicit_multibody_accelerations(boolean initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_minimize_implicit_multibody_accelerations(swigCPtr, this, initValue);
  }

  public boolean get_minimize_implicit_multibody_accelerations() {
    return opensimMocoJNI.MocoCasADiSolver_get_minimize_implicit_multibody_accelerations__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_minimize_implicit_multibody_accelerations() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_minimize_implicit_multibody_accelerations__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimize_implicit_multibody_accelerations(boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_minimize_implicit_multibody_accelerations__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_implicit_multibody_accelerations_weight(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_implicit_multibody_accelerations_weight(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public double get_implicit_multibody_accelerations_weight(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_implicit_multibody_accelerations_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_implicit_multibody_accelerations_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoCasADiSolver_upd_implicit_multibody_accelerations_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_implicit_multibody_accelerations_weight(int i, double value) {
    opensimMocoJNI.MocoCasADiSolver_set_implicit_multibody_accelerations_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_implicit_multibody_accelerations_weight(double value) {
    return opensimMocoJNI.MocoCasADiSolver_append_implicit_multibody_accelerations_weight(swigCPtr, this, value);
  }

  public void constructProperty_implicit_multibody_accelerations_weight(double initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_implicit_multibody_accelerations_weight(swigCPtr, this, initValue);
  }

  public double get_implicit_multibody_accelerations_weight() {
    return opensimMocoJNI.MocoCasADiSolver_get_implicit_multibody_accelerations_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_implicit_multibody_accelerations_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoCasADiSolver_upd_implicit_multibody_accelerations_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_implicit_multibody_accelerations_weight(double value) {
    opensimMocoJNI.MocoCasADiSolver_set_implicit_multibody_accelerations_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_minimize_implicit_auxiliary_derivatives(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_minimize_implicit_auxiliary_derivatives(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public boolean get_minimize_implicit_auxiliary_derivatives(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_minimize_implicit_auxiliary_derivatives__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_minimize_implicit_auxiliary_derivatives(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_minimize_implicit_auxiliary_derivatives__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_minimize_implicit_auxiliary_derivatives(int i, boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_minimize_implicit_auxiliary_derivatives__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_minimize_implicit_auxiliary_derivatives(boolean value) {
    return opensimMocoJNI.MocoCasADiSolver_append_minimize_implicit_auxiliary_derivatives(swigCPtr, this, value);
  }

  public void constructProperty_minimize_implicit_auxiliary_derivatives(boolean initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_minimize_implicit_auxiliary_derivatives(swigCPtr, this, initValue);
  }

  public boolean get_minimize_implicit_auxiliary_derivatives() {
    return opensimMocoJNI.MocoCasADiSolver_get_minimize_implicit_auxiliary_derivatives__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_minimize_implicit_auxiliary_derivatives() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_minimize_implicit_auxiliary_derivatives__SWIG_1(swigCPtr, this), false);
  }

  public void set_minimize_implicit_auxiliary_derivatives(boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_minimize_implicit_auxiliary_derivatives__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_implicit_auxiliary_derivatives_weight(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_implicit_auxiliary_derivatives_weight(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public double get_implicit_auxiliary_derivatives_weight(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_implicit_auxiliary_derivatives_weight__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_implicit_auxiliary_derivatives_weight(int i) {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoCasADiSolver_upd_implicit_auxiliary_derivatives_weight__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_implicit_auxiliary_derivatives_weight(int i, double value) {
    opensimMocoJNI.MocoCasADiSolver_set_implicit_auxiliary_derivatives_weight__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_implicit_auxiliary_derivatives_weight(double value) {
    return opensimMocoJNI.MocoCasADiSolver_append_implicit_auxiliary_derivatives_weight(swigCPtr, this, value);
  }

  public void constructProperty_implicit_auxiliary_derivatives_weight(double initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_implicit_auxiliary_derivatives_weight(swigCPtr, this, initValue);
  }

  public double get_implicit_auxiliary_derivatives_weight() {
    return opensimMocoJNI.MocoCasADiSolver_get_implicit_auxiliary_derivatives_weight__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_implicit_auxiliary_derivatives_weight() {
    return new SWIGTYPE_p_double(opensimMocoJNI.MocoCasADiSolver_upd_implicit_auxiliary_derivatives_weight__SWIG_1(swigCPtr, this), false);
  }

  public void set_implicit_auxiliary_derivatives_weight(double value) {
    opensimMocoJNI.MocoCasADiSolver_set_implicit_auxiliary_derivatives_weight__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_enforce_path_constraint_midpoints(MocoCasADiSolver source) {
    opensimMocoJNI.MocoCasADiSolver_copyProperty_enforce_path_constraint_midpoints(swigCPtr, this, MocoCasADiSolver.getCPtr(source), source);
  }

  public boolean get_enforce_path_constraint_midpoints(int i) {
    return opensimMocoJNI.MocoCasADiSolver_get_enforce_path_constraint_midpoints__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_bool upd_enforce_path_constraint_midpoints(int i) {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_enforce_path_constraint_midpoints__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_enforce_path_constraint_midpoints(int i, boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_enforce_path_constraint_midpoints__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_enforce_path_constraint_midpoints(boolean value) {
    return opensimMocoJNI.MocoCasADiSolver_append_enforce_path_constraint_midpoints(swigCPtr, this, value);
  }

  public void constructProperty_enforce_path_constraint_midpoints(boolean initValue) {
    opensimMocoJNI.MocoCasADiSolver_constructProperty_enforce_path_constraint_midpoints(swigCPtr, this, initValue);
  }

  public boolean get_enforce_path_constraint_midpoints() {
    return opensimMocoJNI.MocoCasADiSolver_get_enforce_path_constraint_midpoints__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_bool upd_enforce_path_constraint_midpoints() {
    return new SWIGTYPE_p_bool(opensimMocoJNI.MocoCasADiSolver_upd_enforce_path_constraint_midpoints__SWIG_1(swigCPtr, this), false);
  }

  public void set_enforce_path_constraint_midpoints(boolean value) {
    opensimMocoJNI.MocoCasADiSolver_set_enforce_path_constraint_midpoints__SWIG_1(swigCPtr, this, value);
  }

  public MocoCasADiSolver() {
    this(opensimMocoJNI.new_MocoCasADiSolver(), true);
  }

  /**
   *  Returns true if Moco was compiled with the CasADi library; returns false<br>
   *  otherwise.
   */
  public static boolean isAvailable() {
    return opensimMocoJNI.MocoCasADiSolver_isAvailable();
  }

  /**
   *  <br>
   *  Create a guess that you can edit and then set using setGuess().<br>
   *  The types of guesses available are:<br>
   *  - **bounds**: variable values are the midpoint between the variables'<br>
   *    bounds (the value for variables with ony one bound is the specified<br>
   *    bound). This is the default type.<br>
   *  - **random**: values are randomly generated within the bounds.<br>
   *  - **time-stepping**: see MocoSolver::createGuessTimeStepping().<br>
   *    NOTE: This option does not yet work well for this solver.<br>
   *  Note: Calling this method does *not* set an initial guess to be used<br>
   *  in the solver; you must call setGuess() or setGuessFile() for that.<br>
   *  You must have called resetProblem().
   */
  public MocoTrajectory createGuess(String type) {
    return new MocoTrajectory(opensimMocoJNI.MocoCasADiSolver_createGuess__SWIG_0(swigCPtr, this, type), true);
  }

  /**
   *  <br>
   *  Create a guess that you can edit and then set using setGuess().<br>
   *  The types of guesses available are:<br>
   *  - **bounds**: variable values are the midpoint between the variables'<br>
   *    bounds (the value for variables with ony one bound is the specified<br>
   *    bound). This is the default type.<br>
   *  - **random**: values are randomly generated within the bounds.<br>
   *  - **time-stepping**: see MocoSolver::createGuessTimeStepping().<br>
   *    NOTE: This option does not yet work well for this solver.<br>
   *  Note: Calling this method does *not* set an initial guess to be used<br>
   *  in the solver; you must call setGuess() or setGuessFile() for that.<br>
   *  You must have called resetProblem().
   */
  public MocoTrajectory createGuess() {
    return new MocoTrajectory(opensimMocoJNI.MocoCasADiSolver_createGuess__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  The number of time points in the trajectory does *not* need to match<br>
   *  `num_mesh_intervals`; the trajectory will be interpolated to the correct<br>
   *  size.<br>
   *  If you have updated the problem since the solver was initialized, you<br>
   *  may need to invoke MocoSolver::resetProblem() for the provided guess to<br>
   *  be recognized as compatible with the problem.<br>
   *  This clears the `guess_file`, if one exists.
   */
  public void setGuess(MocoTrajectory guess) {
    opensimMocoJNI.MocoCasADiSolver_setGuess__SWIG_0(swigCPtr, this, MocoTrajectory.getCPtr(guess), guess);
  }

  /**
   *  Use this convenience function if you want to choose the type of guess<br>
   *  used, but do not want to modify it first.
   */
  public void setGuess(String type) {
    opensimMocoJNI.MocoCasADiSolver_setGuess__SWIG_1(swigCPtr, this, type);
  }

  /**
   *  This clears any previously-set guess, if any. The file is not loaded<br>
   *  until solving or if you call getGuess().<br>
   *  Set to an empty string to clear the guess file.
   */
  public void setGuessFile(String file) {
    opensimMocoJNI.MocoCasADiSolver_setGuessFile(swigCPtr, this, file);
  }

  /**
   *  Clear the stored guess and the `guess_file` if any.
   */
  public void clearGuess() {
    opensimMocoJNI.MocoCasADiSolver_clearGuess(swigCPtr, this);
  }

  /**
   *  Access the guess, loading it from the guess_file if necessary.<br>
   *  This throws an exception if you have not set a guess (or guess file).<br>
   *  If you have not set a guess (or guess file), this returns an empty<br>
   *  guess, and when solving, we will generate a guess using bounds.
   */
  public MocoTrajectory getGuess() {
    return new MocoTrajectory(opensimMocoJNI.MocoCasADiSolver_getGuess(swigCPtr, this), false);
  }

}
