/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This goal allows you to minimize the squared difference between a Model<br>
 * Output value and a user-defined function. Outputs of type double, SimTK::Vec3,<br>
 * and SimTK::SpatialVec are supported. By default, when using vector type Outputs,<br>
 * the norm of the vector is tracked, but you can also track a specific element of a<br>
 * vector Output via `setOutputIndex()`.<br>
 * Note: The exponent provided via 'setExponent()' is applied to the difference<br>
 *       between Output value and the tracking function.<br>
 * 
 */
public class MocoOutputTrackingGoal extends MocoOutputBase {
  private transient long swigCPtr;

  public MocoOutputTrackingGoal(long cPtr, boolean cMemoryOwn) {
    super(opensimMocoJNI.MocoOutputTrackingGoal_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MocoOutputTrackingGoal obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimMocoJNI.delete_MocoOutputTrackingGoal(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MocoOutputTrackingGoal safeDownCast(OpenSimObject obj) {
    long cPtr = opensimMocoJNI.MocoOutputTrackingGoal_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MocoOutputTrackingGoal(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimMocoJNI.MocoOutputTrackingGoal_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimMocoJNI.MocoOutputTrackingGoal_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimMocoJNI.MocoOutputTrackingGoal_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MocoOutputTrackingGoal(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimMocoJNI.MocoOutputTrackingGoal_getConcreteClassName(swigCPtr, this);
  }

  public MocoOutputTrackingGoal() {
    this(opensimMocoJNI.new_MocoOutputTrackingGoal__SWIG_0(), true);
  }

  public MocoOutputTrackingGoal(String name) {
    this(opensimMocoJNI.new_MocoOutputTrackingGoal__SWIG_1(name), true);
  }

  public MocoOutputTrackingGoal(String name, double weight) {
    this(opensimMocoJNI.new_MocoOutputTrackingGoal__SWIG_2(name, weight), true);
  }

  /**
   *  The function of time that the Output value will track in the integrand.
   */
  public void setTrackingFunction(Function f) {
    opensimMocoJNI.MocoOutputTrackingGoal_setTrackingFunction(swigCPtr, this, Function.getCPtr(f), f);
  }

  public Function getTrackingFunction() {
    return new Function(opensimMocoJNI.MocoOutputTrackingGoal_getTrackingFunction(swigCPtr, this), false);
  }

}
