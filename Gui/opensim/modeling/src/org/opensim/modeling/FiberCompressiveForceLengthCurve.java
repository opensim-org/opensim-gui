/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

/**
 *  This class serves as a serializable FiberCompressiveForceLengthCurve, <br>
 *  which is used to ensure that the fiber cannot generate force at, nor shorten<br>
 *  beyond a minimum normalized length.<br>
 * <br>
 *  <img src=fig_FiberCompressiveForceLengthCurve.png/><br>
 * <br>
 *   Note that this object should be updated through the set methods provided. <br>
 *  These set methods will take care of rebuilding the curve correctly. If you<br>
 *  modify the properties directly, the curve will not be rebuilt, and upon<br>
 *  calling a function like calcValue, calcDerivative, or printCurveToCSVFile<br>
 *  an exception will be thrown because the curve is out of date with its <br>
 *  properties.<br>
 * <br>
 *   @author Matt Millard
 */
public class FiberCompressiveForceLengthCurve extends Function {
  private transient long swigCPtr;

  public FiberCompressiveForceLengthCurve(long cPtr, boolean cMemoryOwn) {
    super(opensimSimulationJNI.FiberCompressiveForceLengthCurve_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(FiberCompressiveForceLengthCurve obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimSimulationJNI.delete_FiberCompressiveForceLengthCurve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static FiberCompressiveForceLengthCurve safeDownCast(OpenSimObject obj) {
    long cPtr = opensimSimulationJNI.FiberCompressiveForceLengthCurve_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new FiberCompressiveForceLengthCurve(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimSimulationJNI.FiberCompressiveForceLengthCurve_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new FiberCompressiveForceLengthCurve(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_norm_length_at_zero_force(FiberCompressiveForceLengthCurve source) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_copyProperty_norm_length_at_zero_force(swigCPtr, this, FiberCompressiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_norm_length_at_zero_force(int i) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_norm_length_at_zero_force__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_norm_length_at_zero_force(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_norm_length_at_zero_force__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_norm_length_at_zero_force(int i, double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_norm_length_at_zero_force__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_norm_length_at_zero_force(double value) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_append_norm_length_at_zero_force(swigCPtr, this, value);
  }

  public void constructProperty_norm_length_at_zero_force(double initValue) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_constructProperty_norm_length_at_zero_force(swigCPtr, this, initValue);
  }

  public double get_norm_length_at_zero_force() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_norm_length_at_zero_force__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_norm_length_at_zero_force() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_norm_length_at_zero_force__SWIG_1(swigCPtr, this), false);
  }

  public void set_norm_length_at_zero_force(double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_norm_length_at_zero_force__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_stiffness_at_zero_length(FiberCompressiveForceLengthCurve source) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_copyProperty_stiffness_at_zero_length(swigCPtr, this, FiberCompressiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_stiffness_at_zero_length(int i) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_stiffness_at_zero_length__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_stiffness_at_zero_length(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_stiffness_at_zero_length__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_stiffness_at_zero_length(int i, double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_stiffness_at_zero_length__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_stiffness_at_zero_length(double value) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_append_stiffness_at_zero_length(swigCPtr, this, value);
  }

  public void constructProperty_stiffness_at_zero_length() {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_constructProperty_stiffness_at_zero_length__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_stiffness_at_zero_length(double initValue) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_constructProperty_stiffness_at_zero_length__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_stiffness_at_zero_length() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_stiffness_at_zero_length__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_stiffness_at_zero_length() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_stiffness_at_zero_length__SWIG_1(swigCPtr, this), false);
  }

  public void set_stiffness_at_zero_length(double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_stiffness_at_zero_length__SWIG_1(swigCPtr, this, value);
  }

  public void copyProperty_curviness(FiberCompressiveForceLengthCurve source) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_copyProperty_curviness(swigCPtr, this, FiberCompressiveForceLengthCurve.getCPtr(source), source);
  }

  public double get_curviness(int i) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_curviness__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_curviness(int i) {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_curviness__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_curviness(int i, double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_curviness__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_curviness(double value) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_append_curviness(swigCPtr, this, value);
  }

  public void constructProperty_curviness() {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_constructProperty_curviness__SWIG_0(swigCPtr, this);
  }

  public void constructProperty_curviness(double initValue) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_constructProperty_curviness__SWIG_1(swigCPtr, this, initValue);
  }

  public double get_curviness() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_get_curviness__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_double upd_curviness() {
    return new SWIGTYPE_p_double(opensimSimulationJNI.FiberCompressiveForceLengthCurve_upd_curviness__SWIG_1(swigCPtr, this), false);
  }

  public void set_curviness(double value) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_set_curviness__SWIG_1(swigCPtr, this, value);
  }

  /**
   *  Default constructor creates an object with a default name that doesn't<br>
   *     yet define a curve. *
   */
  public FiberCompressiveForceLengthCurve() {
    this(opensimSimulationJNI.new_FiberCompressiveForceLengthCurve__SWIG_0(), true);
  }

  /**
   *  Constructs a C2 continuous compressive fiber force length curve. This<br>
   *     curve is used in the fiber model as a means of ensuring that the fiber<br>
   *     cannot generate a tensile force at, nor shorten beyond, some minimum length.<br>
   *     Details to appear in Millard et al. 2012.<br>
   * <br>
   *     @param normLengthAtZeroForce<br>
   *             The normalized fiber length at which the compressive element<br>
   *             begins to engage. Normalized length is defined as<br>
   *             length_norm = l/l0, where l is the length of the fiber,<br>
   *             and l0 is the resting length of the fiber.<br>
   * <br>
   *     @param stiffnessAtZeroLength<br>
   *             This is the stiffness of the compressive elastic force length<br>
   *             spring when the fiber reaches a normalized length of 0.<br>
   * <br>
   *     @param curviness<br>
   *             A dimensionless parameter between [0-1] that controls how<br>
   *             the curve is drawn: 0 will create a curve that is<br>
   *             very close to a straight line segment while a value of 1 will<br>
   *             create a curve that smoothly fills the corner formed by the<br>
   *             linear extrapolation of 'stiffnessAtZeroLength' and the<br>
   *             x axis as shown in the figure.<br>
   * <br>
   *     @param muscleName<br>
   *             The name of the muscle this curve belongs to. This name is used<br>
   *             to create the name of this curve, which is formed simply by<br>
   *             appending "_FiberCompressiveForceLengthCurve" to the string in<br>
   *             muscleName. This name is used for making intelligible error<br>
   *             messages and also for naming the XML version of this curve when<br>
   *             it is serialized.<br>
   * <br>
   *     <b>Conditions</b><br>
   *     {@literal 
          normLengthAtZeroForce > 0
          stiffnessAtZeroLength < -1/normLengthAtZeroForce
          0 <= curviness <= 1
      }<br>
   * <br>
   *     <b>Computational Costs</b><br>
   *     {@literal 
          ~174,100 flops
      }<br>
   * <br>
   *     <b>Default Parameter Values</b><br>
   * <br>
   *     {@literal 
          normLengthAtZeroForce   = 0.6
          stiffnessAtZeroLength   = -8.4
          curviness               = 0.5
      }
   */
  public FiberCompressiveForceLengthCurve(double normLengthAtZeroForce, double stiffnessAtZeroLength, double curviness, String muscleName) {
    this(opensimSimulationJNI.new_FiberCompressiveForceLengthCurve__SWIG_1(normLengthAtZeroForce, stiffnessAtZeroLength, curviness, muscleName), true);
  }

  /**
   *     @return The normalized fiber length at which the compressive element<br>
   *                 begins to engage. Normalized length is defined as <br>
   *                 length_norm = l/l0, where l is the length of the fiber,<br>
   *                 and l0 is the resting length of the fiber.    
   */
  public double getNormLengthAtZeroForce() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_getNormLengthAtZeroForce(swigCPtr, this);
  }

  /**
   *      @return This is the stiffness of the compressive elastic force length<br>
   *                 spring when the fiber reaches a normalized length of 0. If this<br>
   *                 optional property is not specified, a suitable value will be <br>
   *                 calculated and used instead.
   */
  public double getStiffnessAtZeroLengthInUse() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_getStiffnessAtZeroLengthInUse(swigCPtr, this);
  }

  /**
   *      @return A dimensionless parameter between [0-1] that controls how <br>
   *                 the curve is drawn: 0 will create a curve that is<br>
   *                 very close to a straight line segment while a value of 1 will <br>
   *                 create a curve that smoothly fills the corner formed by the <br>
   *                 linear extrapolation of 'stiffnessAtOneNormForce' and the<br>
   *                 x axis as shown in the figure. If this optional property<br>
   *                 is not specified, a suitable value will be calculated and used<br>
   *                 instead.
   */
  public double getCurvinessInUse() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_getCurvinessInUse(swigCPtr, this);
  }

  /**
   *     @param aNormLengthAtZeroForce<br>
   *             Sets the normalized fiber length at which the compressive element<br>
   *             begins to engage. Normalized length is defined as <br>
   *             length_norm = l/l0, where l is the length of the fiber,<br>
   *             and l0 is the resting length of the fiber. This length must be <br>
   *             greater than 0.<br>
   * <br>
   *     <b>Cost </b><br>
   *     The curve is rebuilt at a cost of ~174,100 flops
   */
  public void setNormLengthAtZeroForce(double aNormLengthAtZeroForce) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_setNormLengthAtZeroForce(swigCPtr, this, aNormLengthAtZeroForce);
  }

  /**
   *      @param aStiffnessAtZeroLength<br>
   *             Sets the stiffness of the compressive elastic force length<br>
   *             spring when the fiber reaches a normalized length of 0. This <br>
   *             stiffness must be less than -1/normLengthAtZeroForce<br>
   * <br>
   *      @param aCurviness  <br>
   *                 A dimensionless parameter between [0-1] that controls how <br>
   *                 the curve is drawn: 0 will create a curve that is<br>
   *                 very close to a straight line segment while a value of 1 will <br>
   *                 create a curve that smoothly fills the corner formed by the <br>
   *                 linear extrapolation of 'stiffnessAtOneNormForce' and the<br>
   *                 x axis as shown in the figure.<br>
   *      <b>Cost </b><br>
   *      The curve is rebuilt at a cost of ~174,100 flops
   */
  public void setOptionalProperties(double aStiffnessAtZeroLength, double aCurviness) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_setOptionalProperties(swigCPtr, this, aStiffnessAtZeroLength, aCurviness);
  }

  /**
   *      @return true if the optional properties are empty and the fitted curve is<br>
   *               being used. This function returns false if the optional properties<br>
   *               are filled and are being used to construct the curve.
   */
  public boolean isFittedCurveBeingUsed() {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_isFittedCurveBeingUsed(swigCPtr, this);
  }

  /**
   *     Calculates the value of the curve evaluated at the desired normalized fiber<br>
   *     length.  <br>
   * <br>
   *     @param aNormLength: <br>
   *                 The normalized fiber length used to evaluate the fiber <br>
   *                 compressive force length curve for the corresponding normalized <br>
   *                 force. Here aNormLength = l/l0, where l is the length of the fiber and <br>
   *                 l0 is the resting length of the fiber.  Thus normalized length <br>
   *                 of 1.0 means the fiber is at its resting length.      <br>
   * <br>
   *     @return the value of the normalized force generated by the fiber<br>
   * <br>
   *     <b>Computational Costs</b><br>
   *     {@literal 
          x in curve domain  : ~282 flops
          x in linear section:   ~5 flops
      }
   */
  public double calcValue(double aNormLength) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcValue__SWIG_0(swigCPtr, this, aNormLength);
  }

  /**
   *  Implement the generic OpenSim::Function interface *
   */
  public double calcValue(Vector x) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcValue__SWIG_1(swigCPtr, this, Vector.getCPtr(x), x);
  }

  /**
   *     Calculates the derivative of the fiber force length curve w.r.t. <br>
   *     to the normalized fiber length. <br>
   * <br>
   *     @param aNormLength: <br>
   *                 The normalized fiber length used to evaluate the compressive <br>
   *                 fiber force length curve for the corresponding normalized force. Here <br>
   *                 aNormLength = l/l0, where l is the length of the fiber and l0 <br>
   *                 is the resting length of the fiber.  Thus normalized length of <br>
   *                 1.0 means the fiber is at its resting length.<br>
   * <br>
   *     @param order: the order of the derivative. Only values of 0,1 and 2 are <br>
   *                   acceptable.<br>
   * <br>
   *     @return the derivative of the normalized fiber force length curve w.r.t. <br>
   *         normalized fiber length<br>
   * <br>
   *     <b>Computational Costs</b>       <br>
   *     {@literal 
          x in curve domain  : ~391 flops
          x in linear section:   ~2 flops       
      }
   */
  public double calcDerivative(double aNormLength, int order) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcDerivative__SWIG_0(swigCPtr, this, aNormLength, order);
  }

  /**
   *  If possible, use the simpler overload above.
   */
  public double calcDerivative(StdVectorInt derivComponents, Vector x) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcDerivative__SWIG_1(swigCPtr, this, StdVectorInt.getCPtr(derivComponents), derivComponents, Vector.getCPtr(x), x);
  }

  /**
   *     @param aNormLength<br>
   *                 Here aNormLength = l/l0, where l is the length <br>
   *                 of the fiber and l0 is the resting length of the fiber.  <br>
   *                 Thus normalized length of 1.0 means the fiber is at its <br>
   *                 resting length.<br>
   * <br>
   *     @return Computes the normalized area under the curve. For this curve, <br>
   *             this quantity corresponds to the normalized potential energy stored <br>
   *             in the fiber compressive force length spring - simply <br>
   *             multiply this quantity by the number of NormForce*NormDistance<br>
   *             (where NormForce corresponds to the number of<br>
   *             Newtons that 1 normalized force corresponds to, and NormDistance<br>
   *             is the distance in meters that a normalized value of 1 corresponds<br>
   *             to) to obtain the potential energy stored in the fiber in units of <br>
   *             Joules.<br>
   * <br>
   *     <b>Computational Costs</b>    <br>
   * <br>
   *     {@literal 
          x in curve domain  : ~13 flops
          x in linear section: ~19 flops
      }
   */
  public double calcIntegral(double aNormLength) {
    return opensimSimulationJNI.FiberCompressiveForceLengthCurve_calcIntegral(swigCPtr, this, aNormLength);
  }

  /**
   *        This function returns a SimTK::Vec2 that contains in its 0th element<br>
   *        the lowest value of the curve domain, and in its 1st element the highest<br>
   *        value in the curve domain of the curve. Outside of this domain the curve<br>
   *        is approximated using linear extrapolation. <br>
   * <br>
   *        @return The minimum and maximum value of the domain, x, of the curve <br>
   *                   y(x). Within this range y(x) is a curve, outside of this range<br>
   *                   the function y(x) is a C2 (continuous to the second <br>
   *                   derivative) linear extrapolation
   */
  public Vec2 getCurveDomain() {
    return new Vec2(opensimSimulationJNI.FiberCompressiveForceLengthCurve_getCurveDomain(swigCPtr, this), true);
  }

  /**
   * This function will generate a csv file with a name that matches the <br>
   *        curve name (e.g. "bicepfemoris_FiberCompressiveForceLengthCurve.csv");<br>
   *        This function is not const to permit the curve to be rebuilt if it is out <br>
   *        of date with its properties.<br>
   * <br>
   *        @param path The full path to the location. Note '/' slashes must be used,<br>
   *             and do not put a '/' after the last folder.<br>
   * <br>
   *        The file will contain the following columns:<br>
   * <br>
   *        {@literal 
         Col# 1, 2,     3,       4,  
              x, y, dy/dx, d2y/dx2,
         }<br>
   * <br>
   *        The curve will be sampled from its linear extrapolation region<br>
   *        (the region with normalized fiber velocities &lt; -1), through <br>
   *        the curve, out to the other linear extrapolation region<br>
   *        (the region with normalized fiber velocities &gt; 1). The width of <br>
   *        each linear extrapolation region is 10% of the entire range of x, or <br>
   *        0.1*(x1-x0).<br>
   * <br>
   *        The curve is sampled quite densely: there are 200+20 rows    <br>
   * <br>
   *        <b>Computational Costs</b><br>
   *        {@literal 
              ~194,800 flops
         }<br>
   * <br>
   *        <b>Example</b><br>
   *        To read the csv file with a header in from Matlab, you need to use <br>
   *        csvread set so that it will ignore the header row. This is accomplished<br>
   *        by using the extra two numerical arguments for csvread to tell the <br>
   *        function to begin reading from the 1st row, and the 0th index (csvread<br>
   *        is 0 indexed). This is necessary to skip reading in the text header<br>
   *        {@literal 
          data=csvread('bicepfemoris_fiberCompressiveForceLengthCurve.csv',1,0);
         }
   */
  public void printMuscleCurveToCSVFile(String path) {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_printMuscleCurveToCSVFile(swigCPtr, this, path);
  }

  public void ensureCurveUpToDate() {
    opensimSimulationJNI.FiberCompressiveForceLengthCurve_ensureCurveUpToDate(swigCPtr, this);
  }

}
