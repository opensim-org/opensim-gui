#!/bin/bash

function err_unsupported_env {
    printf "\r  [\033[0;31mERROR:\033[0m] Your distro/release is not supported by this script\n"
    printf "  Ubuntu >=18.04 LTS is currently the only Linux distribution that is tested \
against, however the OpenSim GUI will likely run on other distributions and/or \
releases. See the https://github.com/opensim-org/opensim-gui for more \
information.\n"
    exit 1
}

function usage {
  echo -n "INSTALL [OPTIONS]...

Install the OpenSim GUI. Ubuntu >=18.04 LTS is the only tested Linux. Manual \
installation on other systems may be possible; see \
https://github.com/opensim-org/opensim-gui for more information.

 Options:
  -p, --prefix      Install prefix; defaults to /opt/opensim-gui
  -v, --verbose     Be verbose
  -h, --help        Display this help and exit
"
}

# From https://stackoverflow.com/a/246128
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

## From https://stackoverflow.com/a/29754866
# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

OPTIONS=hp:v
LONGOPTS=help,prefix:,verbose

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

v=0 installPrefix=/opt/opensim-gui
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            v=1
            shift
            ;;
        -p|--prefix)
            installPrefix="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Bad argument: $1 is not a valid argument"
            exit 3
            ;;
    esac
done
## End from https://stackoverflow.com/a/29754866

if [[ -e /etc/os-release ]]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
else
    err_unsupported_env
fi

MIN_UBUNTU_VER="18"
MIN_DEBIAN_VER="10"

# Retrieve group of current user.
GROUP=$(id -gn)

VER_SPLIT=(${VER//./ })
VER_MAJOR=${VER_SPLIT[0]}

# Check if OS is Ubuntu or Debian with given minimum versions.
if ( [[ $OS == *"Ubuntu"* ]] && (( $MIN_UBUNTU_VER <= $VER_MAJOR )) ) || ( [[ $OS == *"Debian"* ]] && (( $MIN_DEBIAN_VER <= $VER_MAJOR )) ); then    

    # Specific to Ubuntu. Install openjdk-8-jre. In Debian, we installed it with temurin8.
    if [[ $OS == *"Ubuntu"* ]]; then
        [[ $v == 1 ]] && echo "Installing Java..."
        sudo apt install -qqqq -y openjdk-8-jre
    fi
    
    [[ $v == 1 ]] && echo "Testing for system LAPACK/BLAS..."
    if ! (sudo ldconfig -p | grep -q "libblas|liblapack"); then
        [[ $v == 1 ]] && echo "  Installing liblapack3..."
        sudo apt install -qqqq -y liblapack3
    fi

    [[ $v == 1 ]] && echo "Testing for libgconf..."
    if ! (sudo ldconfig -p | grep -q "libgconf"); then
        [[ $v == 1 ]] && echo "  Installing libgconf..."
        sudo apt install -qqqq -y libgconf-2-4
    fi

    [[ $v == 1 ]] && echo "Installing OpenSim GUI to $installPrefix, owned by $USER, belonging to $GROUP..."
    sudo mkdir -p $installPrefix
    sudo chown -R $USER:$GROUP $installPrefix
    cp -R $SCRIPTDIR/* $installPrefix

    # JDK home is extracted by getting java home from JDK properties.
    JDK_HOME=$(java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home')
    # Then, we extract the value from the resulting string (java.home = VALUE).
    JDK_HOME="${JDK_HOME##* }"
    # Since this gives the path to the jre, we need to do dirname to get the previous path, which is the path to the jdk.
    JDK_HOME=$(dirname $JDK_HOME)

    [[ $v == 1 ]] && echo "Adding OpenSim to list of desktop applications..."
    echo "[Desktop Entry]
Version=1.0
Type=Application
Name=OpenSim
Comment=OpenSim is an open source software for neuromusculoskeletal modeling, simulation \
and analysis.
Path=$installPrefix
Exec=bash $installPrefix/bin/opensim --jdkhome $JDK_HOME
Icon=opensim
Terminal=false
Categories=Science;Education;" | sudo tee /usr/share/applications/opensim.desktop > /dev/null
    sudo cp OpenSimLogoWhiteNoText.png /usr/share/pixmaps/opensim.png

    [[ $v == 1 ]] && echo "Installing opensim-core commands..."
    cd $installPrefix/bin
    if [[ $v == 1 ]]; then
        ./opensim-install-command-line.sh
    else
        ./opensim-install-command-line.sh > /dev/null
    fi
else
    err_unsupported_env
fi
